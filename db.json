{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":0},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"14179fdda2e1bb4ad2ebde2bd01113e6603b939e","modified":1626323812042},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1626675187029},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1626675187030},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1626675187030},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1626675187030},{"_id":"themes/cactus/README.md","hash":"fb9d93da3cbf7ce6a10d57ac47a3aaafb2d9810e","modified":1626675187030},{"_id":"themes/cactus/_config.yml","hash":"1cd69a6634b654269628b94d317aac38cd73d308","modified":1626675187030},{"_id":"themes/cactus/gulpfile.js","hash":"0e55606323a45873506c08be6528478c08373e1e","modified":1626675187030},{"_id":"themes/cactus/package.json","hash":"a6060fadd36114d8cb74e7ff4c7d073901b5edcd","modified":1626675187039},{"_id":"source/404/index.md","hash":"19a62fac9a04299079b1068ac3ab1be736fa84f0","modified":1626675187022},{"_id":"source/_posts/.DS_Store","hash":"35f680a33c0c0992e4540c05b591fed8fe89409f","modified":1626187765594},{"_id":"source/_posts/Deffie-Hellman 密钥交换算法.md","hash":"47a1c60b27851200bb5a41ec1d7542034296029c","modified":1626675187022},{"_id":"source/_posts/LeetCode刷题题库.md","hash":"e6885084a92c99f186dfeac6d6707f6901b741d5","modified":1626675187022},{"_id":"source/_posts/Seata protocol supports http2.md","hash":"f75df799715bf948a434600a7cf84ef4bb443151","modified":1626675187022},{"_id":"source/_posts/全连通内网守护程序.md","hash":"6419bb2f6a7db6224a0ebf34179f2e2e5824b0bd","modified":1626675187024},{"_id":"source/_posts/一个四非学生的2021暑期实习春招总结.md","hash":"4e843782d3be78d446f78f6b2c3ede10cb6f4b22","modified":1626675187023},{"_id":"source/_posts/关于爬虫的一点经验.md","hash":"1d8b0fcbe5f8115736060b5f123f72b2c9127a6b","modified":1626675187024},{"_id":"source/_posts/基于开放 API 封装 Wechaty 接口下的飞书聊天机器人.md","hash":"e2d0a2e36cff625644055b2c34259c3ae0f03dc0","modified":1626675187024},{"_id":"source/_posts/大数据与Hadoop生态系统总结.md","hash":"7f2b32eb012c4006a43e069387b2990a6fdc4941","modified":1626675187024},{"_id":"source/about/index.md","hash":"3aba51f27756421d3b9fb9cec70097a626504bbc","modified":1626675187024},{"_id":"source/categories/index.md","hash":"fc06e152800bc45791315d8a16ffc11b92e39c46","modified":1626675187024},{"_id":"source/schedule/index.md","hash":"f1a4808e1b20f2287e6102cad12ff7a545c23d3b","modified":1626675187029},{"_id":"source/sitemap-xml/index.md","hash":"4c07531d5d25966022e5d16e753240a33026be92","modified":1626675187029},{"_id":"source/tags/index.md","hash":"e86da851897f1df9de36bb894a910a4f72ac1587","modified":1626675187029},{"_id":"source/sitemap/index.md","hash":"4aa6279ebb85fcd734ed46594e66c2d898027e3f","modified":1626675187029},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1626675187031},{"_id":"themes/cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1626675187031},{"_id":"themes/cactus/languages/default.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1626675187031},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1626675187031},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1626675187031},{"_id":"themes/cactus/languages/en.yml","hash":"6a84970bf69c3e9490e5382747ca2b4c4b4dccde","modified":1626675187031},{"_id":"themes/cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1626675187031},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1626675187031},{"_id":"themes/cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1626675187032},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1626675187032},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1626675187032},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1626675187032},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1626675187033},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1626675187033},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1626675187033},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"8f81faaad9a0615b09dbc23868484a55ec958f6f","modified":1626675187033},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1626675187033},{"_id":"themes/cactus/layout/archive.ejs","hash":"5a23d506dd65f9b5fd1d44a73d5e04c935a899e2","modified":1626675187038},{"_id":"themes/cactus/layout/index.ejs","hash":"054397351b38f2ae11f15b17baa1a6753ab1ea9d","modified":1626675187038},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1626675187039},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1626675187039},{"_id":"themes/cactus/layout/post.ejs","hash":"f9149f294e6142437c58784c41f1d082a61c8b82","modified":1626675187039},{"_id":"themes/cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1626675187040},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1626675187040},{"_id":"themes/cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1626675187040},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1626675187040},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1626675187041},{"_id":"source/images/avatar.jpg","hash":"4b6fb9f445729d9346877541317bf152f18adb42","modified":1626675187025},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1626675187034},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"116424c97ec87f0d8124095e73d458eb6f4f12a0","modified":1626675187034},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"95526bec071998144ee0b0fc33f39bb74e5e9c4f","modified":1626675187035},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"ab9648ad591d87d5a4a3482d909cef56c486fc4e","modified":1626675187035},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1626675187035},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"3f7bb42d40e96c5737ad85e85bb9e6c82dca51ea","modified":1626675187037},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1626675187038},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1626675187038},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1626675187042},{"_id":"themes/cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1626675187042},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1626675187053},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1626675187056},{"_id":"themes/cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1626675187056},{"_id":"themes/cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1626675187056},{"_id":"themes/cactus/source/css/style.styl","hash":"a274f3a706d23506303f7426fe555478232d60f2","modified":1626675187056},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1626675187056},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1626675187057},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1626675187057},{"_id":"themes/cactus/source/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1626675187058},{"_id":"themes/cactus/source/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1626675187059},{"_id":"source/_posts/Seata protocol supports http2/seata_protobuf.png","hash":"5ca28fe423e6f799bf950aa3e00bc68b8bd7ede1","modified":1626675187023},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"b8016c193def987d4c7956486fc494d74fc14d70","modified":1626675187035},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1626675187036},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1626675187036},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1626675187036},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1626675187036},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"1a294382bd14d979525b8ed934d807bc7d083e4d","modified":1626675187037},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1626675187037},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1626675187037},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1626675187041},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9e1a129149c9d747d5d5fdfcc8837771ce940338","modified":1626675187041},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1626675187042},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1626675187042},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1626675187042},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1626675187043},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1626675187043},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1626675187043},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1626675187043},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1626675187044},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1626675187044},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1626675187044},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1626675187044},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1626675187044},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1626675187045},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1626675187045},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1626675187045},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1626675187045},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1626675187045},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1626675187045},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1626675187045},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1626675187046},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1626675187046},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1626675187046},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1626675187046},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1626675187046},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1626675187046},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1626675187046},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1626675187047},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1626675187047},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1626675187047},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1626675187047},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1626675187047},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1626675187047},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1626675187047},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1626675187048},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1626675187049},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1626675187049},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1626675187049},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1626675187049},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1626675187049},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1626675187049},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1626675187050},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1626675187050},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1626675187050},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1626675187050},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1626675187050},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1626675187050},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1626675187050},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1626675187051},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1626675187052},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1626675187052},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1626675187052},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1626675187052},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1626675187052},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1626675187052},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1626675187052},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1626675187053},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1626675187053},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1626675187053},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1626675187053},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1626675187053},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1626675187053},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1626675187054},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1626675187054},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1626675187054},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1626675187054},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1626675187054},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"7f18929e7f4ad6d20da374e8b9f85ce587220a87","modified":1626675187054},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1626675187054},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1626675187055},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1626675187055},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1626675187055},{"_id":"themes/cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1626675187055},{"_id":"themes/cactus/source/lib/clipboard/clipboard.min.js","hash":"f42d0a402f08adb3e1e8f85382aca3bd91b4ed17","modified":1626675187059},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1626675187088},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1626675187088},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1626675187091},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1626675187091},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1626675187093},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1626675187094},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1626675187095},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1626675187096},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1626675187097},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1626675187098},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1626675187099},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1626675187099},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1626675187099},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1626675187058},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1626675187075},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1626675187086},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1626675187087},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1626675187089},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1626675187090},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1626675187092},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1626675187093},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1626675187094},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1626675187095},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1626675187096},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1626675187097},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1626675187098},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1626675187099},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1626675187055},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1626675187055},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1626675187066},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1626675187067},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1626675187067},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1626675187067},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"82f2cbe45882f86427a9ff36ee93b2ba9a31452f","modified":1626675187076},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1626675187076},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"1b7f2fb5f3110512c9eb245958bc87f2e9992927","modified":1626675187059},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1626675187066},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1626675187075},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1626675187061},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1626675187065},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1626675187065},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1626675187074},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1626675187083},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1626675187067},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1626675187074},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1626675187069},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1626675187077},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1626675187078},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1626675187080},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1626675187080},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1626675187084},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1626675187079},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1626675187082},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1626675187079},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1626675187081},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1626675187077},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1626675187085},{"_id":"source/images/background.jpg","hash":"d3ec7351b9e22332567b62cb6bcf74dcf0794f60","modified":1626675187028},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1626675187064},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1626675187072},{"_id":"public/404/index.html","hash":"b9cc576e99400f24c2bb798fbd2027a1ba36a0cb","modified":1626675416979},{"_id":"public/categories/index.html","hash":"1de1ebfb67db6b4e8a9765de0aa901be0bee68cb","modified":1626675416979},{"_id":"public/about/index.html","hash":"8610a95d7408643ce2555ffb1537896db7146dc6","modified":1626675416979},{"_id":"public/schedule/index.html","hash":"0ebec77da79508d428f521b1d2dda70408bc9c9a","modified":1626675416979},{"_id":"public/sitemap-xml/index.html","hash":"bc98e71ec324546fd642fb786b940ce3dc1950e8","modified":1626675416979},{"_id":"public/tags/index.html","hash":"3fcfb423a67a233bc5a356cad01ebb163c5b411b","modified":1626675416979},{"_id":"public/sitemap/index.html","hash":"8319c4926b9e1337c220f453d1ea5a2cf36860ea","modified":1626675416979},{"_id":"public/f54835d/index.html","hash":"83c70238ca3d75ac2ac0a4b446a61911fff58c94","modified":1626675416979},{"_id":"public/archives/index.html","hash":"03b7a530649b7d6c49fa230f601099719657637c","modified":1626675416979},{"_id":"public/archives/2019/index.html","hash":"e58b1bd7042f76d455e8a1314f2f6b7bc913f4da","modified":1626675416979},{"_id":"public/archives/2019/10/index.html","hash":"2f29a67e15082354f880f4f09f6cb69f78e498b4","modified":1626675416979},{"_id":"public/archives/2021/index.html","hash":"79a3e2fd51e3208c2b8c8f540ce5fe29504575b9","modified":1626675416979},{"_id":"public/archives/2021/04/index.html","hash":"825e455b39e8e78498fe0187fb40566bae7538c8","modified":1626675416979},{"_id":"public/archives/2021/06/index.html","hash":"371cf2bf7d34c87e39a1241f463297292f47160f","modified":1626675416979},{"_id":"public/archives/2021/07/index.html","hash":"f6f648d379de1ffb690c1899ffcba15b00f4c5fc","modified":1626675416979},{"_id":"public/index.html","hash":"83b1ecbcf75dfd19b7aaf8f0c6693b33f58f37c1","modified":1626675416979},{"_id":"public/dcb67373/index.html","hash":"0147923bbc229b2aee649ff41bb6a85447a41834","modified":1626675416979},{"_id":"public/7784fafc/index.html","hash":"15670431b8fdd7dbb18170523131d49733eb76cb","modified":1626675416979},{"_id":"public/76ccdb2e/index.html","hash":"725e658543dff7e57a7064949fdc4cf913dba31f","modified":1626675416979},{"_id":"public/1842b797/index.html","hash":"b563683f51649016b2a072daaf1d45b2cd377ea8","modified":1626675416979},{"_id":"public/1c4cd1f0/index.html","hash":"fc3c8e71aa29d523fa1665ccf46af01bd1152069","modified":1626675416979},{"_id":"public/d59abd41/index.html","hash":"204f0c03a1fc7719ce5b87de3e95c65e769ac5f9","modified":1626675416979},{"_id":"public/4b69a11a/index.html","hash":"ebff4f7edd1076e2acf3e288d23bb0cf5532c1fd","modified":1626675416979},{"_id":"public/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1626675416979},{"_id":"public/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1626675416979},{"_id":"public/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"f1c5d7523d21c2bf820d827c9d5df4184c3866dc","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"9e8d954c46eaad8b8234fa906e9a268ee354dced","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"9376516725e502f4375e06cc4fa7d940e2c93251","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"8d4810991aa94f958aff20a9cd381caf338e3061","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"cba77d3d16f7565f9ea79bd7657f4e00c7fe851f","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"e520d5f6bf7ea3c1e4f2aef2abbbc6a6f9b697cb","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"2e8e3c873e6d98acc3c10aa84997104b276e1e68","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"976b7aa7c2c2c049c548a25b5914cfbda74b0453","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"f231111b3c778b7a5898ea88c0f150c0e72be468","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"baa42f95b41411b9aeaa6c7594e5ccee10d42ac4","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir.woff2","hash":"dc3c0ed67c9abb062b562e8553776f614d2946c2","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir.woff","hash":"c798391d624b9bb44497a87ffc4f7eb52042dceb","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"114f35e6d9053caca2ef6d1e34fea3f87a59245b","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"3ad44eb5c276d1435408f253ca78da729a1aca90","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"f3f0ea4847825806062a9b7a0f629671eb6b6408","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"830f8653e5f4a5331ac0b47c5701f65fe9f1bb32","modified":1626675416979},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1626675416979},{"_id":"public/images/avatar.jpg","hash":"4b6fb9f445729d9346877541317bf152f18adb42","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"603acd29416644e4b4fb8646abeada1865ba6869","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"9ef82b07f3adad7d644c9c3a6d35a0c727bd64e8","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"23ee4a19421de9a0ca9dddc5435a8efe5bf28d87","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"658c1da4f2a0124f6340058daa6873a86e6ba4fc","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"32f51bf715663f5ca419e138617fc05f7055aef5","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"b2372b67b9519fb4fa8e05de6c0ddae56845ff79","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"17be9f699c30f0384004b46e991db8ac38a9992e","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"31cdbcc7215d01c9dd2beb8a28f8b7a7de75b9f4","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"2c0ebb336dd012da8d575cae0ee4d048b65fe6e1","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir.eot","hash":"bd3a7cb9eb70d36b4cfba8c5a05d234aefeefe3c","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"d53fcc2e2d6c9c77613afcd34058be1b75bb0fef","modified":1626675416979},{"_id":"public/lib/vazir-font/Vazir.ttf","hash":"c7a3f2f4d56c4c4ec69d395baf39b55198da0254","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"f356aa2e4d9b7245985d312d3bfba180f774e3b7","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"b2c74520c3f506efbfefca867918e5ae28bd5222","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"91daac2bfba5e6a1a15ce44c53eab524d01c7fb0","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"61f40daca6978e6e7ab761e748c2dd9d236c7586","modified":1626675416979},{"_id":"public/1c4cd1f0/seata_protobuf.png","hash":"5ca28fe423e6f799bf950aa3e00bc68b8bd7ede1","modified":1626675416979},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1626675416979},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1626675416979},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1626675416979},{"_id":"public/js/search.js","hash":"90860ff07187cf1cf21224b05e23b5e8fcf6efef","modified":1626675416979},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"f42d0a402f08adb3e1e8f85382aca3bd91b4ed17","modified":1626675416979},{"_id":"public/lib/vazir-font/font-face.css","hash":"2a95709b15ee45fc2328051038ceedddf83235bb","modified":1626675416979},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"82f2cbe45882f86427a9ff36ee93b2ba9a31452f","modified":1626675416979},{"_id":"public/css/style.css","hash":"4c70eedd3d08d98cf6431fc8ae4a6c9b5c718c6a","modified":1626675416979},{"_id":"public/lib/jquery/jquery.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1626675416979},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1626675416979},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"1b7f2fb5f3110512c9eb245958bc87f2e9992927","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"d4987ee41e0e4142d561f76b8ea8e034c4d5d9d2","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f34ee061900ecd1ed3d3fd9f8f47f4e84c6d56bf","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"1622937e49766e21eacf4ac7065b711f0fe580e1","modified":1626675416979},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"91b40a8f284159d9fff81dc522670ef68d562682","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"be6b63d528286b1be2328d871c9bae95d8d57174","modified":1626675416979},{"_id":"public/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1626675416979},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1626675416979},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"29e6c7e5a4d63d2c9563cd208456cb4f8a357868","modified":1626675416979},{"_id":"public/images/background.jpg","hash":"d3ec7351b9e22332567b62cb6bcf74dcf0794f60","modified":1626675416979},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3a090431fdec61a25ed69b9e6f35a6656bde1595","modified":1626675416979}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2020-04-28T13:14:02.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-04-28 21:14:02\n---\n","updated":"2021-07-19T06:13:07.022Z","path":"404/index.html","comments":1,"layout":"page","_id":"ckra8jl980000jqjy1g58dthn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-04-28T13:13:13.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-04-28 21:13:13\n---\n","updated":"2021-07-19T06:13:07.024Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckra8jl9b0002jqjy669u5yoi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-04-28T13:13:07.000Z","_content":"\n### Who Am I 👨🏻‍💻\n\nHello, here's xilou31, an student of CS in South China Agricultural University.\n\nI am willing to develop some tools making my life easier. \n\nI would like to be a developer of backend.\n\nAnd recently, I've been very interested in open source software.\n\nIf you have some interesting ideas about open source, please feel free to contact me.\n\n### About Me 💡\n\n- 🛠️  Java  | Go | Python\n- 🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis\n- 🎲  Chess | Badminton | Jogging\n- 🎮  League of Legends\n\n### How To Contact Me 📫\n\n+ Email:   xilou31@gmail.com\n+ Wechat:  xilou31\n+ Github:  http://github.com/xilou31","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-04-28 21:13:07\n---\n\n### Who Am I 👨🏻‍💻\n\nHello, here's xilou31, an student of CS in South China Agricultural University.\n\nI am willing to develop some tools making my life easier. \n\nI would like to be a developer of backend.\n\nAnd recently, I've been very interested in open source software.\n\nIf you have some interesting ideas about open source, please feel free to contact me.\n\n### About Me 💡\n\n- 🛠️  Java  | Go | Python\n- 🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis\n- 🎲  Chess | Badminton | Jogging\n- 🎮  League of Legends\n\n### How To Contact Me 📫\n\n+ Email:   xilou31@gmail.com\n+ Wechat:  xilou31\n+ Github:  http://github.com/xilou31","updated":"2021-07-19T06:13:07.024Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckra8jl9d0004jqjy2et61xhf","content":"<h3 id=\"Who-Am-I-👨🏻‍💻\"><a href=\"#Who-Am-I-👨🏻‍💻\" class=\"headerlink\" title=\"Who Am I 👨🏻‍💻\"></a>Who Am I 👨🏻‍💻</h3><p>Hello, here’s xilou31, an student of CS in South China Agricultural University.</p>\n<p>I am willing to develop some tools making my life easier. </p>\n<p>I would like to be a developer of backend.</p>\n<p>And recently, I’ve been very interested in open source software.</p>\n<p>If you have some interesting ideas about open source, please feel free to contact me.</p>\n<h3 id=\"About-Me-💡\"><a href=\"#About-Me-💡\" class=\"headerlink\" title=\"About Me 💡\"></a>About Me 💡</h3><ul>\n<li>🛠️  Java  | Go | Python</li>\n<li>🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis</li>\n<li>🎲  Chess | Badminton | Jogging</li>\n<li>🎮  League of Legends</li>\n</ul>\n<h3 id=\"How-To-Contact-Me-📫\"><a href=\"#How-To-Contact-Me-📫\" class=\"headerlink\" title=\"How To Contact Me 📫\"></a>How To Contact Me 📫</h3><ul>\n<li>Email:   xilou31@gmail.com</li>\n<li>Wechat:  xilou31</li>\n<li>Github:  <a href=\"http://github.com/xilou31\" target=\"_blank\" rel=\"noopener\">http://github.com/xilou31</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Who-Am-I-👨🏻‍💻\"><a href=\"#Who-Am-I-👨🏻‍💻\" class=\"headerlink\" title=\"Who Am I 👨🏻‍💻\"></a>Who Am I 👨🏻‍💻</h3><p>Hello, here’s xilou31, an student of CS in South China Agricultural University.</p>\n<p>I am willing to develop some tools making my life easier. </p>\n<p>I would like to be a developer of backend.</p>\n<p>And recently, I’ve been very interested in open source software.</p>\n<p>If you have some interesting ideas about open source, please feel free to contact me.</p>\n<h3 id=\"About-Me-💡\"><a href=\"#About-Me-💡\" class=\"headerlink\" title=\"About Me 💡\"></a>About Me 💡</h3><ul>\n<li>🛠️  Java  | Go | Python</li>\n<li>🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis</li>\n<li>🎲  Chess | Badminton | Jogging</li>\n<li>🎮  League of Legends</li>\n</ul>\n<h3 id=\"How-To-Contact-Me-📫\"><a href=\"#How-To-Contact-Me-📫\" class=\"headerlink\" title=\"How To Contact Me 📫\"></a>How To Contact Me 📫</h3><ul>\n<li>Email:   xilou31@gmail.com</li>\n<li>Wechat:  xilou31</li>\n<li>Github:  <a href=\"http://github.com/xilou31\" target=\"_blank\" rel=\"noopener\">http://github.com/xilou31</a></li>\n</ul>\n"},{"title":"schedule","date":"2020-04-28T13:13:26.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2020-04-28 21:13:26\n---\n","updated":"2021-07-19T06:13:07.029Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ckra8jl9e0006jqjyc6c53kbt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap.xml","date":"2020-04-28T13:13:46.000Z","_content":"","source":"sitemap-xml/index.md","raw":"---\ntitle: sitemap.xml\ndate: 2020-04-28 21:13:46\n---\n","updated":"2021-07-19T06:13:07.029Z","path":"sitemap-xml/index.html","comments":1,"layout":"page","_id":"ckra8jl9f0008jqjyc5z70i38","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-04-28T13:12:58.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-04-28 21:12:58\n---\n","updated":"2021-07-19T06:13:07.029Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckra8jl9g000ajqjy2nuuhh49","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap","date":"2020-04-28T13:13:54.000Z","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2020-04-28 21:13:54\n---\n","updated":"2021-07-19T06:13:07.029Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"ckra8jl9h000cjqjybnytbr14","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"abbrlink":"dcb67373","date":"2021-07-01T16:00:00.000Z","_content":"Deffie-Hellman 简称 DH 算法。\n\n### 背景\n\n对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。\n\n但是问题来了，对称加密需要双方提前协商好密钥。\n\n在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。\n\n但是密钥在不安全的信道是无法保证安全的。\n\n所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。\n\n### 原理\n\nDH 算法本质上是使用非对称加密。\n\n我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：\n\n1. 甲首选选择一个素数`p`，例如 509，底数`g`，任选，例如 5，随机数`a`，例如 123，然后计算`A=g^a mod p`，结果是 215，然后，甲发送`p＝509`，`g=5`，`A=215`给乙；\n\n2. 乙方收到后，也选择一个随机数`b`，例如，456，然后计算`B=g^b mod p`，结果是 181，乙再同时计算`s=A^b mod p`，结果是 121；\n\n3. 乙把计算的`B=181`发给甲，甲计算`s＝B^a mod p`的余数，计算结果与乙算出的结果一样，都是 121。\n\n所以最终双方协商出的密钥`s`是 121。\n\n注意到这个密钥`s`并没有在网络上传输。而通过网络传输的`p`，`g`，`A`和`B`是无法推算出`s`的，因为实际算法选择的素数是非常大的。\n\n所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。\n\n如果我们把`a`看成甲的私钥，`A`看成甲的公钥，`b`看成乙的私钥，`B`看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥`secretKey`，DH 算法通过数学定律保证了双方各自计算出的`secretKey`是相同的。\n\n### 缺点\n\nDH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。\n\n当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。\n\n至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。\n","source":"_posts/Deffie-Hellman 密钥交换算法.md","raw":"---\nabbrlink: dcb67373\ndate: 2021-07-02\n---\nDeffie-Hellman 简称 DH 算法。\n\n### 背景\n\n对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。\n\n但是问题来了，对称加密需要双方提前协商好密钥。\n\n在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。\n\n但是密钥在不安全的信道是无法保证安全的。\n\n所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。\n\n### 原理\n\nDH 算法本质上是使用非对称加密。\n\n我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：\n\n1. 甲首选选择一个素数`p`，例如 509，底数`g`，任选，例如 5，随机数`a`，例如 123，然后计算`A=g^a mod p`，结果是 215，然后，甲发送`p＝509`，`g=5`，`A=215`给乙；\n\n2. 乙方收到后，也选择一个随机数`b`，例如，456，然后计算`B=g^b mod p`，结果是 181，乙再同时计算`s=A^b mod p`，结果是 121；\n\n3. 乙把计算的`B=181`发给甲，甲计算`s＝B^a mod p`的余数，计算结果与乙算出的结果一样，都是 121。\n\n所以最终双方协商出的密钥`s`是 121。\n\n注意到这个密钥`s`并没有在网络上传输。而通过网络传输的`p`，`g`，`A`和`B`是无法推算出`s`的，因为实际算法选择的素数是非常大的。\n\n所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。\n\n如果我们把`a`看成甲的私钥，`A`看成甲的公钥，`b`看成乙的私钥，`B`看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥`secretKey`，DH 算法通过数学定律保证了双方各自计算出的`secretKey`是相同的。\n\n### 缺点\n\nDH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。\n\n当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。\n\n至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。\n","slug":"Deffie-Hellman 密钥交换算法","published":1,"updated":"2021-07-19T06:13:07.022Z","title":"Deffie-Hellman 密钥交换算法","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9a0001jqjy34731rjd","content":"<p>Deffie-Hellman 简称 DH 算法。</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。</p>\n<p>但是问题来了，对称加密需要双方提前协商好密钥。</p>\n<p>在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。</p>\n<p>但是密钥在不安全的信道是无法保证安全的。</p>\n<p>所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>DH 算法本质上是使用非对称加密。</p>\n<p>我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：</p>\n<ol>\n<li><p>甲首选选择一个素数<code>p</code>，例如 509，底数<code>g</code>，任选，例如 5，随机数<code>a</code>，例如 123，然后计算<code>A=g^a mod p</code>，结果是 215，然后，甲发送<code>p＝509</code>，<code>g=5</code>，<code>A=215</code>给乙；</p>\n</li>\n<li><p>乙方收到后，也选择一个随机数<code>b</code>，例如，456，然后计算<code>B=g^b mod p</code>，结果是 181，乙再同时计算<code>s=A^b mod p</code>，结果是 121；</p>\n</li>\n<li><p>乙把计算的<code>B=181</code>发给甲，甲计算<code>s＝B^a mod p</code>的余数，计算结果与乙算出的结果一样，都是 121。</p>\n</li>\n</ol>\n<p>所以最终双方协商出的密钥<code>s</code>是 121。</p>\n<p>注意到这个密钥<code>s</code>并没有在网络上传输。而通过网络传输的<code>p</code>，<code>g</code>，<code>A</code>和<code>B</code>是无法推算出<code>s</code>的，因为实际算法选择的素数是非常大的。</p>\n<p>所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。</p>\n<p>如果我们把<code>a</code>看成甲的私钥，<code>A</code>看成甲的公钥，<code>b</code>看成乙的私钥，<code>B</code>看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥<code>secretKey</code>，DH 算法通过数学定律保证了双方各自计算出的<code>secretKey</code>是相同的。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>DH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。</p>\n<p>当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。</p>\n<p>至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Deffie-Hellman 简称 DH 算法。</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。</p>\n<p>但是问题来了，对称加密需要双方提前协商好密钥。</p>\n<p>在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。</p>\n<p>但是密钥在不安全的信道是无法保证安全的。</p>\n<p>所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>DH 算法本质上是使用非对称加密。</p>\n<p>我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：</p>\n<ol>\n<li><p>甲首选选择一个素数<code>p</code>，例如 509，底数<code>g</code>，任选，例如 5，随机数<code>a</code>，例如 123，然后计算<code>A=g^a mod p</code>，结果是 215，然后，甲发送<code>p＝509</code>，<code>g=5</code>，<code>A=215</code>给乙；</p>\n</li>\n<li><p>乙方收到后，也选择一个随机数<code>b</code>，例如，456，然后计算<code>B=g^b mod p</code>，结果是 181，乙再同时计算<code>s=A^b mod p</code>，结果是 121；</p>\n</li>\n<li><p>乙把计算的<code>B=181</code>发给甲，甲计算<code>s＝B^a mod p</code>的余数，计算结果与乙算出的结果一样，都是 121。</p>\n</li>\n</ol>\n<p>所以最终双方协商出的密钥<code>s</code>是 121。</p>\n<p>注意到这个密钥<code>s</code>并没有在网络上传输。而通过网络传输的<code>p</code>，<code>g</code>，<code>A</code>和<code>B</code>是无法推算出<code>s</code>的，因为实际算法选择的素数是非常大的。</p>\n<p>所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。</p>\n<p>如果我们把<code>a</code>看成甲的私钥，<code>A</code>看成甲的公钥，<code>b</code>看成乙的私钥，<code>B</code>看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥<code>secretKey</code>，DH 算法通过数学定律保证了双方各自计算出的<code>secretKey</code>是相同的。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>DH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。</p>\n<p>当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。</p>\n<p>至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。</p>\n"},{"abbrlink":"7784fafc","date":"2021-06-19T16:00:00.000Z","_content":"## 贪心算法\n\n### 分配问题\n\n- [x] 455. Assign Cookies (Easy)\n- [x] 135. Candy (Hard)\n\n### 区间问题\n\n- [ ] 435. Non-overlapping Intervals (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [x] 605. Can Place Flowers (Easy)\n- [ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)\n- [ ] 763. Partition Labels (Medium)\n- [x] 122. Best Time to Buy and Sell Stock II (Easy)\n\n#### 进阶难度\n\n- [ ] 406. Queue Reconstruction by Height (Medium)\n- [ ] 665. Non-decreasing Array (Easy)\n\n## 双指针\n\n### Two Sum\n\n- [x] 167. Two Sum II - Input array is sorted (Easy)\n\n### 归并两个有序数组\n\n- [ ] 88. Merge Sorted Array (Easy)\n\n### 快慢指针\n\n- [ ] 142. Linked List Cycle II (Medium)\n\n### 滑动窗口\n\n- [ ] 76. Minimum Window Substring (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 633. Sum of Square Numbers (Easy)\n- [ ] 680. Valid Palindrome II (Easy)\n- [ ] 524. Longest Word in Dictionary through Deleting (Medium)\n\n#### 进阶难度\n\n- [ ] 340. Longest Substring with At Most K Distinct Characters (Hard)\n\n## 二分查找\n\n### 求开方\n\n- [ ] 69. Sqrt(x) (Easy)\n\n### 查找区间\n\n- [ ] 34. Find First and Last Position of Element in Sorted Array (Medium)\n\n### 旋转数组查找数字\n\n- [ ] 81. Search in Rotated Sorted Array II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 154. Find Minimum in Rotated Sorted Array II (Medium)\n- [ ] 540. Single Element in a Sorted Array (Medium)\n\n#### 进阶难度\n\n- [ ] 4. Median of Two Sorted Arrays (Hard)\n\n## 排序算法\n\n### 常用排序\n\n- [ ] 快速排序(Quicksort)\n- [ ] 归并排序(Merge Sort)\n- [ ] 插入排序(Insertion Sort)\n- [ ] 冒泡排序(Bubble Sort)\n- [ ] 选择排序(Selection Sort)\n\n### 快速选择\n\n- [ ] 215. Kth Largest Element in an Array\n\n### 桶排序\n\n- [ ] 347. Top K Frequent Elements (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 451. Sort Characters By Frequency (Medium)\n\n#### 进阶难度\n\n- [ ] 75. Sort Colors (Medium)\n\n## 搜索算法\n\n### 深度优先\n\n- [ ] 695. Max Area of Island (Easy)\n- [ ] 547. Friend Circles (Medium)\n- [ ] 417. Pacific Atlantic Water Flow (Medium)\n\n### 回溯法\n\n- [ ] 46. Permutations (Medium)\n- [ ] 77. Combinations (Medium)\n- [ ] 79. Word Search (Medium)\n- [ ] 51. N-Queens (Hard)\n\n## 广度优先\n\n- [ ] 934. Shortest Bridge (Medium)\n- [ ] 126. Word Ladder II (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 130. Surrounded Regions (Medium)\n- [ ] 257. Binary Tree Paths (Easy)\n\n#### 进阶难度\n\n- [ ] 47. Permutations II (Medium)\n- [ ] 40. Combination Sum II (Medium)\n- [ ] 37. Sudoku Solver (Hard)\n- [ ] 310. Minimum Height Trees (Medium)\n\n## 动态规划\n\n### 一维动态规划\n\n- [x] 70. Climbing Stairs (Easy)\n- [x] 198. House Robber (Easy)\n- [ ] 413. Arithmetic Slices (Medium)\n\n### 二维动态规划\n\n- [ ] 64. Minimum Path Sum (Medium)\n- [ ] 542. 01 Matrix (Medium)\n- [ ] 221. Maximal Square (Medium)\n\n### 分割类型\n\n- [ ] 279. Perfect Squares (Medium)\n- [ ] 91. Decode Ways (Medium)\n- [ ] 139. Word Break (Medium)\n\n### 子序列\n\n- [ ] 300. Longest Increasing Subsequence (Medium)\n- [ ] 1143. Longest Commom Subsequence (Medium)\n\n### 背包\n\n- [ ] 416. Partition Equal Subset Sum (Medium)\n- [ ] 474. Ones and Zeroes (Medium)\n- [ ] 322. Coin Change (Medium)\n\n### 字符串编辑\n\n- [ ] 72. Edit Distance (Hard)\n- [ ] 650. 2 Keys Keyboard (Medium)\n- [ ] 10. Regular Expression Matching (Hard)\n\n### 股票交易\n\n- [x] 121. Best Time to Buy and Sell Stock (Easy)\n- [ ] 188. Best Time to Buy and Sell Stock IV (Hard)\n- [ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 213. House Robber II (Medium)\n- [x] 53. Maximum Subarray (Easy)\n- [ ] 343. Integer Break (Medium)\n- [ ] 583. Delete Operation for Two Strings (Medium)\n\n#### 进阶难度\n\n- [ ] 646. Maximum Length of Pair Chain (Medium)\n- [ ] 376. Wiggle Subsequence (Medium)\n- [ ] 494. Target Sum (Medium)\n- [ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)\n\n## 分治法\n\n### 表达式问题\n\n- [ ] 241. Different Ways to Add Parentheses (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 932. Beautiful Array (Medium)\n\n#### 进阶难度\n\n- [ ] 312. Burst Balloons (Hard)\n\n## 数学问题\n\n### 公倍数和公因数\n\n- [ ] 辗转相除法\n\n### 质数\n\n- [ ] 204. Count Primes (Easy)\n\n### 数字处理\n\n- [ ] 504. Base 7 (Easy)\n- [ ] 172. Factorial Trailing Zeroes\n- [ ] 415. Add Strings (Easy)\n- [ ] 326. Power of Three (Easy)\n\n### 随机与取样\n\n- [ ] 384. Shuffle an Array (Medium)\n- [ ] 528. Random Pick with Weight (Medium)\n- [ ] 382. Linked List Random Node (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 168. Excel Sheet Column Title (Easy)\n- [ ] 67. Add Binary (Easy)\n- [ ] 238. Product of Array Except Self (Medium)\n\n#### 进阶难度\n\n- [ ] 462. Minimum Moves to Equal Array Elements II (Medium)\n- [ ] 169. Majority Element (Easy)\n- [ ] 470. Implement Rand10() Using Rand7() (Medium)\n- [ ] 202. Happy Number (Easy)\n\n## 位运算\n\n### 位运算基础问题\n\n- [ ] 461. Hamming Distance (Easy)\n- [ ] 190. Reverse Bits (Easy)\n- [ ] 136. Single Number (Easy)\n\n### 二进制特性\n\n- [ ] 342. Power of Four (Easy)\n- [ ] 318. Maximum Product of Word Lengths (Medium)\n- [ ] 338. Counting Bits (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 268. Missing Number (Easy)\n- [ ] 693. Binary Number with Alternating Bits (Easy)\n- [ ] 476. Number Complement (Easy)\n\n#### 进阶难度\n\n- [ ] 260. Single Number III (Medium)\n\n## 数据结构\n\n### 数组\n\n- [x] 448. Find All Numbers Disappeared in an Array (Easy)\n- [ ] 48. Rotate Image (Medium)\n- [ ] 240. Search a 2D Matrix II (Medium)\n- [ ] 769. Max Chunks To Make Sorted (Medium)\n\n### 栈和队列\n\n- [ ] 232. Implement Queue using Stacks (Easy)\n- [ ] 155. Min Stack (Easy)\n- [ ] 20. Valid Parentheses (Easy)\n\n### 单调栈\n\n- [ ] 739. Daily Temperatures (Medium)\n\n### 优先队列\n\n- [ ] 23. Merge k Sorted Lists (Hard)\n- [ ] 218. The Skyline Problem (Hard)\n\n### 双端队列\n\n- [ ] 239. Sliding Window Maximum (Hard)\n\n### 哈希表\n\n- [ ] 1. Two Sum (Easy)\n- [ ] 128. Longest Consecutive Sequence (Hard)\n- [ ] 149. Max Points on a Line (Hard)\n\n### 多重集合和映射\n\n- [ ] 332. Reconstruct Itinerary (Medium)\n\n### 前缀和和积分图\n\n- [ ] 303. Range Sum Query - Immutable (Easy)\n- [ ] 304. Range Sum Query 2D - Immutable (Medium)\n- [ ] 560. Subarray Sum Equals K (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 566. Reshape the Matrix (Easy)\n- [ ] 225. Implement Stack using Queues (Easy)\n- [ ] 503. Next Greater Element II (Medium)\n- [ ] 217. Contains Duplicate (Easy)\n- [ ] 697. Degree of an Array (Easy)\n- [ ] 594. Longest Harmonious Subsequence (Easy)\n\n#### 进阶难度\n\n- [ ] 287. Find the Duplicate Number (Medium)\n- [ ] 313. Super Ugly Number (Medium)\n- [ ] 870. Advantage Shuffle (Medium)\n- [ ] 307. Range Sum Query - Mutable (Medium)\n\n## 字符串\n\n### 字符串比较\n\n- [x] 242. Valid Anagram (Easy)\n- [x] 205. Isomorphic Strings (Easy)\n- [ ] 647. Palindromic Substrings (Medium)\n- [ ] 696. Count Binary Substrings (Easy)\n\n### 字符串理解\n\n- [ ] 227. Basic Calculator II (Medium)\n\n### 字符串匹配\n\n- [ ] 28. Implement strStr() (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [x] 409. Longest Palindrome (Easy)\n- [ ] 3. Longest Substring Without Repeating Characters (Medium)\n\n#### 进阶难度\n\n- [ ] 772. Basic Calculator III (Hard)\n- [ ] 5. Longest Palindromic Substring (Medium)\n\n## 链表\n\n### 链表基本操作\n\n- [ ] 206. Reverse Linked List (Easy)\n- [ ] 21. Merge Two Sorted Lists (Easy)\n- [ ] 24. Swap Nodes in Pairs (Medium)\n\n### 其他链表技巧\n\n- [ ] 160. Intersection of Two Linked Lists (Easy)\n- [ ] 234. Palindrome Linked List (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 83. Remove Duplicates from Sorted List (Easy)\n- [ ] 328. Odd Even Linked List (Medium)\n- [ ] 19. Remove Nth Node From End of List (Medium)\n\n#### 进阶难度\n\n- [ ] 148. Sort List (Medium)\n\n## 树\n\n### 树的递归\n\n- [ ] 104. Maximum Depth of Binary Tree (Easy)\n- [ ] 110. Balanced Binary Tree (Easy)\n- [ ] 543. Diameter of Binary Tree (Easy)\n- [ ] 437. Path Sum III (Easy)\n- [ ] 101. Symmetric Tree (Easy)\n- [ ] 1110. Delete Nodes And Return Forest (Medium)\n\n### 层次遍历\n\n- [ ] 637. Average of Levels in Binary Tree (Easy)\n\n### 前中后序遍历\n\n- [ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)\n- [ ] 144. Binary Tree Preorder Traversal (Medium)\n\n### 二叉搜索树\n\n- [ ] 99. Recover Binary Search Tree (Hard)\n- [ ] 669. Trim a Binary Search Tree (Easy)\n\n### 字典树\n\n- [ ] 208. Implement Trie (Prefix Tree) (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 226. Invert Binary Tree (Easy)\n- [ ] 617. Merge Two Binary Trees (Easy)\n- [ ] 572. Subtree of Another Tree (Easy)\n- [ ] 404. Sum of Left Leaves (Easy)\n- [ ] 513. Find Bottom Left Tree Value (Easy)\n- [ ] 538. Convert BST to Greater Tree (Easy)\n- [ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)\n- [ ] 530. Minimum Absolute Difference in BST (Easy)\n\n#### 进阶难度\n\n- [ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)\n- [ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)\n- [ ] 94. Binary Tree Inorder Traversal (Medium)\n- [ ] 145. Binary Tree Postorder Traversal (Medium)\n- [ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)\n- [ ] 109. Convert Sorted List to Binary Search Tree (Medium)\n- [ ] 897. Increasing Order Search Tree (Easy)\n- [ ] 653. Two Sum IV - Input is a BST (Easy)\n- [ ] 450. Delete Node in a BST (Medium)\n\n## 图\n\n### 二分图\n\n- [ ] 785. Is Graph Bipartite? (Medium)\n\n### 拓扑排序\n\n- [ ] 210. Course Schedule II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1059. All Paths from Source Lead to Destination (Medium)\n\n#### 进阶难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 882. Reachable Nodes In Subdivided Graph (Hard)\n\n## 高阶数据结构\n\n### 并查集\n\n- [ ] 684. Redundant Connection (Medium)\n\n### 复合数据结构\n\n- [ ] 146. LRU Cache (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 380. Insert Delete GetRandom O(1) (Medium)\n\n#### 进阶难度\n\n- [ ] 432. All O‘one Data Structure (Hard)\n- [ ] 716. Max Stack (Easy)\n","source":"_posts/LeetCode刷题题库.md","raw":"---\nabbrlink: 7784fafc\ndate: 2021-06-20\n---\n## 贪心算法\n\n### 分配问题\n\n- [x] 455. Assign Cookies (Easy)\n- [x] 135. Candy (Hard)\n\n### 区间问题\n\n- [ ] 435. Non-overlapping Intervals (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [x] 605. Can Place Flowers (Easy)\n- [ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)\n- [ ] 763. Partition Labels (Medium)\n- [x] 122. Best Time to Buy and Sell Stock II (Easy)\n\n#### 进阶难度\n\n- [ ] 406. Queue Reconstruction by Height (Medium)\n- [ ] 665. Non-decreasing Array (Easy)\n\n## 双指针\n\n### Two Sum\n\n- [x] 167. Two Sum II - Input array is sorted (Easy)\n\n### 归并两个有序数组\n\n- [ ] 88. Merge Sorted Array (Easy)\n\n### 快慢指针\n\n- [ ] 142. Linked List Cycle II (Medium)\n\n### 滑动窗口\n\n- [ ] 76. Minimum Window Substring (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 633. Sum of Square Numbers (Easy)\n- [ ] 680. Valid Palindrome II (Easy)\n- [ ] 524. Longest Word in Dictionary through Deleting (Medium)\n\n#### 进阶难度\n\n- [ ] 340. Longest Substring with At Most K Distinct Characters (Hard)\n\n## 二分查找\n\n### 求开方\n\n- [ ] 69. Sqrt(x) (Easy)\n\n### 查找区间\n\n- [ ] 34. Find First and Last Position of Element in Sorted Array (Medium)\n\n### 旋转数组查找数字\n\n- [ ] 81. Search in Rotated Sorted Array II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 154. Find Minimum in Rotated Sorted Array II (Medium)\n- [ ] 540. Single Element in a Sorted Array (Medium)\n\n#### 进阶难度\n\n- [ ] 4. Median of Two Sorted Arrays (Hard)\n\n## 排序算法\n\n### 常用排序\n\n- [ ] 快速排序(Quicksort)\n- [ ] 归并排序(Merge Sort)\n- [ ] 插入排序(Insertion Sort)\n- [ ] 冒泡排序(Bubble Sort)\n- [ ] 选择排序(Selection Sort)\n\n### 快速选择\n\n- [ ] 215. Kth Largest Element in an Array\n\n### 桶排序\n\n- [ ] 347. Top K Frequent Elements (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 451. Sort Characters By Frequency (Medium)\n\n#### 进阶难度\n\n- [ ] 75. Sort Colors (Medium)\n\n## 搜索算法\n\n### 深度优先\n\n- [ ] 695. Max Area of Island (Easy)\n- [ ] 547. Friend Circles (Medium)\n- [ ] 417. Pacific Atlantic Water Flow (Medium)\n\n### 回溯法\n\n- [ ] 46. Permutations (Medium)\n- [ ] 77. Combinations (Medium)\n- [ ] 79. Word Search (Medium)\n- [ ] 51. N-Queens (Hard)\n\n## 广度优先\n\n- [ ] 934. Shortest Bridge (Medium)\n- [ ] 126. Word Ladder II (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 130. Surrounded Regions (Medium)\n- [ ] 257. Binary Tree Paths (Easy)\n\n#### 进阶难度\n\n- [ ] 47. Permutations II (Medium)\n- [ ] 40. Combination Sum II (Medium)\n- [ ] 37. Sudoku Solver (Hard)\n- [ ] 310. Minimum Height Trees (Medium)\n\n## 动态规划\n\n### 一维动态规划\n\n- [x] 70. Climbing Stairs (Easy)\n- [x] 198. House Robber (Easy)\n- [ ] 413. Arithmetic Slices (Medium)\n\n### 二维动态规划\n\n- [ ] 64. Minimum Path Sum (Medium)\n- [ ] 542. 01 Matrix (Medium)\n- [ ] 221. Maximal Square (Medium)\n\n### 分割类型\n\n- [ ] 279. Perfect Squares (Medium)\n- [ ] 91. Decode Ways (Medium)\n- [ ] 139. Word Break (Medium)\n\n### 子序列\n\n- [ ] 300. Longest Increasing Subsequence (Medium)\n- [ ] 1143. Longest Commom Subsequence (Medium)\n\n### 背包\n\n- [ ] 416. Partition Equal Subset Sum (Medium)\n- [ ] 474. Ones and Zeroes (Medium)\n- [ ] 322. Coin Change (Medium)\n\n### 字符串编辑\n\n- [ ] 72. Edit Distance (Hard)\n- [ ] 650. 2 Keys Keyboard (Medium)\n- [ ] 10. Regular Expression Matching (Hard)\n\n### 股票交易\n\n- [x] 121. Best Time to Buy and Sell Stock (Easy)\n- [ ] 188. Best Time to Buy and Sell Stock IV (Hard)\n- [ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 213. House Robber II (Medium)\n- [x] 53. Maximum Subarray (Easy)\n- [ ] 343. Integer Break (Medium)\n- [ ] 583. Delete Operation for Two Strings (Medium)\n\n#### 进阶难度\n\n- [ ] 646. Maximum Length of Pair Chain (Medium)\n- [ ] 376. Wiggle Subsequence (Medium)\n- [ ] 494. Target Sum (Medium)\n- [ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)\n\n## 分治法\n\n### 表达式问题\n\n- [ ] 241. Different Ways to Add Parentheses (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 932. Beautiful Array (Medium)\n\n#### 进阶难度\n\n- [ ] 312. Burst Balloons (Hard)\n\n## 数学问题\n\n### 公倍数和公因数\n\n- [ ] 辗转相除法\n\n### 质数\n\n- [ ] 204. Count Primes (Easy)\n\n### 数字处理\n\n- [ ] 504. Base 7 (Easy)\n- [ ] 172. Factorial Trailing Zeroes\n- [ ] 415. Add Strings (Easy)\n- [ ] 326. Power of Three (Easy)\n\n### 随机与取样\n\n- [ ] 384. Shuffle an Array (Medium)\n- [ ] 528. Random Pick with Weight (Medium)\n- [ ] 382. Linked List Random Node (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 168. Excel Sheet Column Title (Easy)\n- [ ] 67. Add Binary (Easy)\n- [ ] 238. Product of Array Except Self (Medium)\n\n#### 进阶难度\n\n- [ ] 462. Minimum Moves to Equal Array Elements II (Medium)\n- [ ] 169. Majority Element (Easy)\n- [ ] 470. Implement Rand10() Using Rand7() (Medium)\n- [ ] 202. Happy Number (Easy)\n\n## 位运算\n\n### 位运算基础问题\n\n- [ ] 461. Hamming Distance (Easy)\n- [ ] 190. Reverse Bits (Easy)\n- [ ] 136. Single Number (Easy)\n\n### 二进制特性\n\n- [ ] 342. Power of Four (Easy)\n- [ ] 318. Maximum Product of Word Lengths (Medium)\n- [ ] 338. Counting Bits (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 268. Missing Number (Easy)\n- [ ] 693. Binary Number with Alternating Bits (Easy)\n- [ ] 476. Number Complement (Easy)\n\n#### 进阶难度\n\n- [ ] 260. Single Number III (Medium)\n\n## 数据结构\n\n### 数组\n\n- [x] 448. Find All Numbers Disappeared in an Array (Easy)\n- [ ] 48. Rotate Image (Medium)\n- [ ] 240. Search a 2D Matrix II (Medium)\n- [ ] 769. Max Chunks To Make Sorted (Medium)\n\n### 栈和队列\n\n- [ ] 232. Implement Queue using Stacks (Easy)\n- [ ] 155. Min Stack (Easy)\n- [ ] 20. Valid Parentheses (Easy)\n\n### 单调栈\n\n- [ ] 739. Daily Temperatures (Medium)\n\n### 优先队列\n\n- [ ] 23. Merge k Sorted Lists (Hard)\n- [ ] 218. The Skyline Problem (Hard)\n\n### 双端队列\n\n- [ ] 239. Sliding Window Maximum (Hard)\n\n### 哈希表\n\n- [ ] 1. Two Sum (Easy)\n- [ ] 128. Longest Consecutive Sequence (Hard)\n- [ ] 149. Max Points on a Line (Hard)\n\n### 多重集合和映射\n\n- [ ] 332. Reconstruct Itinerary (Medium)\n\n### 前缀和和积分图\n\n- [ ] 303. Range Sum Query - Immutable (Easy)\n- [ ] 304. Range Sum Query 2D - Immutable (Medium)\n- [ ] 560. Subarray Sum Equals K (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 566. Reshape the Matrix (Easy)\n- [ ] 225. Implement Stack using Queues (Easy)\n- [ ] 503. Next Greater Element II (Medium)\n- [ ] 217. Contains Duplicate (Easy)\n- [ ] 697. Degree of an Array (Easy)\n- [ ] 594. Longest Harmonious Subsequence (Easy)\n\n#### 进阶难度\n\n- [ ] 287. Find the Duplicate Number (Medium)\n- [ ] 313. Super Ugly Number (Medium)\n- [ ] 870. Advantage Shuffle (Medium)\n- [ ] 307. Range Sum Query - Mutable (Medium)\n\n## 字符串\n\n### 字符串比较\n\n- [x] 242. Valid Anagram (Easy)\n- [x] 205. Isomorphic Strings (Easy)\n- [ ] 647. Palindromic Substrings (Medium)\n- [ ] 696. Count Binary Substrings (Easy)\n\n### 字符串理解\n\n- [ ] 227. Basic Calculator II (Medium)\n\n### 字符串匹配\n\n- [ ] 28. Implement strStr() (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [x] 409. Longest Palindrome (Easy)\n- [ ] 3. Longest Substring Without Repeating Characters (Medium)\n\n#### 进阶难度\n\n- [ ] 772. Basic Calculator III (Hard)\n- [ ] 5. Longest Palindromic Substring (Medium)\n\n## 链表\n\n### 链表基本操作\n\n- [ ] 206. Reverse Linked List (Easy)\n- [ ] 21. Merge Two Sorted Lists (Easy)\n- [ ] 24. Swap Nodes in Pairs (Medium)\n\n### 其他链表技巧\n\n- [ ] 160. Intersection of Two Linked Lists (Easy)\n- [ ] 234. Palindrome Linked List (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 83. Remove Duplicates from Sorted List (Easy)\n- [ ] 328. Odd Even Linked List (Medium)\n- [ ] 19. Remove Nth Node From End of List (Medium)\n\n#### 进阶难度\n\n- [ ] 148. Sort List (Medium)\n\n## 树\n\n### 树的递归\n\n- [ ] 104. Maximum Depth of Binary Tree (Easy)\n- [ ] 110. Balanced Binary Tree (Easy)\n- [ ] 543. Diameter of Binary Tree (Easy)\n- [ ] 437. Path Sum III (Easy)\n- [ ] 101. Symmetric Tree (Easy)\n- [ ] 1110. Delete Nodes And Return Forest (Medium)\n\n### 层次遍历\n\n- [ ] 637. Average of Levels in Binary Tree (Easy)\n\n### 前中后序遍历\n\n- [ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)\n- [ ] 144. Binary Tree Preorder Traversal (Medium)\n\n### 二叉搜索树\n\n- [ ] 99. Recover Binary Search Tree (Hard)\n- [ ] 669. Trim a Binary Search Tree (Easy)\n\n### 字典树\n\n- [ ] 208. Implement Trie (Prefix Tree) (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 226. Invert Binary Tree (Easy)\n- [ ] 617. Merge Two Binary Trees (Easy)\n- [ ] 572. Subtree of Another Tree (Easy)\n- [ ] 404. Sum of Left Leaves (Easy)\n- [ ] 513. Find Bottom Left Tree Value (Easy)\n- [ ] 538. Convert BST to Greater Tree (Easy)\n- [ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)\n- [ ] 530. Minimum Absolute Difference in BST (Easy)\n\n#### 进阶难度\n\n- [ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)\n- [ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)\n- [ ] 94. Binary Tree Inorder Traversal (Medium)\n- [ ] 145. Binary Tree Postorder Traversal (Medium)\n- [ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)\n- [ ] 109. Convert Sorted List to Binary Search Tree (Medium)\n- [ ] 897. Increasing Order Search Tree (Easy)\n- [ ] 653. Two Sum IV - Input is a BST (Easy)\n- [ ] 450. Delete Node in a BST (Medium)\n\n## 图\n\n### 二分图\n\n- [ ] 785. Is Graph Bipartite? (Medium)\n\n### 拓扑排序\n\n- [ ] 210. Course Schedule II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1059. All Paths from Source Lead to Destination (Medium)\n\n#### 进阶难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 882. Reachable Nodes In Subdivided Graph (Hard)\n\n## 高阶数据结构\n\n### 并查集\n\n- [ ] 684. Redundant Connection (Medium)\n\n### 复合数据结构\n\n- [ ] 146. LRU Cache (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 380. Insert Delete GetRandom O(1) (Medium)\n\n#### 进阶难度\n\n- [ ] 432. All O‘one Data Structure (Hard)\n- [ ] 716. Max Stack (Easy)\n","slug":"LeetCode刷题题库","published":1,"updated":"2021-07-19T06:13:07.022Z","title":"LeetCode刷题题库","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9c0003jqjydl6j6xfs","content":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><h3 id=\"分配问题\"><a href=\"#分配问题\" class=\"headerlink\" title=\"分配问题\"></a>分配问题</h3><ul>\n<li>[x] 455. Assign Cookies (Easy)</li>\n<li>[x] 135. Candy (Hard)</li>\n</ul>\n<h3 id=\"区间问题\"><a href=\"#区间问题\" class=\"headerlink\" title=\"区间问题\"></a>区间问题</h3><ul>\n<li>[ ] 435. Non-overlapping Intervals (Medium)</li>\n</ul>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度\"><a href=\"#基础难度\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 605. Can Place Flowers (Easy)</li>\n<li>[ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)</li>\n<li>[ ] 763. Partition Labels (Medium)</li>\n<li>[x] 122. Best Time to Buy and Sell Stock II (Easy)</li>\n</ul>\n<h4 id=\"进阶难度\"><a href=\"#进阶难度\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 406. Queue Reconstruction by Height (Medium)</li>\n<li>[ ] 665. Non-decreasing Array (Easy)</li>\n</ul>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><ul>\n<li>[x] 167. Two Sum II - Input array is sorted (Easy)</li>\n</ul>\n<h3 id=\"归并两个有序数组\"><a href=\"#归并两个有序数组\" class=\"headerlink\" title=\"归并两个有序数组\"></a>归并两个有序数组</h3><ul>\n<li>[ ] 88. Merge Sorted Array (Easy)</li>\n</ul>\n<h3 id=\"快慢指针\"><a href=\"#快慢指针\" class=\"headerlink\" title=\"快慢指针\"></a>快慢指针</h3><ul>\n<li>[ ] 142. Linked List Cycle II (Medium)</li>\n</ul>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><ul>\n<li>[ ] 76. Minimum Window Substring (Hard)</li>\n</ul>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-1\"><a href=\"#基础难度-1\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 633. Sum of Square Numbers (Easy)</li>\n<li>[ ] 680. Valid Palindrome II (Easy)</li>\n<li>[ ] 524. Longest Word in Dictionary through Deleting (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-1\"><a href=\"#进阶难度-1\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 340. Longest Substring with At Most K Distinct Characters (Hard)</li>\n</ul>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><h3 id=\"求开方\"><a href=\"#求开方\" class=\"headerlink\" title=\"求开方\"></a>求开方</h3><ul>\n<li>[ ] 69. Sqrt(x) (Easy)</li>\n</ul>\n<h3 id=\"查找区间\"><a href=\"#查找区间\" class=\"headerlink\" title=\"查找区间\"></a>查找区间</h3><ul>\n<li>[ ] 34. Find First and Last Position of Element in Sorted Array (Medium)</li>\n</ul>\n<h3 id=\"旋转数组查找数字\"><a href=\"#旋转数组查找数字\" class=\"headerlink\" title=\"旋转数组查找数字\"></a>旋转数组查找数字</h3><ul>\n<li>[ ] 81. Search in Rotated Sorted Array II (Medium)</li>\n</ul>\n<h3 id=\"练习-2\"><a href=\"#练习-2\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-2\"><a href=\"#基础难度-2\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 154. Find Minimum in Rotated Sorted Array II (Medium)</li>\n<li>[ ] 540. Single Element in a Sorted Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-2\"><a href=\"#进阶难度-2\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 4. Median of Two Sorted Arrays (Hard)</li>\n</ul>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"常用排序\"><a href=\"#常用排序\" class=\"headerlink\" title=\"常用排序\"></a>常用排序</h3><ul>\n<li>[ ] 快速排序(Quicksort)</li>\n<li>[ ] 归并排序(Merge Sort)</li>\n<li>[ ] 插入排序(Insertion Sort)</li>\n<li>[ ] 冒泡排序(Bubble Sort)</li>\n<li>[ ] 选择排序(Selection Sort)</li>\n</ul>\n<h3 id=\"快速选择\"><a href=\"#快速选择\" class=\"headerlink\" title=\"快速选择\"></a>快速选择</h3><ul>\n<li>[ ] 215. Kth Largest Element in an Array</li>\n</ul>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><ul>\n<li>[ ] 347. Top K Frequent Elements (Medium)</li>\n</ul>\n<h3 id=\"练习-3\"><a href=\"#练习-3\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-3\"><a href=\"#基础难度-3\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 451. Sort Characters By Frequency (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-3\"><a href=\"#进阶难度-3\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 75. Sort Colors (Medium)</li>\n</ul>\n<h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h3 id=\"深度优先\"><a href=\"#深度优先\" class=\"headerlink\" title=\"深度优先\"></a>深度优先</h3><ul>\n<li>[ ] 695. Max Area of Island (Easy)</li>\n<li>[ ] 547. Friend Circles (Medium)</li>\n<li>[ ] 417. Pacific Atlantic Water Flow (Medium)</li>\n</ul>\n<h3 id=\"回溯法\"><a href=\"#回溯法\" class=\"headerlink\" title=\"回溯法\"></a>回溯法</h3><ul>\n<li>[ ] 46. Permutations (Medium)</li>\n<li>[ ] 77. Combinations (Medium)</li>\n<li>[ ] 79. Word Search (Medium)</li>\n<li>[ ] 51. N-Queens (Hard)</li>\n</ul>\n<h2 id=\"广度优先\"><a href=\"#广度优先\" class=\"headerlink\" title=\"广度优先\"></a>广度优先</h2><ul>\n<li>[ ] 934. Shortest Bridge (Medium)</li>\n<li>[ ] 126. Word Ladder II (Hard)</li>\n</ul>\n<h3 id=\"练习-4\"><a href=\"#练习-4\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-4\"><a href=\"#基础难度-4\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 130. Surrounded Regions (Medium)</li>\n<li>[ ] 257. Binary Tree Paths (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-4\"><a href=\"#进阶难度-4\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 47. Permutations II (Medium)</li>\n<li>[ ] 40. Combination Sum II (Medium)</li>\n<li>[ ] 37. Sudoku Solver (Hard)</li>\n<li>[ ] 310. Minimum Height Trees (Medium)</li>\n</ul>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><h3 id=\"一维动态规划\"><a href=\"#一维动态规划\" class=\"headerlink\" title=\"一维动态规划\"></a>一维动态规划</h3><ul>\n<li>[x] 70. Climbing Stairs (Easy)</li>\n<li>[x] 198. House Robber (Easy)</li>\n<li>[ ] 413. Arithmetic Slices (Medium)</li>\n</ul>\n<h3 id=\"二维动态规划\"><a href=\"#二维动态规划\" class=\"headerlink\" title=\"二维动态规划\"></a>二维动态规划</h3><ul>\n<li>[ ] 64. Minimum Path Sum (Medium)</li>\n<li>[ ] 542. 01 Matrix (Medium)</li>\n<li>[ ] 221. Maximal Square (Medium)</li>\n</ul>\n<h3 id=\"分割类型\"><a href=\"#分割类型\" class=\"headerlink\" title=\"分割类型\"></a>分割类型</h3><ul>\n<li>[ ] 279. Perfect Squares (Medium)</li>\n<li>[ ] 91. Decode Ways (Medium)</li>\n<li>[ ] 139. Word Break (Medium)</li>\n</ul>\n<h3 id=\"子序列\"><a href=\"#子序列\" class=\"headerlink\" title=\"子序列\"></a>子序列</h3><ul>\n<li>[ ] 300. Longest Increasing Subsequence (Medium)</li>\n<li>[ ] 1143. Longest Commom Subsequence (Medium)</li>\n</ul>\n<h3 id=\"背包\"><a href=\"#背包\" class=\"headerlink\" title=\"背包\"></a>背包</h3><ul>\n<li>[ ] 416. Partition Equal Subset Sum (Medium)</li>\n<li>[ ] 474. Ones and Zeroes (Medium)</li>\n<li>[ ] 322. Coin Change (Medium)</li>\n</ul>\n<h3 id=\"字符串编辑\"><a href=\"#字符串编辑\" class=\"headerlink\" title=\"字符串编辑\"></a>字符串编辑</h3><ul>\n<li>[ ] 72. Edit Distance (Hard)</li>\n<li>[ ] 650. 2 Keys Keyboard (Medium)</li>\n<li>[ ] 10. Regular Expression Matching (Hard)</li>\n</ul>\n<h3 id=\"股票交易\"><a href=\"#股票交易\" class=\"headerlink\" title=\"股票交易\"></a>股票交易</h3><ul>\n<li>[x] 121. Best Time to Buy and Sell Stock (Easy)</li>\n<li>[ ] 188. Best Time to Buy and Sell Stock IV (Hard)</li>\n<li>[ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)</li>\n</ul>\n<h3 id=\"练习-5\"><a href=\"#练习-5\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-5\"><a href=\"#基础难度-5\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 213. House Robber II (Medium)</li>\n<li>[x] 53. Maximum Subarray (Easy)</li>\n<li>[ ] 343. Integer Break (Medium)</li>\n<li>[ ] 583. Delete Operation for Two Strings (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-5\"><a href=\"#进阶难度-5\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 646. Maximum Length of Pair Chain (Medium)</li>\n<li>[ ] 376. Wiggle Subsequence (Medium)</li>\n<li>[ ] 494. Target Sum (Medium)</li>\n<li>[ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)</li>\n</ul>\n<h2 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h2><h3 id=\"表达式问题\"><a href=\"#表达式问题\" class=\"headerlink\" title=\"表达式问题\"></a>表达式问题</h3><ul>\n<li>[ ] 241. Different Ways to Add Parentheses (Medium)</li>\n</ul>\n<h3 id=\"练习-6\"><a href=\"#练习-6\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-6\"><a href=\"#基础难度-6\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 932. Beautiful Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-6\"><a href=\"#进阶难度-6\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 312. Burst Balloons (Hard)</li>\n</ul>\n<h2 id=\"数学问题\"><a href=\"#数学问题\" class=\"headerlink\" title=\"数学问题\"></a>数学问题</h2><h3 id=\"公倍数和公因数\"><a href=\"#公倍数和公因数\" class=\"headerlink\" title=\"公倍数和公因数\"></a>公倍数和公因数</h3><ul>\n<li>[ ] 辗转相除法</li>\n</ul>\n<h3 id=\"质数\"><a href=\"#质数\" class=\"headerlink\" title=\"质数\"></a>质数</h3><ul>\n<li>[ ] 204. Count Primes (Easy)</li>\n</ul>\n<h3 id=\"数字处理\"><a href=\"#数字处理\" class=\"headerlink\" title=\"数字处理\"></a>数字处理</h3><ul>\n<li>[ ] 504. Base 7 (Easy)</li>\n<li>[ ] 172. Factorial Trailing Zeroes</li>\n<li>[ ] 415. Add Strings (Easy)</li>\n<li>[ ] 326. Power of Three (Easy)</li>\n</ul>\n<h3 id=\"随机与取样\"><a href=\"#随机与取样\" class=\"headerlink\" title=\"随机与取样\"></a>随机与取样</h3><ul>\n<li>[ ] 384. Shuffle an Array (Medium)</li>\n<li>[ ] 528. Random Pick with Weight (Medium)</li>\n<li>[ ] 382. Linked List Random Node (Medium)</li>\n</ul>\n<h3 id=\"练习-7\"><a href=\"#练习-7\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-7\"><a href=\"#基础难度-7\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 168. Excel Sheet Column Title (Easy)</li>\n<li>[ ] 67. Add Binary (Easy)</li>\n<li>[ ] 238. Product of Array Except Self (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-7\"><a href=\"#进阶难度-7\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 462. Minimum Moves to Equal Array Elements II (Medium)</li>\n<li>[ ] 169. Majority Element (Easy)</li>\n<li>[ ] 470. Implement Rand10() Using Rand7() (Medium)</li>\n<li>[ ] 202. Happy Number (Easy)</li>\n</ul>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"位运算基础问题\"><a href=\"#位运算基础问题\" class=\"headerlink\" title=\"位运算基础问题\"></a>位运算基础问题</h3><ul>\n<li>[ ] 461. Hamming Distance (Easy)</li>\n<li>[ ] 190. Reverse Bits (Easy)</li>\n<li>[ ] 136. Single Number (Easy)</li>\n</ul>\n<h3 id=\"二进制特性\"><a href=\"#二进制特性\" class=\"headerlink\" title=\"二进制特性\"></a>二进制特性</h3><ul>\n<li>[ ] 342. Power of Four (Easy)</li>\n<li>[ ] 318. Maximum Product of Word Lengths (Medium)</li>\n<li>[ ] 338. Counting Bits (Medium)</li>\n</ul>\n<h3 id=\"练习-8\"><a href=\"#练习-8\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-8\"><a href=\"#基础难度-8\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 268. Missing Number (Easy)</li>\n<li>[ ] 693. Binary Number with Alternating Bits (Easy)</li>\n<li>[ ] 476. Number Complement (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-8\"><a href=\"#进阶难度-8\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 260. Single Number III (Medium)</li>\n</ul>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>[x] 448. Find All Numbers Disappeared in an Array (Easy)</li>\n<li>[ ] 48. Rotate Image (Medium)</li>\n<li>[ ] 240. Search a 2D Matrix II (Medium)</li>\n<li>[ ] 769. Max Chunks To Make Sorted (Medium)</li>\n</ul>\n<h3 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h3><ul>\n<li>[ ] 232. Implement Queue using Stacks (Easy)</li>\n<li>[ ] 155. Min Stack (Easy)</li>\n<li>[ ] 20. Valid Parentheses (Easy)</li>\n</ul>\n<h3 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3><ul>\n<li>[ ] 739. Daily Temperatures (Medium)</li>\n</ul>\n<h3 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h3><ul>\n<li>[ ] 23. Merge k Sorted Lists (Hard)</li>\n<li>[ ] 218. The Skyline Problem (Hard)</li>\n</ul>\n<h3 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h3><ul>\n<li>[ ] 239. Sliding Window Maximum (Hard)</li>\n</ul>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><ul>\n<li>[ ] 1. Two Sum (Easy)</li>\n<li>[ ] 128. Longest Consecutive Sequence (Hard)</li>\n<li>[ ] 149. Max Points on a Line (Hard)</li>\n</ul>\n<h3 id=\"多重集合和映射\"><a href=\"#多重集合和映射\" class=\"headerlink\" title=\"多重集合和映射\"></a>多重集合和映射</h3><ul>\n<li>[ ] 332. Reconstruct Itinerary (Medium)</li>\n</ul>\n<h3 id=\"前缀和和积分图\"><a href=\"#前缀和和积分图\" class=\"headerlink\" title=\"前缀和和积分图\"></a>前缀和和积分图</h3><ul>\n<li>[ ] 303. Range Sum Query - Immutable (Easy)</li>\n<li>[ ] 304. Range Sum Query 2D - Immutable (Medium)</li>\n<li>[ ] 560. Subarray Sum Equals K (Medium)</li>\n</ul>\n<h3 id=\"练习-9\"><a href=\"#练习-9\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-9\"><a href=\"#基础难度-9\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 566. Reshape the Matrix (Easy)</li>\n<li>[ ] 225. Implement Stack using Queues (Easy)</li>\n<li>[ ] 503. Next Greater Element II (Medium)</li>\n<li>[ ] 217. Contains Duplicate (Easy)</li>\n<li>[ ] 697. Degree of an Array (Easy)</li>\n<li>[ ] 594. Longest Harmonious Subsequence (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-9\"><a href=\"#进阶难度-9\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 287. Find the Duplicate Number (Medium)</li>\n<li>[ ] 313. Super Ugly Number (Medium)</li>\n<li>[ ] 870. Advantage Shuffle (Medium)</li>\n<li>[ ] 307. Range Sum Query - Mutable (Medium)</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h3><ul>\n<li>[x] 242. Valid Anagram (Easy)</li>\n<li>[x] 205. Isomorphic Strings (Easy)</li>\n<li>[ ] 647. Palindromic Substrings (Medium)</li>\n<li>[ ] 696. Count Binary Substrings (Easy)</li>\n</ul>\n<h3 id=\"字符串理解\"><a href=\"#字符串理解\" class=\"headerlink\" title=\"字符串理解\"></a>字符串理解</h3><ul>\n<li>[ ] 227. Basic Calculator II (Medium)</li>\n</ul>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li>[ ] 28. Implement strStr() (Easy)</li>\n</ul>\n<h3 id=\"练习-10\"><a href=\"#练习-10\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-10\"><a href=\"#基础难度-10\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 409. Longest Palindrome (Easy)</li>\n<li>[ ] 3. Longest Substring Without Repeating Characters (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-10\"><a href=\"#进阶难度-10\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 772. Basic Calculator III (Hard)</li>\n<li>[ ] 5. Longest Palindromic Substring (Medium)</li>\n</ul>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"链表基本操作\"><a href=\"#链表基本操作\" class=\"headerlink\" title=\"链表基本操作\"></a>链表基本操作</h3><ul>\n<li>[ ] 206. Reverse Linked List (Easy)</li>\n<li>[ ] 21. Merge Two Sorted Lists (Easy)</li>\n<li>[ ] 24. Swap Nodes in Pairs (Medium)</li>\n</ul>\n<h3 id=\"其他链表技巧\"><a href=\"#其他链表技巧\" class=\"headerlink\" title=\"其他链表技巧\"></a>其他链表技巧</h3><ul>\n<li>[ ] 160. Intersection of Two Linked Lists (Easy)</li>\n<li>[ ] 234. Palindrome Linked List (Easy)</li>\n</ul>\n<h3 id=\"练习-11\"><a href=\"#练习-11\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-11\"><a href=\"#基础难度-11\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 83. Remove Duplicates from Sorted List (Easy)</li>\n<li>[ ] 328. Odd Even Linked List (Medium)</li>\n<li>[ ] 19. Remove Nth Node From End of List (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-11\"><a href=\"#进阶难度-11\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 148. Sort List (Medium)</li>\n</ul>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><h3 id=\"树的递归\"><a href=\"#树的递归\" class=\"headerlink\" title=\"树的递归\"></a>树的递归</h3><ul>\n<li>[ ] 104. Maximum Depth of Binary Tree (Easy)</li>\n<li>[ ] 110. Balanced Binary Tree (Easy)</li>\n<li>[ ] 543. Diameter of Binary Tree (Easy)</li>\n<li>[ ] 437. Path Sum III (Easy)</li>\n<li>[ ] 101. Symmetric Tree (Easy)</li>\n<li>[ ] 1110. Delete Nodes And Return Forest (Medium)</li>\n</ul>\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><ul>\n<li>[ ] 637. Average of Levels in Binary Tree (Easy)</li>\n</ul>\n<h3 id=\"前中后序遍历\"><a href=\"#前中后序遍历\" class=\"headerlink\" title=\"前中后序遍历\"></a>前中后序遍历</h3><ul>\n<li>[ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)</li>\n<li>[ ] 144. Binary Tree Preorder Traversal (Medium)</li>\n</ul>\n<h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><ul>\n<li>[ ] 99. Recover Binary Search Tree (Hard)</li>\n<li>[ ] 669. Trim a Binary Search Tree (Easy)</li>\n</ul>\n<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><ul>\n<li>[ ] 208. Implement Trie (Prefix Tree) (Medium)</li>\n</ul>\n<h3 id=\"练习-12\"><a href=\"#练习-12\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-12\"><a href=\"#基础难度-12\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 226. Invert Binary Tree (Easy)</li>\n<li>[ ] 617. Merge Two Binary Trees (Easy)</li>\n<li>[ ] 572. Subtree of Another Tree (Easy)</li>\n<li>[ ] 404. Sum of Left Leaves (Easy)</li>\n<li>[ ] 513. Find Bottom Left Tree Value (Easy)</li>\n<li>[ ] 538. Convert BST to Greater Tree (Easy)</li>\n<li>[ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)</li>\n<li>[ ] 530. Minimum Absolute Difference in BST (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-12\"><a href=\"#进阶难度-12\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)</li>\n<li>[ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)</li>\n<li>[ ] 94. Binary Tree Inorder Traversal (Medium)</li>\n<li>[ ] 145. Binary Tree Postorder Traversal (Medium)</li>\n<li>[ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)</li>\n<li>[ ] 109. Convert Sorted List to Binary Search Tree (Medium)</li>\n<li>[ ] 897. Increasing Order Search Tree (Easy)</li>\n<li>[ ] 653. Two Sum IV - Input is a BST (Easy)</li>\n<li>[ ] 450. Delete Node in a BST (Medium)</li>\n</ul>\n<h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"二分图\"><a href=\"#二分图\" class=\"headerlink\" title=\"二分图\"></a>二分图</h3><ul>\n<li>[ ] 785. Is Graph Bipartite? (Medium)</li>\n</ul>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><ul>\n<li>[ ] 210. Course Schedule II (Medium)</li>\n</ul>\n<h3 id=\"练习-13\"><a href=\"#练习-13\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-13\"><a href=\"#基础难度-13\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1059. All Paths from Source Lead to Destination (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-13\"><a href=\"#进阶难度-13\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 882. Reachable Nodes In Subdivided Graph (Hard)</li>\n</ul>\n<h2 id=\"高阶数据结构\"><a href=\"#高阶数据结构\" class=\"headerlink\" title=\"高阶数据结构\"></a>高阶数据结构</h2><h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><ul>\n<li>[ ] 684. Redundant Connection (Medium)</li>\n</ul>\n<h3 id=\"复合数据结构\"><a href=\"#复合数据结构\" class=\"headerlink\" title=\"复合数据结构\"></a>复合数据结构</h3><ul>\n<li>[ ] 146. LRU Cache (Medium)</li>\n</ul>\n<h3 id=\"练习-14\"><a href=\"#练习-14\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-14\"><a href=\"#基础难度-14\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 380. Insert Delete GetRandom O(1) (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-14\"><a href=\"#进阶难度-14\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 432. All O‘one Data Structure (Hard)</li>\n<li>[ ] 716. Max Stack (Easy)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><h3 id=\"分配问题\"><a href=\"#分配问题\" class=\"headerlink\" title=\"分配问题\"></a>分配问题</h3><ul>\n<li>[x] 455. Assign Cookies (Easy)</li>\n<li>[x] 135. Candy (Hard)</li>\n</ul>\n<h3 id=\"区间问题\"><a href=\"#区间问题\" class=\"headerlink\" title=\"区间问题\"></a>区间问题</h3><ul>\n<li>[ ] 435. Non-overlapping Intervals (Medium)</li>\n</ul>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度\"><a href=\"#基础难度\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 605. Can Place Flowers (Easy)</li>\n<li>[ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)</li>\n<li>[ ] 763. Partition Labels (Medium)</li>\n<li>[x] 122. Best Time to Buy and Sell Stock II (Easy)</li>\n</ul>\n<h4 id=\"进阶难度\"><a href=\"#进阶难度\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 406. Queue Reconstruction by Height (Medium)</li>\n<li>[ ] 665. Non-decreasing Array (Easy)</li>\n</ul>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><ul>\n<li>[x] 167. Two Sum II - Input array is sorted (Easy)</li>\n</ul>\n<h3 id=\"归并两个有序数组\"><a href=\"#归并两个有序数组\" class=\"headerlink\" title=\"归并两个有序数组\"></a>归并两个有序数组</h3><ul>\n<li>[ ] 88. Merge Sorted Array (Easy)</li>\n</ul>\n<h3 id=\"快慢指针\"><a href=\"#快慢指针\" class=\"headerlink\" title=\"快慢指针\"></a>快慢指针</h3><ul>\n<li>[ ] 142. Linked List Cycle II (Medium)</li>\n</ul>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><ul>\n<li>[ ] 76. Minimum Window Substring (Hard)</li>\n</ul>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-1\"><a href=\"#基础难度-1\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 633. Sum of Square Numbers (Easy)</li>\n<li>[ ] 680. Valid Palindrome II (Easy)</li>\n<li>[ ] 524. Longest Word in Dictionary through Deleting (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-1\"><a href=\"#进阶难度-1\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 340. Longest Substring with At Most K Distinct Characters (Hard)</li>\n</ul>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><h3 id=\"求开方\"><a href=\"#求开方\" class=\"headerlink\" title=\"求开方\"></a>求开方</h3><ul>\n<li>[ ] 69. Sqrt(x) (Easy)</li>\n</ul>\n<h3 id=\"查找区间\"><a href=\"#查找区间\" class=\"headerlink\" title=\"查找区间\"></a>查找区间</h3><ul>\n<li>[ ] 34. Find First and Last Position of Element in Sorted Array (Medium)</li>\n</ul>\n<h3 id=\"旋转数组查找数字\"><a href=\"#旋转数组查找数字\" class=\"headerlink\" title=\"旋转数组查找数字\"></a>旋转数组查找数字</h3><ul>\n<li>[ ] 81. Search in Rotated Sorted Array II (Medium)</li>\n</ul>\n<h3 id=\"练习-2\"><a href=\"#练习-2\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-2\"><a href=\"#基础难度-2\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 154. Find Minimum in Rotated Sorted Array II (Medium)</li>\n<li>[ ] 540. Single Element in a Sorted Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-2\"><a href=\"#进阶难度-2\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 4. Median of Two Sorted Arrays (Hard)</li>\n</ul>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"常用排序\"><a href=\"#常用排序\" class=\"headerlink\" title=\"常用排序\"></a>常用排序</h3><ul>\n<li>[ ] 快速排序(Quicksort)</li>\n<li>[ ] 归并排序(Merge Sort)</li>\n<li>[ ] 插入排序(Insertion Sort)</li>\n<li>[ ] 冒泡排序(Bubble Sort)</li>\n<li>[ ] 选择排序(Selection Sort)</li>\n</ul>\n<h3 id=\"快速选择\"><a href=\"#快速选择\" class=\"headerlink\" title=\"快速选择\"></a>快速选择</h3><ul>\n<li>[ ] 215. Kth Largest Element in an Array</li>\n</ul>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><ul>\n<li>[ ] 347. Top K Frequent Elements (Medium)</li>\n</ul>\n<h3 id=\"练习-3\"><a href=\"#练习-3\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-3\"><a href=\"#基础难度-3\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 451. Sort Characters By Frequency (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-3\"><a href=\"#进阶难度-3\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 75. Sort Colors (Medium)</li>\n</ul>\n<h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h3 id=\"深度优先\"><a href=\"#深度优先\" class=\"headerlink\" title=\"深度优先\"></a>深度优先</h3><ul>\n<li>[ ] 695. Max Area of Island (Easy)</li>\n<li>[ ] 547. Friend Circles (Medium)</li>\n<li>[ ] 417. Pacific Atlantic Water Flow (Medium)</li>\n</ul>\n<h3 id=\"回溯法\"><a href=\"#回溯法\" class=\"headerlink\" title=\"回溯法\"></a>回溯法</h3><ul>\n<li>[ ] 46. Permutations (Medium)</li>\n<li>[ ] 77. Combinations (Medium)</li>\n<li>[ ] 79. Word Search (Medium)</li>\n<li>[ ] 51. N-Queens (Hard)</li>\n</ul>\n<h2 id=\"广度优先\"><a href=\"#广度优先\" class=\"headerlink\" title=\"广度优先\"></a>广度优先</h2><ul>\n<li>[ ] 934. Shortest Bridge (Medium)</li>\n<li>[ ] 126. Word Ladder II (Hard)</li>\n</ul>\n<h3 id=\"练习-4\"><a href=\"#练习-4\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-4\"><a href=\"#基础难度-4\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 130. Surrounded Regions (Medium)</li>\n<li>[ ] 257. Binary Tree Paths (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-4\"><a href=\"#进阶难度-4\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 47. Permutations II (Medium)</li>\n<li>[ ] 40. Combination Sum II (Medium)</li>\n<li>[ ] 37. Sudoku Solver (Hard)</li>\n<li>[ ] 310. Minimum Height Trees (Medium)</li>\n</ul>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><h3 id=\"一维动态规划\"><a href=\"#一维动态规划\" class=\"headerlink\" title=\"一维动态规划\"></a>一维动态规划</h3><ul>\n<li>[x] 70. Climbing Stairs (Easy)</li>\n<li>[x] 198. House Robber (Easy)</li>\n<li>[ ] 413. Arithmetic Slices (Medium)</li>\n</ul>\n<h3 id=\"二维动态规划\"><a href=\"#二维动态规划\" class=\"headerlink\" title=\"二维动态规划\"></a>二维动态规划</h3><ul>\n<li>[ ] 64. Minimum Path Sum (Medium)</li>\n<li>[ ] 542. 01 Matrix (Medium)</li>\n<li>[ ] 221. Maximal Square (Medium)</li>\n</ul>\n<h3 id=\"分割类型\"><a href=\"#分割类型\" class=\"headerlink\" title=\"分割类型\"></a>分割类型</h3><ul>\n<li>[ ] 279. Perfect Squares (Medium)</li>\n<li>[ ] 91. Decode Ways (Medium)</li>\n<li>[ ] 139. Word Break (Medium)</li>\n</ul>\n<h3 id=\"子序列\"><a href=\"#子序列\" class=\"headerlink\" title=\"子序列\"></a>子序列</h3><ul>\n<li>[ ] 300. Longest Increasing Subsequence (Medium)</li>\n<li>[ ] 1143. Longest Commom Subsequence (Medium)</li>\n</ul>\n<h3 id=\"背包\"><a href=\"#背包\" class=\"headerlink\" title=\"背包\"></a>背包</h3><ul>\n<li>[ ] 416. Partition Equal Subset Sum (Medium)</li>\n<li>[ ] 474. Ones and Zeroes (Medium)</li>\n<li>[ ] 322. Coin Change (Medium)</li>\n</ul>\n<h3 id=\"字符串编辑\"><a href=\"#字符串编辑\" class=\"headerlink\" title=\"字符串编辑\"></a>字符串编辑</h3><ul>\n<li>[ ] 72. Edit Distance (Hard)</li>\n<li>[ ] 650. 2 Keys Keyboard (Medium)</li>\n<li>[ ] 10. Regular Expression Matching (Hard)</li>\n</ul>\n<h3 id=\"股票交易\"><a href=\"#股票交易\" class=\"headerlink\" title=\"股票交易\"></a>股票交易</h3><ul>\n<li>[x] 121. Best Time to Buy and Sell Stock (Easy)</li>\n<li>[ ] 188. Best Time to Buy and Sell Stock IV (Hard)</li>\n<li>[ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)</li>\n</ul>\n<h3 id=\"练习-5\"><a href=\"#练习-5\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-5\"><a href=\"#基础难度-5\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 213. House Robber II (Medium)</li>\n<li>[x] 53. Maximum Subarray (Easy)</li>\n<li>[ ] 343. Integer Break (Medium)</li>\n<li>[ ] 583. Delete Operation for Two Strings (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-5\"><a href=\"#进阶难度-5\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 646. Maximum Length of Pair Chain (Medium)</li>\n<li>[ ] 376. Wiggle Subsequence (Medium)</li>\n<li>[ ] 494. Target Sum (Medium)</li>\n<li>[ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)</li>\n</ul>\n<h2 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h2><h3 id=\"表达式问题\"><a href=\"#表达式问题\" class=\"headerlink\" title=\"表达式问题\"></a>表达式问题</h3><ul>\n<li>[ ] 241. Different Ways to Add Parentheses (Medium)</li>\n</ul>\n<h3 id=\"练习-6\"><a href=\"#练习-6\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-6\"><a href=\"#基础难度-6\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 932. Beautiful Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-6\"><a href=\"#进阶难度-6\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 312. Burst Balloons (Hard)</li>\n</ul>\n<h2 id=\"数学问题\"><a href=\"#数学问题\" class=\"headerlink\" title=\"数学问题\"></a>数学问题</h2><h3 id=\"公倍数和公因数\"><a href=\"#公倍数和公因数\" class=\"headerlink\" title=\"公倍数和公因数\"></a>公倍数和公因数</h3><ul>\n<li>[ ] 辗转相除法</li>\n</ul>\n<h3 id=\"质数\"><a href=\"#质数\" class=\"headerlink\" title=\"质数\"></a>质数</h3><ul>\n<li>[ ] 204. Count Primes (Easy)</li>\n</ul>\n<h3 id=\"数字处理\"><a href=\"#数字处理\" class=\"headerlink\" title=\"数字处理\"></a>数字处理</h3><ul>\n<li>[ ] 504. Base 7 (Easy)</li>\n<li>[ ] 172. Factorial Trailing Zeroes</li>\n<li>[ ] 415. Add Strings (Easy)</li>\n<li>[ ] 326. Power of Three (Easy)</li>\n</ul>\n<h3 id=\"随机与取样\"><a href=\"#随机与取样\" class=\"headerlink\" title=\"随机与取样\"></a>随机与取样</h3><ul>\n<li>[ ] 384. Shuffle an Array (Medium)</li>\n<li>[ ] 528. Random Pick with Weight (Medium)</li>\n<li>[ ] 382. Linked List Random Node (Medium)</li>\n</ul>\n<h3 id=\"练习-7\"><a href=\"#练习-7\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-7\"><a href=\"#基础难度-7\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 168. Excel Sheet Column Title (Easy)</li>\n<li>[ ] 67. Add Binary (Easy)</li>\n<li>[ ] 238. Product of Array Except Self (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-7\"><a href=\"#进阶难度-7\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 462. Minimum Moves to Equal Array Elements II (Medium)</li>\n<li>[ ] 169. Majority Element (Easy)</li>\n<li>[ ] 470. Implement Rand10() Using Rand7() (Medium)</li>\n<li>[ ] 202. Happy Number (Easy)</li>\n</ul>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"位运算基础问题\"><a href=\"#位运算基础问题\" class=\"headerlink\" title=\"位运算基础问题\"></a>位运算基础问题</h3><ul>\n<li>[ ] 461. Hamming Distance (Easy)</li>\n<li>[ ] 190. Reverse Bits (Easy)</li>\n<li>[ ] 136. Single Number (Easy)</li>\n</ul>\n<h3 id=\"二进制特性\"><a href=\"#二进制特性\" class=\"headerlink\" title=\"二进制特性\"></a>二进制特性</h3><ul>\n<li>[ ] 342. Power of Four (Easy)</li>\n<li>[ ] 318. Maximum Product of Word Lengths (Medium)</li>\n<li>[ ] 338. Counting Bits (Medium)</li>\n</ul>\n<h3 id=\"练习-8\"><a href=\"#练习-8\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-8\"><a href=\"#基础难度-8\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 268. Missing Number (Easy)</li>\n<li>[ ] 693. Binary Number with Alternating Bits (Easy)</li>\n<li>[ ] 476. Number Complement (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-8\"><a href=\"#进阶难度-8\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 260. Single Number III (Medium)</li>\n</ul>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>[x] 448. Find All Numbers Disappeared in an Array (Easy)</li>\n<li>[ ] 48. Rotate Image (Medium)</li>\n<li>[ ] 240. Search a 2D Matrix II (Medium)</li>\n<li>[ ] 769. Max Chunks To Make Sorted (Medium)</li>\n</ul>\n<h3 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h3><ul>\n<li>[ ] 232. Implement Queue using Stacks (Easy)</li>\n<li>[ ] 155. Min Stack (Easy)</li>\n<li>[ ] 20. Valid Parentheses (Easy)</li>\n</ul>\n<h3 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3><ul>\n<li>[ ] 739. Daily Temperatures (Medium)</li>\n</ul>\n<h3 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h3><ul>\n<li>[ ] 23. Merge k Sorted Lists (Hard)</li>\n<li>[ ] 218. The Skyline Problem (Hard)</li>\n</ul>\n<h3 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h3><ul>\n<li>[ ] 239. Sliding Window Maximum (Hard)</li>\n</ul>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><ul>\n<li>[ ] 1. Two Sum (Easy)</li>\n<li>[ ] 128. Longest Consecutive Sequence (Hard)</li>\n<li>[ ] 149. Max Points on a Line (Hard)</li>\n</ul>\n<h3 id=\"多重集合和映射\"><a href=\"#多重集合和映射\" class=\"headerlink\" title=\"多重集合和映射\"></a>多重集合和映射</h3><ul>\n<li>[ ] 332. Reconstruct Itinerary (Medium)</li>\n</ul>\n<h3 id=\"前缀和和积分图\"><a href=\"#前缀和和积分图\" class=\"headerlink\" title=\"前缀和和积分图\"></a>前缀和和积分图</h3><ul>\n<li>[ ] 303. Range Sum Query - Immutable (Easy)</li>\n<li>[ ] 304. Range Sum Query 2D - Immutable (Medium)</li>\n<li>[ ] 560. Subarray Sum Equals K (Medium)</li>\n</ul>\n<h3 id=\"练习-9\"><a href=\"#练习-9\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-9\"><a href=\"#基础难度-9\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 566. Reshape the Matrix (Easy)</li>\n<li>[ ] 225. Implement Stack using Queues (Easy)</li>\n<li>[ ] 503. Next Greater Element II (Medium)</li>\n<li>[ ] 217. Contains Duplicate (Easy)</li>\n<li>[ ] 697. Degree of an Array (Easy)</li>\n<li>[ ] 594. Longest Harmonious Subsequence (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-9\"><a href=\"#进阶难度-9\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 287. Find the Duplicate Number (Medium)</li>\n<li>[ ] 313. Super Ugly Number (Medium)</li>\n<li>[ ] 870. Advantage Shuffle (Medium)</li>\n<li>[ ] 307. Range Sum Query - Mutable (Medium)</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h3><ul>\n<li>[x] 242. Valid Anagram (Easy)</li>\n<li>[x] 205. Isomorphic Strings (Easy)</li>\n<li>[ ] 647. Palindromic Substrings (Medium)</li>\n<li>[ ] 696. Count Binary Substrings (Easy)</li>\n</ul>\n<h3 id=\"字符串理解\"><a href=\"#字符串理解\" class=\"headerlink\" title=\"字符串理解\"></a>字符串理解</h3><ul>\n<li>[ ] 227. Basic Calculator II (Medium)</li>\n</ul>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li>[ ] 28. Implement strStr() (Easy)</li>\n</ul>\n<h3 id=\"练习-10\"><a href=\"#练习-10\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-10\"><a href=\"#基础难度-10\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 409. Longest Palindrome (Easy)</li>\n<li>[ ] 3. Longest Substring Without Repeating Characters (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-10\"><a href=\"#进阶难度-10\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 772. Basic Calculator III (Hard)</li>\n<li>[ ] 5. Longest Palindromic Substring (Medium)</li>\n</ul>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"链表基本操作\"><a href=\"#链表基本操作\" class=\"headerlink\" title=\"链表基本操作\"></a>链表基本操作</h3><ul>\n<li>[ ] 206. Reverse Linked List (Easy)</li>\n<li>[ ] 21. Merge Two Sorted Lists (Easy)</li>\n<li>[ ] 24. Swap Nodes in Pairs (Medium)</li>\n</ul>\n<h3 id=\"其他链表技巧\"><a href=\"#其他链表技巧\" class=\"headerlink\" title=\"其他链表技巧\"></a>其他链表技巧</h3><ul>\n<li>[ ] 160. Intersection of Two Linked Lists (Easy)</li>\n<li>[ ] 234. Palindrome Linked List (Easy)</li>\n</ul>\n<h3 id=\"练习-11\"><a href=\"#练习-11\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-11\"><a href=\"#基础难度-11\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 83. Remove Duplicates from Sorted List (Easy)</li>\n<li>[ ] 328. Odd Even Linked List (Medium)</li>\n<li>[ ] 19. Remove Nth Node From End of List (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-11\"><a href=\"#进阶难度-11\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 148. Sort List (Medium)</li>\n</ul>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><h3 id=\"树的递归\"><a href=\"#树的递归\" class=\"headerlink\" title=\"树的递归\"></a>树的递归</h3><ul>\n<li>[ ] 104. Maximum Depth of Binary Tree (Easy)</li>\n<li>[ ] 110. Balanced Binary Tree (Easy)</li>\n<li>[ ] 543. Diameter of Binary Tree (Easy)</li>\n<li>[ ] 437. Path Sum III (Easy)</li>\n<li>[ ] 101. Symmetric Tree (Easy)</li>\n<li>[ ] 1110. Delete Nodes And Return Forest (Medium)</li>\n</ul>\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><ul>\n<li>[ ] 637. Average of Levels in Binary Tree (Easy)</li>\n</ul>\n<h3 id=\"前中后序遍历\"><a href=\"#前中后序遍历\" class=\"headerlink\" title=\"前中后序遍历\"></a>前中后序遍历</h3><ul>\n<li>[ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)</li>\n<li>[ ] 144. Binary Tree Preorder Traversal (Medium)</li>\n</ul>\n<h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><ul>\n<li>[ ] 99. Recover Binary Search Tree (Hard)</li>\n<li>[ ] 669. Trim a Binary Search Tree (Easy)</li>\n</ul>\n<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><ul>\n<li>[ ] 208. Implement Trie (Prefix Tree) (Medium)</li>\n</ul>\n<h3 id=\"练习-12\"><a href=\"#练习-12\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-12\"><a href=\"#基础难度-12\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 226. Invert Binary Tree (Easy)</li>\n<li>[ ] 617. Merge Two Binary Trees (Easy)</li>\n<li>[ ] 572. Subtree of Another Tree (Easy)</li>\n<li>[ ] 404. Sum of Left Leaves (Easy)</li>\n<li>[ ] 513. Find Bottom Left Tree Value (Easy)</li>\n<li>[ ] 538. Convert BST to Greater Tree (Easy)</li>\n<li>[ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)</li>\n<li>[ ] 530. Minimum Absolute Difference in BST (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-12\"><a href=\"#进阶难度-12\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)</li>\n<li>[ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)</li>\n<li>[ ] 94. Binary Tree Inorder Traversal (Medium)</li>\n<li>[ ] 145. Binary Tree Postorder Traversal (Medium)</li>\n<li>[ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)</li>\n<li>[ ] 109. Convert Sorted List to Binary Search Tree (Medium)</li>\n<li>[ ] 897. Increasing Order Search Tree (Easy)</li>\n<li>[ ] 653. Two Sum IV - Input is a BST (Easy)</li>\n<li>[ ] 450. Delete Node in a BST (Medium)</li>\n</ul>\n<h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"二分图\"><a href=\"#二分图\" class=\"headerlink\" title=\"二分图\"></a>二分图</h3><ul>\n<li>[ ] 785. Is Graph Bipartite? (Medium)</li>\n</ul>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><ul>\n<li>[ ] 210. Course Schedule II (Medium)</li>\n</ul>\n<h3 id=\"练习-13\"><a href=\"#练习-13\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-13\"><a href=\"#基础难度-13\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1059. All Paths from Source Lead to Destination (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-13\"><a href=\"#进阶难度-13\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 882. Reachable Nodes In Subdivided Graph (Hard)</li>\n</ul>\n<h2 id=\"高阶数据结构\"><a href=\"#高阶数据结构\" class=\"headerlink\" title=\"高阶数据结构\"></a>高阶数据结构</h2><h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><ul>\n<li>[ ] 684. Redundant Connection (Medium)</li>\n</ul>\n<h3 id=\"复合数据结构\"><a href=\"#复合数据结构\" class=\"headerlink\" title=\"复合数据结构\"></a>复合数据结构</h3><ul>\n<li>[ ] 146. LRU Cache (Medium)</li>\n</ul>\n<h3 id=\"练习-14\"><a href=\"#练习-14\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-14\"><a href=\"#基础难度-14\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 380. Insert Delete GetRandom O(1) (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-14\"><a href=\"#进阶难度-14\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 432. All O‘one Data Structure (Hard)</li>\n<li>[ ] 716. Max Stack (Easy)</li>\n</ul>\n"},{"abbrlink":"1c4cd1f0","date":"2021-06-02T16:00:00.000Z","_content":"## 项目背景\n\n在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。\n![seata_protobuf.png](seata_protobuf.png)\n因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。\n\n## HTTP2 跟 HTTP1.1 有什么区别\n\n1. 多路复用\n1. 头部压缩\n1. 二进制分帧\n1. 请求优先级\n1. 服务器推送\n\n## 方案描述\n\n#### 打包、拆包（头部压缩、二进制分帧）\n\n1. 修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。\n1. 增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder\n1. 将传输单元定义为 Frame，做进一步抽象。\n1. 在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。\n\n#### HTTP 连接多路复用\n\n1. 在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。\n1. 增加 AbstractNettyRemoting 中，对 Http2Stream 的创建\n\n## 时间规划\n\n- 尝试自己做一个 HTTP2 的 NettyServer 的 Demo\n  - 7.1 - 7.10\n  - 阅读 Netty 关于 HTTP2 相关文档，并实现 Demo\n- 用 Wireshark 抓包分析并修改 Demo\n  - 7.10 - 7.15\n  - 主要看 Headers 是否压缩，是否实现二进制分帧等等\n- 在 Seata 中尝试修改源码\n  - 7.15 - 7.30\n  - 尝试修改上述方案描述所提到的相关类\n- 性能测试，若性能不佳则找出原因\n  - 7.30 - 8.7\n  - 会测试 HTTP2 和原本私有协议之间的性能差距\n- 代码重构\n  - 8.7 - 8.20\n  - 结合 Seata 社区的意见，对提交的代码进行修改或者重构\n- 书写相关的文档\n  - 8.20 - 8.30\n  - 针对两个月以来的成果书写文档\n\n## 参考资料\n\n[Use Protobuf as the codec of RPC（Seata Issues#823 ）](https://github.com/seata/seata/issues/823)\n[New RPC protocol propose. （Seata Issues#893）](https://github.com/seata/seata/issues/893)\n[RFC7540（HTTP/2）](https://datatracker.ietf.org/doc/html/rfc7540)\n[RFC7541（HPACK）](https://datatracker.ietf.org/doc/html/rfc7541)\n[gRPC over HTTP2](https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html)\n","source":"_posts/Seata protocol supports http2.md","raw":"---\nabbrlink: 1c4cd1f0\ndate: 2021-06-03\n---\n## 项目背景\n\n在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。\n![seata_protobuf.png](seata_protobuf.png)\n因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。\n\n## HTTP2 跟 HTTP1.1 有什么区别\n\n1. 多路复用\n1. 头部压缩\n1. 二进制分帧\n1. 请求优先级\n1. 服务器推送\n\n## 方案描述\n\n#### 打包、拆包（头部压缩、二进制分帧）\n\n1. 修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。\n1. 增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder\n1. 将传输单元定义为 Frame，做进一步抽象。\n1. 在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。\n\n#### HTTP 连接多路复用\n\n1. 在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。\n1. 增加 AbstractNettyRemoting 中，对 Http2Stream 的创建\n\n## 时间规划\n\n- 尝试自己做一个 HTTP2 的 NettyServer 的 Demo\n  - 7.1 - 7.10\n  - 阅读 Netty 关于 HTTP2 相关文档，并实现 Demo\n- 用 Wireshark 抓包分析并修改 Demo\n  - 7.10 - 7.15\n  - 主要看 Headers 是否压缩，是否实现二进制分帧等等\n- 在 Seata 中尝试修改源码\n  - 7.15 - 7.30\n  - 尝试修改上述方案描述所提到的相关类\n- 性能测试，若性能不佳则找出原因\n  - 7.30 - 8.7\n  - 会测试 HTTP2 和原本私有协议之间的性能差距\n- 代码重构\n  - 8.7 - 8.20\n  - 结合 Seata 社区的意见，对提交的代码进行修改或者重构\n- 书写相关的文档\n  - 8.20 - 8.30\n  - 针对两个月以来的成果书写文档\n\n## 参考资料\n\n[Use Protobuf as the codec of RPC（Seata Issues#823 ）](https://github.com/seata/seata/issues/823)\n[New RPC protocol propose. （Seata Issues#893）](https://github.com/seata/seata/issues/893)\n[RFC7540（HTTP/2）](https://datatracker.ietf.org/doc/html/rfc7540)\n[RFC7541（HPACK）](https://datatracker.ietf.org/doc/html/rfc7541)\n[gRPC over HTTP2](https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html)\n","slug":"Seata protocol supports http2","published":1,"updated":"2021-07-19T06:13:07.022Z","title":"Seata protocol supports http2","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9d0005jqjygliz0tgq","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。<br><img src=\"/1c4cd1f0/seata_protobuf.png\" alt=\"seata_protobuf.png\"><br>因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。</p>\n<h2 id=\"HTTP2-跟-HTTP1-1-有什么区别\"><a href=\"#HTTP2-跟-HTTP1-1-有什么区别\" class=\"headerlink\" title=\"HTTP2 跟 HTTP1.1 有什么区别\"></a>HTTP2 跟 HTTP1.1 有什么区别</h2><ol>\n<li>多路复用</li>\n<li>头部压缩</li>\n<li>二进制分帧</li>\n<li>请求优先级</li>\n<li>服务器推送</li>\n</ol>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"打包、拆包（头部压缩、二进制分帧）\"><a href=\"#打包、拆包（头部压缩、二进制分帧）\" class=\"headerlink\" title=\"打包、拆包（头部压缩、二进制分帧）\"></a>打包、拆包（头部压缩、二进制分帧）</h4><ol>\n<li>修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。</li>\n<li>增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder</li>\n<li>将传输单元定义为 Frame，做进一步抽象。</li>\n<li>在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。</li>\n</ol>\n<h4 id=\"HTTP-连接多路复用\"><a href=\"#HTTP-连接多路复用\" class=\"headerlink\" title=\"HTTP 连接多路复用\"></a>HTTP 连接多路复用</h4><ol>\n<li>在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。</li>\n<li>增加 AbstractNettyRemoting 中，对 Http2Stream 的创建</li>\n</ol>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>尝试自己做一个 HTTP2 的 NettyServer 的 Demo<ul>\n<li>7.1 - 7.10</li>\n<li>阅读 Netty 关于 HTTP2 相关文档，并实现 Demo</li>\n</ul>\n</li>\n<li>用 Wireshark 抓包分析并修改 Demo<ul>\n<li>7.10 - 7.15</li>\n<li>主要看 Headers 是否压缩，是否实现二进制分帧等等</li>\n</ul>\n</li>\n<li>在 Seata 中尝试修改源码<ul>\n<li>7.15 - 7.30</li>\n<li>尝试修改上述方案描述所提到的相关类</li>\n</ul>\n</li>\n<li>性能测试，若性能不佳则找出原因<ul>\n<li>7.30 - 8.7</li>\n<li>会测试 HTTP2 和原本私有协议之间的性能差距</li>\n</ul>\n</li>\n<li>代码重构<ul>\n<li>8.7 - 8.20</li>\n<li>结合 Seata 社区的意见，对提交的代码进行修改或者重构</li>\n</ul>\n</li>\n<li>书写相关的文档<ul>\n<li>8.20 - 8.30</li>\n<li>针对两个月以来的成果书写文档</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/seata/seata/issues/823\" target=\"_blank\" rel=\"noopener\">Use Protobuf as the codec of RPC（Seata Issues#823 ）</a><br><a href=\"https://github.com/seata/seata/issues/893\" target=\"_blank\" rel=\"noopener\">New RPC protocol propose. （Seata Issues#893）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7540\" target=\"_blank\" rel=\"noopener\">RFC7540（HTTP/2）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7541\" target=\"_blank\" rel=\"noopener\">RFC7541（HPACK）</a><br><a href=\"https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html\" target=\"_blank\" rel=\"noopener\">gRPC over HTTP2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。<br><img src=\"/1c4cd1f0/seata_protobuf.png\" alt=\"seata_protobuf.png\"><br>因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。</p>\n<h2 id=\"HTTP2-跟-HTTP1-1-有什么区别\"><a href=\"#HTTP2-跟-HTTP1-1-有什么区别\" class=\"headerlink\" title=\"HTTP2 跟 HTTP1.1 有什么区别\"></a>HTTP2 跟 HTTP1.1 有什么区别</h2><ol>\n<li>多路复用</li>\n<li>头部压缩</li>\n<li>二进制分帧</li>\n<li>请求优先级</li>\n<li>服务器推送</li>\n</ol>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"打包、拆包（头部压缩、二进制分帧）\"><a href=\"#打包、拆包（头部压缩、二进制分帧）\" class=\"headerlink\" title=\"打包、拆包（头部压缩、二进制分帧）\"></a>打包、拆包（头部压缩、二进制分帧）</h4><ol>\n<li>修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。</li>\n<li>增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder</li>\n<li>将传输单元定义为 Frame，做进一步抽象。</li>\n<li>在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。</li>\n</ol>\n<h4 id=\"HTTP-连接多路复用\"><a href=\"#HTTP-连接多路复用\" class=\"headerlink\" title=\"HTTP 连接多路复用\"></a>HTTP 连接多路复用</h4><ol>\n<li>在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。</li>\n<li>增加 AbstractNettyRemoting 中，对 Http2Stream 的创建</li>\n</ol>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>尝试自己做一个 HTTP2 的 NettyServer 的 Demo<ul>\n<li>7.1 - 7.10</li>\n<li>阅读 Netty 关于 HTTP2 相关文档，并实现 Demo</li>\n</ul>\n</li>\n<li>用 Wireshark 抓包分析并修改 Demo<ul>\n<li>7.10 - 7.15</li>\n<li>主要看 Headers 是否压缩，是否实现二进制分帧等等</li>\n</ul>\n</li>\n<li>在 Seata 中尝试修改源码<ul>\n<li>7.15 - 7.30</li>\n<li>尝试修改上述方案描述所提到的相关类</li>\n</ul>\n</li>\n<li>性能测试，若性能不佳则找出原因<ul>\n<li>7.30 - 8.7</li>\n<li>会测试 HTTP2 和原本私有协议之间的性能差距</li>\n</ul>\n</li>\n<li>代码重构<ul>\n<li>8.7 - 8.20</li>\n<li>结合 Seata 社区的意见，对提交的代码进行修改或者重构</li>\n</ul>\n</li>\n<li>书写相关的文档<ul>\n<li>8.20 - 8.30</li>\n<li>针对两个月以来的成果书写文档</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/seata/seata/issues/823\" target=\"_blank\" rel=\"noopener\">Use Protobuf as the codec of RPC（Seata Issues#823 ）</a><br><a href=\"https://github.com/seata/seata/issues/893\" target=\"_blank\" rel=\"noopener\">New RPC protocol propose. （Seata Issues#893）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7540\" target=\"_blank\" rel=\"noopener\">RFC7540（HTTP/2）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7541\" target=\"_blank\" rel=\"noopener\">RFC7541（HPACK）</a><br><a href=\"https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html\" target=\"_blank\" rel=\"noopener\">gRPC over HTTP2</a></p>\n"},{"abbrlink":"f54835d","date":"2021-06-09T16:00:00.000Z","_content":"## 项目背景\n\n一个组织的敏感接口不能暴露在外网。\n\n而若以网关的形式转发流量，那么瓶颈会出现在网关上。\n\n因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。\n\n## 方案描述\n\n- [ ] 支持配置文件进行配置\n- [ ] 将 WireGuard 拓展支持 Mac 地址\n- [ ] mesh 连接\n- [ ] 使得机器支持热部署\n- [ ] 让任意两台 NAT 后的机器直接相连\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.25\n  - 学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等\n- 重构 wireguard 的 go 语言实现\n  - 7.25 - 8.20\n  - 将 wireguard 中所需功能提取出来，并修改使其支持 mesh\n- 进行性能测试\n  - 8.20 - 8.25\n  - 做性能测试，并修改源代码\n- 书写文档\n  - 8.25 - 8.30\n  - 书写相关的文档\n- 增加 Dashboard\n  - 若有空余时间\n  - 让机器可以可视化监控状态\n","source":"_posts/全连通内网守护程序.md","raw":"---\nabbrlink: f54835d\ndate: 2021-06-10\n---\n## 项目背景\n\n一个组织的敏感接口不能暴露在外网。\n\n而若以网关的形式转发流量，那么瓶颈会出现在网关上。\n\n因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。\n\n## 方案描述\n\n- [ ] 支持配置文件进行配置\n- [ ] 将 WireGuard 拓展支持 Mac 地址\n- [ ] mesh 连接\n- [ ] 使得机器支持热部署\n- [ ] 让任意两台 NAT 后的机器直接相连\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.25\n  - 学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等\n- 重构 wireguard 的 go 语言实现\n  - 7.25 - 8.20\n  - 将 wireguard 中所需功能提取出来，并修改使其支持 mesh\n- 进行性能测试\n  - 8.20 - 8.25\n  - 做性能测试，并修改源代码\n- 书写文档\n  - 8.25 - 8.30\n  - 书写相关的文档\n- 增加 Dashboard\n  - 若有空余时间\n  - 让机器可以可视化监控状态\n","slug":"全连通内网守护程序","published":1,"updated":"2021-07-19T06:13:07.024Z","title":"全连通内网守护程序","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9e0007jqjy46jmh7xn","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>一个组织的敏感接口不能暴露在外网。</p>\n<p>而若以网关的形式转发流量，那么瓶颈会出现在网关上。</p>\n<p>因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><ul>\n<li>[ ] 支持配置文件进行配置</li>\n<li>[ ] 将 WireGuard 拓展支持 Mac 地址</li>\n<li>[ ] mesh 连接</li>\n<li>[ ] 使得机器支持热部署</li>\n<li>[ ] 让任意两台 NAT 后的机器直接相连</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.25</li>\n<li>学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等</li>\n</ul>\n</li>\n<li>重构 wireguard 的 go 语言实现<ul>\n<li>7.25 - 8.20</li>\n<li>将 wireguard 中所需功能提取出来，并修改使其支持 mesh</li>\n</ul>\n</li>\n<li>进行性能测试<ul>\n<li>8.20 - 8.25</li>\n<li>做性能测试，并修改源代码</li>\n</ul>\n</li>\n<li>书写文档<ul>\n<li>8.25 - 8.30</li>\n<li>书写相关的文档</li>\n</ul>\n</li>\n<li>增加 Dashboard<ul>\n<li>若有空余时间</li>\n<li>让机器可以可视化监控状态</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>一个组织的敏感接口不能暴露在外网。</p>\n<p>而若以网关的形式转发流量，那么瓶颈会出现在网关上。</p>\n<p>因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><ul>\n<li>[ ] 支持配置文件进行配置</li>\n<li>[ ] 将 WireGuard 拓展支持 Mac 地址</li>\n<li>[ ] mesh 连接</li>\n<li>[ ] 使得机器支持热部署</li>\n<li>[ ] 让任意两台 NAT 后的机器直接相连</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.25</li>\n<li>学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等</li>\n</ul>\n</li>\n<li>重构 wireguard 的 go 语言实现<ul>\n<li>7.25 - 8.20</li>\n<li>将 wireguard 中所需功能提取出来，并修改使其支持 mesh</li>\n</ul>\n</li>\n<li>进行性能测试<ul>\n<li>8.20 - 8.25</li>\n<li>做性能测试，并修改源代码</li>\n</ul>\n</li>\n<li>书写文档<ul>\n<li>8.25 - 8.30</li>\n<li>书写相关的文档</li>\n</ul>\n</li>\n<li>增加 Dashboard<ul>\n<li>若有空余时间</li>\n<li>让机器可以可视化监控状态</li>\n</ul>\n</li>\n</ul>\n"},{"abbrlink":"d59abd41","date":"2021-04-20T16:00:00.000Z","_content":"此时是 2021.4.21，大三下学期的第八周，距离我开始春招正好满一个月。\n\n我现在还是印象非常深刻，非常记得 2021.3.22 号这天发生了什么。\n\n那天我把项目，一个即时通信系统给写完了，然后把文案发给女朋友，女朋友用 figma 找了一个简历的模版，然后她写了一个我感觉排版上挺不错的简历。这里十分感谢女朋友。\n\n然后就开始了我长达一个月的春招。一开始只投了一些广州的公司，并且想法还是只投大公司，小公司只拿来练手。\n\n包括位于广州的腾讯微信，虎牙，三七互娱等等。\n\n先说说微信把，比较幸运的是，投了微信没多久就发起了面试，得益于腾讯的制度，腾讯的制度是要么三个工作日内，要么六个工作日内会发起面试。这时的我以为得到一个面试机会是非常容易的，一个月后的我却没想到其实这已经是巅峰了。\n\n微信发起了面试约在了一周后的星期一晚上，平台是腾讯会议。这期间还跟女朋友吵了一架。\n\n我准备了一个星期的面试，这个时候的我主要专注在项目上。这个时候的我还没有想到未来的一个月我会多痛苦。\n\n结果真正发起面试的时候，问的大部分都是八股文。我记得我数据库的部分很多都没有打上来，比如聚集索引，这个名词我从来没有听说过。然后还问了多进程的通信方式，我知道有管道、命名管道、消息队列、共享内存这些，但是一问起底层来我就不知道原理。\n\n最后是两道题，一道题是双向链表插入和删除，这道题比较简单，做出来了但是做的时间比较长；另一道题是给一个完全二叉树，返回节点数，要求时间复杂度小于 O(n)，这道题没有想出来。\n\n然后其实当时心态真的我也不知道为什么这么乐观 😢 觉得自己会过，然后第二天下午去腾讯校招官网查进度，挂了。\n\n当时其实是抱着学习的心态去面试的，但是面试挂了，其实说到底还是有点不甘心的把。\n\n之后的我变得非常焦虑，开始各种公司都投。腾讯面完后时间是 2021.3.30。也就是说我从四月份才开始海投。\n\n这里就是春招犯的第一个错误了：投的时间太晚了。\n\n春招的战线其实很长，从过年前到四月底。春、秋招又分提前批和正式批。春招因为我亲身经历过，比较了解，一般提前批是一月初到二月中旬这段时间，而正式批是 2 月中下旬开始，到 4 月中旬。\n\n## 尽量早投。\n\n当然晚投也有好处，那就是准备会充分一点。\n\n但问题在于，headcount(hc)，也就是名额。hc 是一定的，有一些岗位，一旦招够人了就不招了。你越晚投递简历，就意味着名额越少。而名额越少，意味着对你的要求也会变高。与此同时，越晚投递，我感觉 hr 的处理效率也会变慢，不知道对不对。因为你早投的话，hr 要处理只有简历，但是你晚投递的话，hr 还要面对各种各样的面试安排，入职接待等等。花在看你简历的时间就会变少。\n\n现在想想，如果我二月底三月初就投了，那可能会多一些面试机会。\n\n在我从四月份开始海投之后，我就一直等消息。投了一共四十家公司左右吧，有收到一些笔试的机会，但大部分都石沉大海，连简历被看的机会都没有。\n\n## 如果有内推的话，可以尽量找内推。\n\n这里要说一下内推这件事，内推怎么看待呢，我觉得是，肯定是有用的，但其实用处没有想象中那么大。首先就算你是内推的，该面试还是面试。大部分公司对于内推，都是免去简历筛选，直通笔试，很少有公司能免笔试。所以其实该走的流程你还是要走。\n\n但是呢，我在四月份才进行海投，这个时间其实已经非常晚了，再加上我的学校其实并不算非常的好，只是一个双非本科。没有内推，导致了很多简历都石沉大海。也不是说有内推就一定有笔试/面试机会把，只能说机会会多一点。而且内推还有个好处就是会优先处理，各种流程上可能会短一些。比如说微软，我 3.26 号得到了笔试的机会，给了 3.26-3.28 这三天任两个小时内做完，当天晚上就完成了笔试，然后等到 4.12 才被发起面试，说 4.19 面试，笔试到面试中间间隔了三个星期。同时我知道的跟我同批完成笔试的，有一些 4.7 号就面试了，短短一个星期。\n\n在得到一些公司的笔试机会后，我开始有一段时间连续做笔试。这时候我才发现我自己对于算法知识上的缺失。\n\n## 尽量早点刷 LeetCode。\n\n其实我从去年开学 10 月份左右就开始准备了，会上牛客网看一些面经之类的东西。然后看面经有不懂的地方会去总结。但是等到真正投简历，真正笔试的时候才发现，算法真的很重要。算法这个东西的重要程度，大概是怎样的呢。\n\n首先笔试会考算法，一般是两个小时完成四道题，或者一个小时完成两道题，差不多平均半个小时一道题的样子。然后难度的话，一般四道题的卷子会有一道 LeetCode 上 Easy 难度的题，两道 Medium 的题，一道 Hard 题；两道题的卷子一般是两道 Medium 的题，也有一些是一道 Medium 一道 Hard。一般四道题做出来三道左右就比较稳，不过也要看排名，看别人的做题情况。\n\n面试相对来说会简单一些，因为其实面试给你的时间并不是很多，前面会问你一些项目相关的内容和八股文，而面试一般在一个小时以内把，给你做题的时间，可能一道题最多给你三十分钟左右把。面试一般是 Easy 和 Medium 居多，少数会出 Hard。\n\n刷题时间的话最好提前三个月开始刷题，如果你是打算冲提前批的话，就拿春招来说，想 1、2 月份就开始投简历的话，那么 9 月份就制定刷题计划是比较合理的。刷题量的话我也不好说，因为我也没怎么刷题 😭(春招犯下的最大错误)。据说能达到 Easy 题和 Medium 题能 10 秒内看出思路就差不多了(一些大佬说的)。\n\n刷题可以在 LeetCode 上刷，上面的题比较全，然后是针对某个公司针对性的刷题的话，可以看一下 CodeTop 这个网站，也是我今年春招才知道的一个网站。书籍的话，我看过比较好的是《labuladong 的算法小抄》，上面有一些题型的总结，原来作者在 LeetCode 上的一些题解，作者把他们总结到一起，作为 Github 上的一个项目，后来这个项目比较火，这个作者就直接出书了。然后还可以看看《剑指 Offer》《编程之美》《程序员面试金典》，《剑指 Offer》这本书也比较值得推荐，上面的题都比较经典，作者是微软的一个工程师。然后《编程之美》这本书上面也是微软的一些面试题型。《程序员面试金典》这本书就相对来说大本一些(贵很多)，上面的题比较多也比较全(这本书也是女朋友给我买的生日礼物)。\n\n刷题顺序据一些大佬说，先从树开始刷，因为跟树相关的题都比较套路。然后一些板块无非就是动态规划、回溯法、二分查找、哈希表、BFS 和 DFS、数据结构。这一些是重点考察的对象。数据结构无非就是，我前面提到的树，还有栈和队列，链表。少数情况下会考察堆和图。堆和图应该只用掌握基本的算法就行，比如堆就是堆排序，节点如何下沉或者上浮。图就是 BFS 和 DFS，少少数情况下考察 Dijkstra 算法。\n\n总的来说，在整个面试过程中，算法绝对是非常重要的一环，面试无非就是，算法+八股文+项目。算法要是不行的话，首先笔试关过不了，其次就算笔试过了，或者免去笔试直接得到了面试机会，你前面八股文、项目如果不是回答的非常出色的话，你算法写不出来，还是过不了面试。所以真的要重视算法，尽量在你想投递简历的时间提前三个月开始刷题，并且要有一个长期的刷题计划，比如每天要刷多少道，Easy、Medium、Hard 比例是多少，要刷什么类型的题，不要三天打鱼两天晒网。\n\n从 3.22 号开始投递简历，到今天 4.21 号，整整一个月时间，我只收到了两家公司的面试。一家是腾讯中的微信，前面有说到，然后另一家是微软。一共是三次面试机会，不多，其中微软是两轮平行面。在面试过程中，我又发现了我对于八股文知识的缺失。\n\n## 尽量往深处了解。\n\n之前也说到从 10 月份就开始准备春招，但那段时间主要是看面经来学习，这就导致了一个问题，我了解的东西看似很多，但其实都不是很深入。比如说微信面试官问我，进程的通信方式，我看过面经所以记得有消息队列，共享内存等等，但是面试官一旦深入问我，我就答不上来了。面完微信后去了解才知道，比如消息队列，无非就是内核中的一个链表，每个节点都有一个标识符。再比如，Mysql 索引为什么使用 B+树而不是 B 树或者 AVL 树呢，了解了 B+树的底层后才知道说，B+树其实树的高度会矮一些，并且查询效率比较平均。\n\n而我之前呢，是处于一种，知道 Mysql 索引使用 B+树(当然也有哈希索引等等)，但是不知道为什么使用 B+树这种状态，就了解的比较浅层。而且其实这种深层的了解，本质上也是在学习算法，底层都是数据结构。比如为什么 Mysql 索引要用树(查范围算法复杂度 O(logn))，为什么 epoll 返回的集合不限长度，只能内存大小有关系(因为返回的是链表的头节点)。\n\n了解一个知识最好把他的底层也了解了，这样面试官问起来才能游刃有余。\n\n前面说了算法，说了八股文，最后再来说说项目。\n\n通常来说，实习生一面会问八股文，然后一面过了在二面才会问项目(然而我两家公司都没过一面 Orz)。项目的话，其实我也没啥心得，我感觉写一个自己比较感兴趣的项目会是一个比较好的选择，现在是一些秒杀项目比较火，我感觉也不一定要写这些，我见过别人写过一个 RPC 的框架，我感觉也是一些比较好的选择。然后二面的话听说一般会问一些项目扩展，比如让你设计一个系统之类的。\n\n说了这么多，最后总结一下我的春招吧。\n\n首先是一开始的方向就不太对，其实 10 月份那一会就应该开始刷题了，算法这块比较薄弱。然后那段时间主要复习是看面经，主要是一些八股文，但看八股文也不深入，大部分处于就是只了解一个名词的程度。然后项目也是二月份才开始做，也确实是太晚了。\n\n整个春招导致的结果就是，投了 40 家公司左右，大部分简历投了石沉大海，大概 10 家左右有笔试机会，只有 2 家有面试机会，分别是腾讯和微软，腾讯是因为免笔试，严格意义上来说只有微软是过了笔试的。两家公司都是一面挂了，目前处于 0offer 的状态。\n\n反正我是对暑期实习不抱有任何希望了，死心了，也承认了自己的平庸。目前想法的话是直接准备秋招提前批把，现在是 4.21 号，秋招提前批大概是 6 月中旬左右吧，也就是还有大概 1 个半月的时间学习。这一个半月的话，算法题是要重点练习的。刷题计划还没想好，但肯定会好好刷题的。\n\n虽然这次春招确实失败了，一个 offer 都没有，但我想这并不是终点。高考是明年的春招，这次顶多是模拟考而已，找到自己的问题并且改正就好了。我还会回来的。\n","source":"_posts/一个四非学生的2021暑期实习春招总结.md","raw":"---\nabbrlink: d59abd41\ndate: 2021-04-21\n---\n此时是 2021.4.21，大三下学期的第八周，距离我开始春招正好满一个月。\n\n我现在还是印象非常深刻，非常记得 2021.3.22 号这天发生了什么。\n\n那天我把项目，一个即时通信系统给写完了，然后把文案发给女朋友，女朋友用 figma 找了一个简历的模版，然后她写了一个我感觉排版上挺不错的简历。这里十分感谢女朋友。\n\n然后就开始了我长达一个月的春招。一开始只投了一些广州的公司，并且想法还是只投大公司，小公司只拿来练手。\n\n包括位于广州的腾讯微信，虎牙，三七互娱等等。\n\n先说说微信把，比较幸运的是，投了微信没多久就发起了面试，得益于腾讯的制度，腾讯的制度是要么三个工作日内，要么六个工作日内会发起面试。这时的我以为得到一个面试机会是非常容易的，一个月后的我却没想到其实这已经是巅峰了。\n\n微信发起了面试约在了一周后的星期一晚上，平台是腾讯会议。这期间还跟女朋友吵了一架。\n\n我准备了一个星期的面试，这个时候的我主要专注在项目上。这个时候的我还没有想到未来的一个月我会多痛苦。\n\n结果真正发起面试的时候，问的大部分都是八股文。我记得我数据库的部分很多都没有打上来，比如聚集索引，这个名词我从来没有听说过。然后还问了多进程的通信方式，我知道有管道、命名管道、消息队列、共享内存这些，但是一问起底层来我就不知道原理。\n\n最后是两道题，一道题是双向链表插入和删除，这道题比较简单，做出来了但是做的时间比较长；另一道题是给一个完全二叉树，返回节点数，要求时间复杂度小于 O(n)，这道题没有想出来。\n\n然后其实当时心态真的我也不知道为什么这么乐观 😢 觉得自己会过，然后第二天下午去腾讯校招官网查进度，挂了。\n\n当时其实是抱着学习的心态去面试的，但是面试挂了，其实说到底还是有点不甘心的把。\n\n之后的我变得非常焦虑，开始各种公司都投。腾讯面完后时间是 2021.3.30。也就是说我从四月份才开始海投。\n\n这里就是春招犯的第一个错误了：投的时间太晚了。\n\n春招的战线其实很长，从过年前到四月底。春、秋招又分提前批和正式批。春招因为我亲身经历过，比较了解，一般提前批是一月初到二月中旬这段时间，而正式批是 2 月中下旬开始，到 4 月中旬。\n\n## 尽量早投。\n\n当然晚投也有好处，那就是准备会充分一点。\n\n但问题在于，headcount(hc)，也就是名额。hc 是一定的，有一些岗位，一旦招够人了就不招了。你越晚投递简历，就意味着名额越少。而名额越少，意味着对你的要求也会变高。与此同时，越晚投递，我感觉 hr 的处理效率也会变慢，不知道对不对。因为你早投的话，hr 要处理只有简历，但是你晚投递的话，hr 还要面对各种各样的面试安排，入职接待等等。花在看你简历的时间就会变少。\n\n现在想想，如果我二月底三月初就投了，那可能会多一些面试机会。\n\n在我从四月份开始海投之后，我就一直等消息。投了一共四十家公司左右吧，有收到一些笔试的机会，但大部分都石沉大海，连简历被看的机会都没有。\n\n## 如果有内推的话，可以尽量找内推。\n\n这里要说一下内推这件事，内推怎么看待呢，我觉得是，肯定是有用的，但其实用处没有想象中那么大。首先就算你是内推的，该面试还是面试。大部分公司对于内推，都是免去简历筛选，直通笔试，很少有公司能免笔试。所以其实该走的流程你还是要走。\n\n但是呢，我在四月份才进行海投，这个时间其实已经非常晚了，再加上我的学校其实并不算非常的好，只是一个双非本科。没有内推，导致了很多简历都石沉大海。也不是说有内推就一定有笔试/面试机会把，只能说机会会多一点。而且内推还有个好处就是会优先处理，各种流程上可能会短一些。比如说微软，我 3.26 号得到了笔试的机会，给了 3.26-3.28 这三天任两个小时内做完，当天晚上就完成了笔试，然后等到 4.12 才被发起面试，说 4.19 面试，笔试到面试中间间隔了三个星期。同时我知道的跟我同批完成笔试的，有一些 4.7 号就面试了，短短一个星期。\n\n在得到一些公司的笔试机会后，我开始有一段时间连续做笔试。这时候我才发现我自己对于算法知识上的缺失。\n\n## 尽量早点刷 LeetCode。\n\n其实我从去年开学 10 月份左右就开始准备了，会上牛客网看一些面经之类的东西。然后看面经有不懂的地方会去总结。但是等到真正投简历，真正笔试的时候才发现，算法真的很重要。算法这个东西的重要程度，大概是怎样的呢。\n\n首先笔试会考算法，一般是两个小时完成四道题，或者一个小时完成两道题，差不多平均半个小时一道题的样子。然后难度的话，一般四道题的卷子会有一道 LeetCode 上 Easy 难度的题，两道 Medium 的题，一道 Hard 题；两道题的卷子一般是两道 Medium 的题，也有一些是一道 Medium 一道 Hard。一般四道题做出来三道左右就比较稳，不过也要看排名，看别人的做题情况。\n\n面试相对来说会简单一些，因为其实面试给你的时间并不是很多，前面会问你一些项目相关的内容和八股文，而面试一般在一个小时以内把，给你做题的时间，可能一道题最多给你三十分钟左右把。面试一般是 Easy 和 Medium 居多，少数会出 Hard。\n\n刷题时间的话最好提前三个月开始刷题，如果你是打算冲提前批的话，就拿春招来说，想 1、2 月份就开始投简历的话，那么 9 月份就制定刷题计划是比较合理的。刷题量的话我也不好说，因为我也没怎么刷题 😭(春招犯下的最大错误)。据说能达到 Easy 题和 Medium 题能 10 秒内看出思路就差不多了(一些大佬说的)。\n\n刷题可以在 LeetCode 上刷，上面的题比较全，然后是针对某个公司针对性的刷题的话，可以看一下 CodeTop 这个网站，也是我今年春招才知道的一个网站。书籍的话，我看过比较好的是《labuladong 的算法小抄》，上面有一些题型的总结，原来作者在 LeetCode 上的一些题解，作者把他们总结到一起，作为 Github 上的一个项目，后来这个项目比较火，这个作者就直接出书了。然后还可以看看《剑指 Offer》《编程之美》《程序员面试金典》，《剑指 Offer》这本书也比较值得推荐，上面的题都比较经典，作者是微软的一个工程师。然后《编程之美》这本书上面也是微软的一些面试题型。《程序员面试金典》这本书就相对来说大本一些(贵很多)，上面的题比较多也比较全(这本书也是女朋友给我买的生日礼物)。\n\n刷题顺序据一些大佬说，先从树开始刷，因为跟树相关的题都比较套路。然后一些板块无非就是动态规划、回溯法、二分查找、哈希表、BFS 和 DFS、数据结构。这一些是重点考察的对象。数据结构无非就是，我前面提到的树，还有栈和队列，链表。少数情况下会考察堆和图。堆和图应该只用掌握基本的算法就行，比如堆就是堆排序，节点如何下沉或者上浮。图就是 BFS 和 DFS，少少数情况下考察 Dijkstra 算法。\n\n总的来说，在整个面试过程中，算法绝对是非常重要的一环，面试无非就是，算法+八股文+项目。算法要是不行的话，首先笔试关过不了，其次就算笔试过了，或者免去笔试直接得到了面试机会，你前面八股文、项目如果不是回答的非常出色的话，你算法写不出来，还是过不了面试。所以真的要重视算法，尽量在你想投递简历的时间提前三个月开始刷题，并且要有一个长期的刷题计划，比如每天要刷多少道，Easy、Medium、Hard 比例是多少，要刷什么类型的题，不要三天打鱼两天晒网。\n\n从 3.22 号开始投递简历，到今天 4.21 号，整整一个月时间，我只收到了两家公司的面试。一家是腾讯中的微信，前面有说到，然后另一家是微软。一共是三次面试机会，不多，其中微软是两轮平行面。在面试过程中，我又发现了我对于八股文知识的缺失。\n\n## 尽量往深处了解。\n\n之前也说到从 10 月份就开始准备春招，但那段时间主要是看面经来学习，这就导致了一个问题，我了解的东西看似很多，但其实都不是很深入。比如说微信面试官问我，进程的通信方式，我看过面经所以记得有消息队列，共享内存等等，但是面试官一旦深入问我，我就答不上来了。面完微信后去了解才知道，比如消息队列，无非就是内核中的一个链表，每个节点都有一个标识符。再比如，Mysql 索引为什么使用 B+树而不是 B 树或者 AVL 树呢，了解了 B+树的底层后才知道说，B+树其实树的高度会矮一些，并且查询效率比较平均。\n\n而我之前呢，是处于一种，知道 Mysql 索引使用 B+树(当然也有哈希索引等等)，但是不知道为什么使用 B+树这种状态，就了解的比较浅层。而且其实这种深层的了解，本质上也是在学习算法，底层都是数据结构。比如为什么 Mysql 索引要用树(查范围算法复杂度 O(logn))，为什么 epoll 返回的集合不限长度，只能内存大小有关系(因为返回的是链表的头节点)。\n\n了解一个知识最好把他的底层也了解了，这样面试官问起来才能游刃有余。\n\n前面说了算法，说了八股文，最后再来说说项目。\n\n通常来说，实习生一面会问八股文，然后一面过了在二面才会问项目(然而我两家公司都没过一面 Orz)。项目的话，其实我也没啥心得，我感觉写一个自己比较感兴趣的项目会是一个比较好的选择，现在是一些秒杀项目比较火，我感觉也不一定要写这些，我见过别人写过一个 RPC 的框架，我感觉也是一些比较好的选择。然后二面的话听说一般会问一些项目扩展，比如让你设计一个系统之类的。\n\n说了这么多，最后总结一下我的春招吧。\n\n首先是一开始的方向就不太对，其实 10 月份那一会就应该开始刷题了，算法这块比较薄弱。然后那段时间主要复习是看面经，主要是一些八股文，但看八股文也不深入，大部分处于就是只了解一个名词的程度。然后项目也是二月份才开始做，也确实是太晚了。\n\n整个春招导致的结果就是，投了 40 家公司左右，大部分简历投了石沉大海，大概 10 家左右有笔试机会，只有 2 家有面试机会，分别是腾讯和微软，腾讯是因为免笔试，严格意义上来说只有微软是过了笔试的。两家公司都是一面挂了，目前处于 0offer 的状态。\n\n反正我是对暑期实习不抱有任何希望了，死心了，也承认了自己的平庸。目前想法的话是直接准备秋招提前批把，现在是 4.21 号，秋招提前批大概是 6 月中旬左右吧，也就是还有大概 1 个半月的时间学习。这一个半月的话，算法题是要重点练习的。刷题计划还没想好，但肯定会好好刷题的。\n\n虽然这次春招确实失败了，一个 offer 都没有，但我想这并不是终点。高考是明年的春招，这次顶多是模拟考而已，找到自己的问题并且改正就好了。我还会回来的。\n","slug":"一个四非学生的2021暑期实习春招总结","published":1,"updated":"2021-07-19T06:13:07.023Z","title":"一个四非学生的2021暑期实习春招总结","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9f0009jqjybcbq2vf1","content":"<p>此时是 2021.4.21，大三下学期的第八周，距离我开始春招正好满一个月。</p>\n<p>我现在还是印象非常深刻，非常记得 2021.3.22 号这天发生了什么。</p>\n<p>那天我把项目，一个即时通信系统给写完了，然后把文案发给女朋友，女朋友用 figma 找了一个简历的模版，然后她写了一个我感觉排版上挺不错的简历。这里十分感谢女朋友。</p>\n<p>然后就开始了我长达一个月的春招。一开始只投了一些广州的公司，并且想法还是只投大公司，小公司只拿来练手。</p>\n<p>包括位于广州的腾讯微信，虎牙，三七互娱等等。</p>\n<p>先说说微信把，比较幸运的是，投了微信没多久就发起了面试，得益于腾讯的制度，腾讯的制度是要么三个工作日内，要么六个工作日内会发起面试。这时的我以为得到一个面试机会是非常容易的，一个月后的我却没想到其实这已经是巅峰了。</p>\n<p>微信发起了面试约在了一周后的星期一晚上，平台是腾讯会议。这期间还跟女朋友吵了一架。</p>\n<p>我准备了一个星期的面试，这个时候的我主要专注在项目上。这个时候的我还没有想到未来的一个月我会多痛苦。</p>\n<p>结果真正发起面试的时候，问的大部分都是八股文。我记得我数据库的部分很多都没有打上来，比如聚集索引，这个名词我从来没有听说过。然后还问了多进程的通信方式，我知道有管道、命名管道、消息队列、共享内存这些，但是一问起底层来我就不知道原理。</p>\n<p>最后是两道题，一道题是双向链表插入和删除，这道题比较简单，做出来了但是做的时间比较长；另一道题是给一个完全二叉树，返回节点数，要求时间复杂度小于 O(n)，这道题没有想出来。</p>\n<p>然后其实当时心态真的我也不知道为什么这么乐观 😢 觉得自己会过，然后第二天下午去腾讯校招官网查进度，挂了。</p>\n<p>当时其实是抱着学习的心态去面试的，但是面试挂了，其实说到底还是有点不甘心的把。</p>\n<p>之后的我变得非常焦虑，开始各种公司都投。腾讯面完后时间是 2021.3.30。也就是说我从四月份才开始海投。</p>\n<p>这里就是春招犯的第一个错误了：投的时间太晚了。</p>\n<p>春招的战线其实很长，从过年前到四月底。春、秋招又分提前批和正式批。春招因为我亲身经历过，比较了解，一般提前批是一月初到二月中旬这段时间，而正式批是 2 月中下旬开始，到 4 月中旬。</p>\n<h2 id=\"尽量早投。\"><a href=\"#尽量早投。\" class=\"headerlink\" title=\"尽量早投。\"></a>尽量早投。</h2><p>当然晚投也有好处，那就是准备会充分一点。</p>\n<p>但问题在于，headcount(hc)，也就是名额。hc 是一定的，有一些岗位，一旦招够人了就不招了。你越晚投递简历，就意味着名额越少。而名额越少，意味着对你的要求也会变高。与此同时，越晚投递，我感觉 hr 的处理效率也会变慢，不知道对不对。因为你早投的话，hr 要处理只有简历，但是你晚投递的话，hr 还要面对各种各样的面试安排，入职接待等等。花在看你简历的时间就会变少。</p>\n<p>现在想想，如果我二月底三月初就投了，那可能会多一些面试机会。</p>\n<p>在我从四月份开始海投之后，我就一直等消息。投了一共四十家公司左右吧，有收到一些笔试的机会，但大部分都石沉大海，连简历被看的机会都没有。</p>\n<h2 id=\"如果有内推的话，可以尽量找内推。\"><a href=\"#如果有内推的话，可以尽量找内推。\" class=\"headerlink\" title=\"如果有内推的话，可以尽量找内推。\"></a>如果有内推的话，可以尽量找内推。</h2><p>这里要说一下内推这件事，内推怎么看待呢，我觉得是，肯定是有用的，但其实用处没有想象中那么大。首先就算你是内推的，该面试还是面试。大部分公司对于内推，都是免去简历筛选，直通笔试，很少有公司能免笔试。所以其实该走的流程你还是要走。</p>\n<p>但是呢，我在四月份才进行海投，这个时间其实已经非常晚了，再加上我的学校其实并不算非常的好，只是一个双非本科。没有内推，导致了很多简历都石沉大海。也不是说有内推就一定有笔试/面试机会把，只能说机会会多一点。而且内推还有个好处就是会优先处理，各种流程上可能会短一些。比如说微软，我 3.26 号得到了笔试的机会，给了 3.26-3.28 这三天任两个小时内做完，当天晚上就完成了笔试，然后等到 4.12 才被发起面试，说 4.19 面试，笔试到面试中间间隔了三个星期。同时我知道的跟我同批完成笔试的，有一些 4.7 号就面试了，短短一个星期。</p>\n<p>在得到一些公司的笔试机会后，我开始有一段时间连续做笔试。这时候我才发现我自己对于算法知识上的缺失。</p>\n<h2 id=\"尽量早点刷-LeetCode。\"><a href=\"#尽量早点刷-LeetCode。\" class=\"headerlink\" title=\"尽量早点刷 LeetCode。\"></a>尽量早点刷 LeetCode。</h2><p>其实我从去年开学 10 月份左右就开始准备了，会上牛客网看一些面经之类的东西。然后看面经有不懂的地方会去总结。但是等到真正投简历，真正笔试的时候才发现，算法真的很重要。算法这个东西的重要程度，大概是怎样的呢。</p>\n<p>首先笔试会考算法，一般是两个小时完成四道题，或者一个小时完成两道题，差不多平均半个小时一道题的样子。然后难度的话，一般四道题的卷子会有一道 LeetCode 上 Easy 难度的题，两道 Medium 的题，一道 Hard 题；两道题的卷子一般是两道 Medium 的题，也有一些是一道 Medium 一道 Hard。一般四道题做出来三道左右就比较稳，不过也要看排名，看别人的做题情况。</p>\n<p>面试相对来说会简单一些，因为其实面试给你的时间并不是很多，前面会问你一些项目相关的内容和八股文，而面试一般在一个小时以内把，给你做题的时间，可能一道题最多给你三十分钟左右把。面试一般是 Easy 和 Medium 居多，少数会出 Hard。</p>\n<p>刷题时间的话最好提前三个月开始刷题，如果你是打算冲提前批的话，就拿春招来说，想 1、2 月份就开始投简历的话，那么 9 月份就制定刷题计划是比较合理的。刷题量的话我也不好说，因为我也没怎么刷题 😭(春招犯下的最大错误)。据说能达到 Easy 题和 Medium 题能 10 秒内看出思路就差不多了(一些大佬说的)。</p>\n<p>刷题可以在 LeetCode 上刷，上面的题比较全，然后是针对某个公司针对性的刷题的话，可以看一下 CodeTop 这个网站，也是我今年春招才知道的一个网站。书籍的话，我看过比较好的是《labuladong 的算法小抄》，上面有一些题型的总结，原来作者在 LeetCode 上的一些题解，作者把他们总结到一起，作为 Github 上的一个项目，后来这个项目比较火，这个作者就直接出书了。然后还可以看看《剑指 Offer》《编程之美》《程序员面试金典》，《剑指 Offer》这本书也比较值得推荐，上面的题都比较经典，作者是微软的一个工程师。然后《编程之美》这本书上面也是微软的一些面试题型。《程序员面试金典》这本书就相对来说大本一些(贵很多)，上面的题比较多也比较全(这本书也是女朋友给我买的生日礼物)。</p>\n<p>刷题顺序据一些大佬说，先从树开始刷，因为跟树相关的题都比较套路。然后一些板块无非就是动态规划、回溯法、二分查找、哈希表、BFS 和 DFS、数据结构。这一些是重点考察的对象。数据结构无非就是，我前面提到的树，还有栈和队列，链表。少数情况下会考察堆和图。堆和图应该只用掌握基本的算法就行，比如堆就是堆排序，节点如何下沉或者上浮。图就是 BFS 和 DFS，少少数情况下考察 Dijkstra 算法。</p>\n<p>总的来说，在整个面试过程中，算法绝对是非常重要的一环，面试无非就是，算法+八股文+项目。算法要是不行的话，首先笔试关过不了，其次就算笔试过了，或者免去笔试直接得到了面试机会，你前面八股文、项目如果不是回答的非常出色的话，你算法写不出来，还是过不了面试。所以真的要重视算法，尽量在你想投递简历的时间提前三个月开始刷题，并且要有一个长期的刷题计划，比如每天要刷多少道，Easy、Medium、Hard 比例是多少，要刷什么类型的题，不要三天打鱼两天晒网。</p>\n<p>从 3.22 号开始投递简历，到今天 4.21 号，整整一个月时间，我只收到了两家公司的面试。一家是腾讯中的微信，前面有说到，然后另一家是微软。一共是三次面试机会，不多，其中微软是两轮平行面。在面试过程中，我又发现了我对于八股文知识的缺失。</p>\n<h2 id=\"尽量往深处了解。\"><a href=\"#尽量往深处了解。\" class=\"headerlink\" title=\"尽量往深处了解。\"></a>尽量往深处了解。</h2><p>之前也说到从 10 月份就开始准备春招，但那段时间主要是看面经来学习，这就导致了一个问题，我了解的东西看似很多，但其实都不是很深入。比如说微信面试官问我，进程的通信方式，我看过面经所以记得有消息队列，共享内存等等，但是面试官一旦深入问我，我就答不上来了。面完微信后去了解才知道，比如消息队列，无非就是内核中的一个链表，每个节点都有一个标识符。再比如，Mysql 索引为什么使用 B+树而不是 B 树或者 AVL 树呢，了解了 B+树的底层后才知道说，B+树其实树的高度会矮一些，并且查询效率比较平均。</p>\n<p>而我之前呢，是处于一种，知道 Mysql 索引使用 B+树(当然也有哈希索引等等)，但是不知道为什么使用 B+树这种状态，就了解的比较浅层。而且其实这种深层的了解，本质上也是在学习算法，底层都是数据结构。比如为什么 Mysql 索引要用树(查范围算法复杂度 O(logn))，为什么 epoll 返回的集合不限长度，只能内存大小有关系(因为返回的是链表的头节点)。</p>\n<p>了解一个知识最好把他的底层也了解了，这样面试官问起来才能游刃有余。</p>\n<p>前面说了算法，说了八股文，最后再来说说项目。</p>\n<p>通常来说，实习生一面会问八股文，然后一面过了在二面才会问项目(然而我两家公司都没过一面 Orz)。项目的话，其实我也没啥心得，我感觉写一个自己比较感兴趣的项目会是一个比较好的选择，现在是一些秒杀项目比较火，我感觉也不一定要写这些，我见过别人写过一个 RPC 的框架，我感觉也是一些比较好的选择。然后二面的话听说一般会问一些项目扩展，比如让你设计一个系统之类的。</p>\n<p>说了这么多，最后总结一下我的春招吧。</p>\n<p>首先是一开始的方向就不太对，其实 10 月份那一会就应该开始刷题了，算法这块比较薄弱。然后那段时间主要复习是看面经，主要是一些八股文，但看八股文也不深入，大部分处于就是只了解一个名词的程度。然后项目也是二月份才开始做，也确实是太晚了。</p>\n<p>整个春招导致的结果就是，投了 40 家公司左右，大部分简历投了石沉大海，大概 10 家左右有笔试机会，只有 2 家有面试机会，分别是腾讯和微软，腾讯是因为免笔试，严格意义上来说只有微软是过了笔试的。两家公司都是一面挂了，目前处于 0offer 的状态。</p>\n<p>反正我是对暑期实习不抱有任何希望了，死心了，也承认了自己的平庸。目前想法的话是直接准备秋招提前批把，现在是 4.21 号，秋招提前批大概是 6 月中旬左右吧，也就是还有大概 1 个半月的时间学习。这一个半月的话，算法题是要重点练习的。刷题计划还没想好，但肯定会好好刷题的。</p>\n<p>虽然这次春招确实失败了，一个 offer 都没有，但我想这并不是终点。高考是明年的春招，这次顶多是模拟考而已，找到自己的问题并且改正就好了。我还会回来的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>此时是 2021.4.21，大三下学期的第八周，距离我开始春招正好满一个月。</p>\n<p>我现在还是印象非常深刻，非常记得 2021.3.22 号这天发生了什么。</p>\n<p>那天我把项目，一个即时通信系统给写完了，然后把文案发给女朋友，女朋友用 figma 找了一个简历的模版，然后她写了一个我感觉排版上挺不错的简历。这里十分感谢女朋友。</p>\n<p>然后就开始了我长达一个月的春招。一开始只投了一些广州的公司，并且想法还是只投大公司，小公司只拿来练手。</p>\n<p>包括位于广州的腾讯微信，虎牙，三七互娱等等。</p>\n<p>先说说微信把，比较幸运的是，投了微信没多久就发起了面试，得益于腾讯的制度，腾讯的制度是要么三个工作日内，要么六个工作日内会发起面试。这时的我以为得到一个面试机会是非常容易的，一个月后的我却没想到其实这已经是巅峰了。</p>\n<p>微信发起了面试约在了一周后的星期一晚上，平台是腾讯会议。这期间还跟女朋友吵了一架。</p>\n<p>我准备了一个星期的面试，这个时候的我主要专注在项目上。这个时候的我还没有想到未来的一个月我会多痛苦。</p>\n<p>结果真正发起面试的时候，问的大部分都是八股文。我记得我数据库的部分很多都没有打上来，比如聚集索引，这个名词我从来没有听说过。然后还问了多进程的通信方式，我知道有管道、命名管道、消息队列、共享内存这些，但是一问起底层来我就不知道原理。</p>\n<p>最后是两道题，一道题是双向链表插入和删除，这道题比较简单，做出来了但是做的时间比较长；另一道题是给一个完全二叉树，返回节点数，要求时间复杂度小于 O(n)，这道题没有想出来。</p>\n<p>然后其实当时心态真的我也不知道为什么这么乐观 😢 觉得自己会过，然后第二天下午去腾讯校招官网查进度，挂了。</p>\n<p>当时其实是抱着学习的心态去面试的，但是面试挂了，其实说到底还是有点不甘心的把。</p>\n<p>之后的我变得非常焦虑，开始各种公司都投。腾讯面完后时间是 2021.3.30。也就是说我从四月份才开始海投。</p>\n<p>这里就是春招犯的第一个错误了：投的时间太晚了。</p>\n<p>春招的战线其实很长，从过年前到四月底。春、秋招又分提前批和正式批。春招因为我亲身经历过，比较了解，一般提前批是一月初到二月中旬这段时间，而正式批是 2 月中下旬开始，到 4 月中旬。</p>\n<h2 id=\"尽量早投。\"><a href=\"#尽量早投。\" class=\"headerlink\" title=\"尽量早投。\"></a>尽量早投。</h2><p>当然晚投也有好处，那就是准备会充分一点。</p>\n<p>但问题在于，headcount(hc)，也就是名额。hc 是一定的，有一些岗位，一旦招够人了就不招了。你越晚投递简历，就意味着名额越少。而名额越少，意味着对你的要求也会变高。与此同时，越晚投递，我感觉 hr 的处理效率也会变慢，不知道对不对。因为你早投的话，hr 要处理只有简历，但是你晚投递的话，hr 还要面对各种各样的面试安排，入职接待等等。花在看你简历的时间就会变少。</p>\n<p>现在想想，如果我二月底三月初就投了，那可能会多一些面试机会。</p>\n<p>在我从四月份开始海投之后，我就一直等消息。投了一共四十家公司左右吧，有收到一些笔试的机会，但大部分都石沉大海，连简历被看的机会都没有。</p>\n<h2 id=\"如果有内推的话，可以尽量找内推。\"><a href=\"#如果有内推的话，可以尽量找内推。\" class=\"headerlink\" title=\"如果有内推的话，可以尽量找内推。\"></a>如果有内推的话，可以尽量找内推。</h2><p>这里要说一下内推这件事，内推怎么看待呢，我觉得是，肯定是有用的，但其实用处没有想象中那么大。首先就算你是内推的，该面试还是面试。大部分公司对于内推，都是免去简历筛选，直通笔试，很少有公司能免笔试。所以其实该走的流程你还是要走。</p>\n<p>但是呢，我在四月份才进行海投，这个时间其实已经非常晚了，再加上我的学校其实并不算非常的好，只是一个双非本科。没有内推，导致了很多简历都石沉大海。也不是说有内推就一定有笔试/面试机会把，只能说机会会多一点。而且内推还有个好处就是会优先处理，各种流程上可能会短一些。比如说微软，我 3.26 号得到了笔试的机会，给了 3.26-3.28 这三天任两个小时内做完，当天晚上就完成了笔试，然后等到 4.12 才被发起面试，说 4.19 面试，笔试到面试中间间隔了三个星期。同时我知道的跟我同批完成笔试的，有一些 4.7 号就面试了，短短一个星期。</p>\n<p>在得到一些公司的笔试机会后，我开始有一段时间连续做笔试。这时候我才发现我自己对于算法知识上的缺失。</p>\n<h2 id=\"尽量早点刷-LeetCode。\"><a href=\"#尽量早点刷-LeetCode。\" class=\"headerlink\" title=\"尽量早点刷 LeetCode。\"></a>尽量早点刷 LeetCode。</h2><p>其实我从去年开学 10 月份左右就开始准备了，会上牛客网看一些面经之类的东西。然后看面经有不懂的地方会去总结。但是等到真正投简历，真正笔试的时候才发现，算法真的很重要。算法这个东西的重要程度，大概是怎样的呢。</p>\n<p>首先笔试会考算法，一般是两个小时完成四道题，或者一个小时完成两道题，差不多平均半个小时一道题的样子。然后难度的话，一般四道题的卷子会有一道 LeetCode 上 Easy 难度的题，两道 Medium 的题，一道 Hard 题；两道题的卷子一般是两道 Medium 的题，也有一些是一道 Medium 一道 Hard。一般四道题做出来三道左右就比较稳，不过也要看排名，看别人的做题情况。</p>\n<p>面试相对来说会简单一些，因为其实面试给你的时间并不是很多，前面会问你一些项目相关的内容和八股文，而面试一般在一个小时以内把，给你做题的时间，可能一道题最多给你三十分钟左右把。面试一般是 Easy 和 Medium 居多，少数会出 Hard。</p>\n<p>刷题时间的话最好提前三个月开始刷题，如果你是打算冲提前批的话，就拿春招来说，想 1、2 月份就开始投简历的话，那么 9 月份就制定刷题计划是比较合理的。刷题量的话我也不好说，因为我也没怎么刷题 😭(春招犯下的最大错误)。据说能达到 Easy 题和 Medium 题能 10 秒内看出思路就差不多了(一些大佬说的)。</p>\n<p>刷题可以在 LeetCode 上刷，上面的题比较全，然后是针对某个公司针对性的刷题的话，可以看一下 CodeTop 这个网站，也是我今年春招才知道的一个网站。书籍的话，我看过比较好的是《labuladong 的算法小抄》，上面有一些题型的总结，原来作者在 LeetCode 上的一些题解，作者把他们总结到一起，作为 Github 上的一个项目，后来这个项目比较火，这个作者就直接出书了。然后还可以看看《剑指 Offer》《编程之美》《程序员面试金典》，《剑指 Offer》这本书也比较值得推荐，上面的题都比较经典，作者是微软的一个工程师。然后《编程之美》这本书上面也是微软的一些面试题型。《程序员面试金典》这本书就相对来说大本一些(贵很多)，上面的题比较多也比较全(这本书也是女朋友给我买的生日礼物)。</p>\n<p>刷题顺序据一些大佬说，先从树开始刷，因为跟树相关的题都比较套路。然后一些板块无非就是动态规划、回溯法、二分查找、哈希表、BFS 和 DFS、数据结构。这一些是重点考察的对象。数据结构无非就是，我前面提到的树，还有栈和队列，链表。少数情况下会考察堆和图。堆和图应该只用掌握基本的算法就行，比如堆就是堆排序，节点如何下沉或者上浮。图就是 BFS 和 DFS，少少数情况下考察 Dijkstra 算法。</p>\n<p>总的来说，在整个面试过程中，算法绝对是非常重要的一环，面试无非就是，算法+八股文+项目。算法要是不行的话，首先笔试关过不了，其次就算笔试过了，或者免去笔试直接得到了面试机会，你前面八股文、项目如果不是回答的非常出色的话，你算法写不出来，还是过不了面试。所以真的要重视算法，尽量在你想投递简历的时间提前三个月开始刷题，并且要有一个长期的刷题计划，比如每天要刷多少道，Easy、Medium、Hard 比例是多少，要刷什么类型的题，不要三天打鱼两天晒网。</p>\n<p>从 3.22 号开始投递简历，到今天 4.21 号，整整一个月时间，我只收到了两家公司的面试。一家是腾讯中的微信，前面有说到，然后另一家是微软。一共是三次面试机会，不多，其中微软是两轮平行面。在面试过程中，我又发现了我对于八股文知识的缺失。</p>\n<h2 id=\"尽量往深处了解。\"><a href=\"#尽量往深处了解。\" class=\"headerlink\" title=\"尽量往深处了解。\"></a>尽量往深处了解。</h2><p>之前也说到从 10 月份就开始准备春招，但那段时间主要是看面经来学习，这就导致了一个问题，我了解的东西看似很多，但其实都不是很深入。比如说微信面试官问我，进程的通信方式，我看过面经所以记得有消息队列，共享内存等等，但是面试官一旦深入问我，我就答不上来了。面完微信后去了解才知道，比如消息队列，无非就是内核中的一个链表，每个节点都有一个标识符。再比如，Mysql 索引为什么使用 B+树而不是 B 树或者 AVL 树呢，了解了 B+树的底层后才知道说，B+树其实树的高度会矮一些，并且查询效率比较平均。</p>\n<p>而我之前呢，是处于一种，知道 Mysql 索引使用 B+树(当然也有哈希索引等等)，但是不知道为什么使用 B+树这种状态，就了解的比较浅层。而且其实这种深层的了解，本质上也是在学习算法，底层都是数据结构。比如为什么 Mysql 索引要用树(查范围算法复杂度 O(logn))，为什么 epoll 返回的集合不限长度，只能内存大小有关系(因为返回的是链表的头节点)。</p>\n<p>了解一个知识最好把他的底层也了解了，这样面试官问起来才能游刃有余。</p>\n<p>前面说了算法，说了八股文，最后再来说说项目。</p>\n<p>通常来说，实习生一面会问八股文，然后一面过了在二面才会问项目(然而我两家公司都没过一面 Orz)。项目的话，其实我也没啥心得，我感觉写一个自己比较感兴趣的项目会是一个比较好的选择，现在是一些秒杀项目比较火，我感觉也不一定要写这些，我见过别人写过一个 RPC 的框架，我感觉也是一些比较好的选择。然后二面的话听说一般会问一些项目扩展，比如让你设计一个系统之类的。</p>\n<p>说了这么多，最后总结一下我的春招吧。</p>\n<p>首先是一开始的方向就不太对，其实 10 月份那一会就应该开始刷题了，算法这块比较薄弱。然后那段时间主要复习是看面经，主要是一些八股文，但看八股文也不深入，大部分处于就是只了解一个名词的程度。然后项目也是二月份才开始做，也确实是太晚了。</p>\n<p>整个春招导致的结果就是，投了 40 家公司左右，大部分简历投了石沉大海，大概 10 家左右有笔试机会，只有 2 家有面试机会，分别是腾讯和微软，腾讯是因为免笔试，严格意义上来说只有微软是过了笔试的。两家公司都是一面挂了，目前处于 0offer 的状态。</p>\n<p>反正我是对暑期实习不抱有任何希望了，死心了，也承认了自己的平庸。目前想法的话是直接准备秋招提前批把，现在是 4.21 号，秋招提前批大概是 6 月中旬左右吧，也就是还有大概 1 个半月的时间学习。这一个半月的话，算法题是要重点练习的。刷题计划还没想好，但肯定会好好刷题的。</p>\n<p>虽然这次春招确实失败了，一个 offer 都没有，但我想这并不是终点。高考是明年的春招，这次顶多是模拟考而已，找到自己的问题并且改正就好了。我还会回来的。</p>\n"},{"abbrlink":"4b69a11a","date":"2019-10-26T16:00:00.000Z","_content":"突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。\n\n他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。\n\n当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。\n\n我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。\n\n首先让我们理清一下思路。\n\n爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬\n\n我接下来会一一解释其中如何操作。\n\n首先一个大体的爬取思路是：\n\n模拟登录\n\n获取奶茶店铺总数\n\n一页页去找商家\n\n根据 id 去获取商家地址\n\n爬取\n首先是模拟登录部分\n首先先输入手机号码，然后让饿了吗发送手机验证码\n\n这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码\n\n有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。\n\n查看手机，输入手机短信上的验证码。\n\n模拟登录部分就是这样了。\n\n获取奶茶店铺总数\n为什么要获取奶茶店铺总数呢？\n\n因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。\n\n用 chrome 获取接口，post 即可\n\n一页页去找商家\n观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家\n\n所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数\n\n获取商家地址\n商家的地址有点特别，是要点开具体的商家，才能看到地址\n\n而饿了吗后台给每个商家分配了一个单独的商家 id\n\n这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id\n\n所以我们前面存储商家的 id，用来获取商家地址\n\n最后把商家 id 删除即可\n\n解析\n解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。\n\n一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。\n\n另外，还有正则化，css 解析器等等。\n\n存储\n存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。\n\n另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？\n\n去重\n去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。\n\n数据库\n内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。\n\n因为有内存回收机制，这样内存绝对够用。\n\n当然我这里没有用过数据库。\n\n代码优化\n我在爬取过程中发现，爬取速度异常的慢 QAQ\n\n提供几种加速的思路。\n\n多线程\n线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。\n\n多进程\n进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。\n\n分布式\n分布式我没接触过，但是分布式可以更加快的加速爬取的速度。\n\n分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。\n\n每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。\n\n线程<进程<电脑，所以速度上多线程<多进程<分布式。\n\n防反爬\n我在爬取的时候，深受反爬制度的打击。\n\n好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。\n\n解决方式：\n\n封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。\n\n获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。\n\n一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。\n\n它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。\n\n模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。\n\n也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。\n\n原文以及代码见:[https://github.com/xilou31/eLeMa_Crawler](https://github.com/xilou31/eLeMa_Crawler)\n","source":"_posts/关于爬虫的一点经验.md","raw":"---\nabbrlink: 4b69a11a\ndate: 2019-10-27\n---\n突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。\n\n他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。\n\n当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。\n\n我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。\n\n首先让我们理清一下思路。\n\n爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬\n\n我接下来会一一解释其中如何操作。\n\n首先一个大体的爬取思路是：\n\n模拟登录\n\n获取奶茶店铺总数\n\n一页页去找商家\n\n根据 id 去获取商家地址\n\n爬取\n首先是模拟登录部分\n首先先输入手机号码，然后让饿了吗发送手机验证码\n\n这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码\n\n有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。\n\n查看手机，输入手机短信上的验证码。\n\n模拟登录部分就是这样了。\n\n获取奶茶店铺总数\n为什么要获取奶茶店铺总数呢？\n\n因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。\n\n用 chrome 获取接口，post 即可\n\n一页页去找商家\n观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家\n\n所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数\n\n获取商家地址\n商家的地址有点特别，是要点开具体的商家，才能看到地址\n\n而饿了吗后台给每个商家分配了一个单独的商家 id\n\n这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id\n\n所以我们前面存储商家的 id，用来获取商家地址\n\n最后把商家 id 删除即可\n\n解析\n解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。\n\n一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。\n\n另外，还有正则化，css 解析器等等。\n\n存储\n存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。\n\n另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？\n\n去重\n去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。\n\n数据库\n内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。\n\n因为有内存回收机制，这样内存绝对够用。\n\n当然我这里没有用过数据库。\n\n代码优化\n我在爬取过程中发现，爬取速度异常的慢 QAQ\n\n提供几种加速的思路。\n\n多线程\n线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。\n\n多进程\n进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。\n\n分布式\n分布式我没接触过，但是分布式可以更加快的加速爬取的速度。\n\n分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。\n\n每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。\n\n线程<进程<电脑，所以速度上多线程<多进程<分布式。\n\n防反爬\n我在爬取的时候，深受反爬制度的打击。\n\n好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。\n\n解决方式：\n\n封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。\n\n获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。\n\n一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。\n\n它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。\n\n模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。\n\n也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。\n\n原文以及代码见:[https://github.com/xilou31/eLeMa_Crawler](https://github.com/xilou31/eLeMa_Crawler)\n","slug":"关于爬虫的一点经验","published":1,"updated":"2021-07-19T06:13:07.024Z","title":"关于爬虫的一点经验","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9g000bjqjy7xpr4d67","content":"<p>突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。</p>\n<p>他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。</p>\n<p>当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。</p>\n<p>我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。</p>\n<p>首先让我们理清一下思路。</p>\n<p>爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬</p>\n<p>我接下来会一一解释其中如何操作。</p>\n<p>首先一个大体的爬取思路是：</p>\n<p>模拟登录</p>\n<p>获取奶茶店铺总数</p>\n<p>一页页去找商家</p>\n<p>根据 id 去获取商家地址</p>\n<p>爬取<br>首先是模拟登录部分<br>首先先输入手机号码，然后让饿了吗发送手机验证码</p>\n<p>这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码</p>\n<p>有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。</p>\n<p>查看手机，输入手机短信上的验证码。</p>\n<p>模拟登录部分就是这样了。</p>\n<p>获取奶茶店铺总数<br>为什么要获取奶茶店铺总数呢？</p>\n<p>因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。</p>\n<p>用 chrome 获取接口，post 即可</p>\n<p>一页页去找商家<br>观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家</p>\n<p>所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数</p>\n<p>获取商家地址<br>商家的地址有点特别，是要点开具体的商家，才能看到地址</p>\n<p>而饿了吗后台给每个商家分配了一个单独的商家 id</p>\n<p>这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id</p>\n<p>所以我们前面存储商家的 id，用来获取商家地址</p>\n<p>最后把商家 id 删除即可</p>\n<p>解析<br>解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。</p>\n<p>一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。</p>\n<p>另外，还有正则化，css 解析器等等。</p>\n<p>存储<br>存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。</p>\n<p>另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？</p>\n<p>去重<br>去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。</p>\n<p>数据库<br>内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。</p>\n<p>因为有内存回收机制，这样内存绝对够用。</p>\n<p>当然我这里没有用过数据库。</p>\n<p>代码优化<br>我在爬取过程中发现，爬取速度异常的慢 QAQ</p>\n<p>提供几种加速的思路。</p>\n<p>多线程<br>线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。</p>\n<p>多进程<br>进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。</p>\n<p>分布式<br>分布式我没接触过，但是分布式可以更加快的加速爬取的速度。</p>\n<p>分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。</p>\n<p>每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。</p>\n<p>线程&lt;进程&lt;电脑，所以速度上多线程&lt;多进程&lt;分布式。</p>\n<p>防反爬<br>我在爬取的时候，深受反爬制度的打击。</p>\n<p>好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。</p>\n<p>解决方式：</p>\n<p>封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。</p>\n<p>获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。</p>\n<p>一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。</p>\n<p>它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。</p>\n<p>模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。</p>\n<p>也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。</p>\n<p>原文以及代码见:<a href=\"https://github.com/xilou31/eLeMa_Crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/xilou31/eLeMa_Crawler</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。</p>\n<p>他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。</p>\n<p>当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。</p>\n<p>我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。</p>\n<p>首先让我们理清一下思路。</p>\n<p>爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬</p>\n<p>我接下来会一一解释其中如何操作。</p>\n<p>首先一个大体的爬取思路是：</p>\n<p>模拟登录</p>\n<p>获取奶茶店铺总数</p>\n<p>一页页去找商家</p>\n<p>根据 id 去获取商家地址</p>\n<p>爬取<br>首先是模拟登录部分<br>首先先输入手机号码，然后让饿了吗发送手机验证码</p>\n<p>这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码</p>\n<p>有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。</p>\n<p>查看手机，输入手机短信上的验证码。</p>\n<p>模拟登录部分就是这样了。</p>\n<p>获取奶茶店铺总数<br>为什么要获取奶茶店铺总数呢？</p>\n<p>因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。</p>\n<p>用 chrome 获取接口，post 即可</p>\n<p>一页页去找商家<br>观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家</p>\n<p>所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数</p>\n<p>获取商家地址<br>商家的地址有点特别，是要点开具体的商家，才能看到地址</p>\n<p>而饿了吗后台给每个商家分配了一个单独的商家 id</p>\n<p>这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id</p>\n<p>所以我们前面存储商家的 id，用来获取商家地址</p>\n<p>最后把商家 id 删除即可</p>\n<p>解析<br>解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。</p>\n<p>一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。</p>\n<p>另外，还有正则化，css 解析器等等。</p>\n<p>存储<br>存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。</p>\n<p>另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？</p>\n<p>去重<br>去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。</p>\n<p>数据库<br>内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。</p>\n<p>因为有内存回收机制，这样内存绝对够用。</p>\n<p>当然我这里没有用过数据库。</p>\n<p>代码优化<br>我在爬取过程中发现，爬取速度异常的慢 QAQ</p>\n<p>提供几种加速的思路。</p>\n<p>多线程<br>线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。</p>\n<p>多进程<br>进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。</p>\n<p>分布式<br>分布式我没接触过，但是分布式可以更加快的加速爬取的速度。</p>\n<p>分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。</p>\n<p>每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。</p>\n<p>线程&lt;进程&lt;电脑，所以速度上多线程&lt;多进程&lt;分布式。</p>\n<p>防反爬<br>我在爬取的时候，深受反爬制度的打击。</p>\n<p>好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。</p>\n<p>解决方式：</p>\n<p>封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。</p>\n<p>获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。</p>\n<p>一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。</p>\n<p>它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。</p>\n<p>模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。</p>\n<p>也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。</p>\n<p>原文以及代码见:<a href=\"https://github.com/xilou31/eLeMa_Crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/xilou31/eLeMa_Crawler</a></p>\n"},{"abbrlink":"76ccdb2e","date":"2021-06-08T16:00:00.000Z","_content":"## 项目背景\n\n原 2020 年**开源供应链点亮计划**有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。\n\n原项目已实现**图片、群聊、附件、Ding**这些功能。\n\n但其中 puppet 有部分接口没有完全实现功能。\n\n现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。\n\n另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。\n\n## 方案描述\n\n#### 功能\n\n- [ ] 富文本\n- [ ] 群名片\n- [ ] 消息卡片\n- [ ] 日历\n- [ ] 会议室\n- [ ] 视频会议\n- [ ] 邮箱\n- [ ] 打卡\n\n#### 非功能\n\n- [ ] 完善飞书 puppet 的使用文档\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.15\n  - 阅读 wechaty-puppet-lark 源代码，学习 TypeScript\n- 完善富文本等功能对应的 puppet 接口\n  - 7.15 - 8.7\n  - 阅读飞书开放平台文档，熟悉飞书服务端 API\n  - 完善飞书 puppet 的接口\n- 完成富文本等功能对应的订阅事件\n  - 8.7 - 8.15\n  - 在 ding-dong-bot.ts 中增加相应的代码\n- 重构代码\n  - 8.15 - 8.23\n- 完善飞书 puppet 使用文档\n  - 8.22 - 8.30\n\n## 参考资料\n\n[飞书开放平台](https://open.feishu.cn/document/)\n[wechaty-puppet-lark](https://github.com/wechaty/wechaty-puppet-lark)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初](https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中](https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末](https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/)\n","source":"_posts/基于开放 API 封装 Wechaty 接口下的飞书聊天机器人.md","raw":"---\nabbrlink: 76ccdb2e\ndate: 2021-06-09\n---\n## 项目背景\n\n原 2020 年**开源供应链点亮计划**有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。\n\n原项目已实现**图片、群聊、附件、Ding**这些功能。\n\n但其中 puppet 有部分接口没有完全实现功能。\n\n现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。\n\n另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。\n\n## 方案描述\n\n#### 功能\n\n- [ ] 富文本\n- [ ] 群名片\n- [ ] 消息卡片\n- [ ] 日历\n- [ ] 会议室\n- [ ] 视频会议\n- [ ] 邮箱\n- [ ] 打卡\n\n#### 非功能\n\n- [ ] 完善飞书 puppet 的使用文档\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.15\n  - 阅读 wechaty-puppet-lark 源代码，学习 TypeScript\n- 完善富文本等功能对应的 puppet 接口\n  - 7.15 - 8.7\n  - 阅读飞书开放平台文档，熟悉飞书服务端 API\n  - 完善飞书 puppet 的接口\n- 完成富文本等功能对应的订阅事件\n  - 8.7 - 8.15\n  - 在 ding-dong-bot.ts 中增加相应的代码\n- 重构代码\n  - 8.15 - 8.23\n- 完善飞书 puppet 使用文档\n  - 8.22 - 8.30\n\n## 参考资料\n\n[飞书开放平台](https://open.feishu.cn/document/)\n[wechaty-puppet-lark](https://github.com/wechaty/wechaty-puppet-lark)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初](https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中](https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末](https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/)\n","slug":"基于开放 API 封装 Wechaty 接口下的飞书聊天机器人","published":1,"updated":"2021-07-19T06:13:07.024Z","title":"基于开放 API 封装 Wechaty 接口下的飞书聊天机器人","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9h000djqjydmpwcxt2","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>原 2020 年<strong>开源供应链点亮计划</strong>有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。</p>\n<p>原项目已实现<strong>图片、群聊、附件、Ding</strong>这些功能。</p>\n<p>但其中 puppet 有部分接口没有完全实现功能。</p>\n<p>现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。</p>\n<p>另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li>[ ] 富文本</li>\n<li>[ ] 群名片</li>\n<li>[ ] 消息卡片</li>\n<li>[ ] 日历</li>\n<li>[ ] 会议室</li>\n<li>[ ] 视频会议</li>\n<li>[ ] 邮箱</li>\n<li>[ ] 打卡</li>\n</ul>\n<h4 id=\"非功能\"><a href=\"#非功能\" class=\"headerlink\" title=\"非功能\"></a>非功能</h4><ul>\n<li>[ ] 完善飞书 puppet 的使用文档</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.15</li>\n<li>阅读 wechaty-puppet-lark 源代码，学习 TypeScript</li>\n</ul>\n</li>\n<li>完善富文本等功能对应的 puppet 接口<ul>\n<li>7.15 - 8.7</li>\n<li>阅读飞书开放平台文档，熟悉飞书服务端 API</li>\n<li>完善飞书 puppet 的接口</li>\n</ul>\n</li>\n<li>完成富文本等功能对应的订阅事件<ul>\n<li>8.7 - 8.15</li>\n<li>在 ding-dong-bot.ts 中增加相应的代码</li>\n</ul>\n</li>\n<li>重构代码<ul>\n<li>8.15 - 8.23</li>\n</ul>\n</li>\n<li>完善飞书 puppet 使用文档<ul>\n<li>8.22 - 8.30</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://open.feishu.cn/document/\" target=\"_blank\" rel=\"noopener\">飞书开放平台</a><br><a href=\"https://github.com/wechaty/wechaty-puppet-lark\" target=\"_blank\" rel=\"noopener\">wechaty-puppet-lark</a><br><a href=\"https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初</a><br><a href=\"https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中</a><br><a href=\"https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>原 2020 年<strong>开源供应链点亮计划</strong>有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。</p>\n<p>原项目已实现<strong>图片、群聊、附件、Ding</strong>这些功能。</p>\n<p>但其中 puppet 有部分接口没有完全实现功能。</p>\n<p>现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。</p>\n<p>另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li>[ ] 富文本</li>\n<li>[ ] 群名片</li>\n<li>[ ] 消息卡片</li>\n<li>[ ] 日历</li>\n<li>[ ] 会议室</li>\n<li>[ ] 视频会议</li>\n<li>[ ] 邮箱</li>\n<li>[ ] 打卡</li>\n</ul>\n<h4 id=\"非功能\"><a href=\"#非功能\" class=\"headerlink\" title=\"非功能\"></a>非功能</h4><ul>\n<li>[ ] 完善飞书 puppet 的使用文档</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.15</li>\n<li>阅读 wechaty-puppet-lark 源代码，学习 TypeScript</li>\n</ul>\n</li>\n<li>完善富文本等功能对应的 puppet 接口<ul>\n<li>7.15 - 8.7</li>\n<li>阅读飞书开放平台文档，熟悉飞书服务端 API</li>\n<li>完善飞书 puppet 的接口</li>\n</ul>\n</li>\n<li>完成富文本等功能对应的订阅事件<ul>\n<li>8.7 - 8.15</li>\n<li>在 ding-dong-bot.ts 中增加相应的代码</li>\n</ul>\n</li>\n<li>重构代码<ul>\n<li>8.15 - 8.23</li>\n</ul>\n</li>\n<li>完善飞书 puppet 使用文档<ul>\n<li>8.22 - 8.30</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://open.feishu.cn/document/\" target=\"_blank\" rel=\"noopener\">飞书开放平台</a><br><a href=\"https://github.com/wechaty/wechaty-puppet-lark\" target=\"_blank\" rel=\"noopener\">wechaty-puppet-lark</a><br><a href=\"https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初</a><br><a href=\"https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中</a><br><a href=\"https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末</a></p>\n"},{"abbrlink":"1842b797","date":"2021-06-04T16:00:00.000Z","_content":"# 大数据概念理解\n\n## 什么是大数据？\n\n大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。\n\n主要解决：海量数据的存储和海量数据的分析计算问题。\n\n按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。\n\n换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T\n\n## 大数据特征\n\nVolume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。\n\nVelocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。\n\nVariety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。\n\nValue（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。\n\n## 大数据应用场景？\n\n物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。\n\n零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。\n\n旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。\n\n商品广告推荐：给用户推荐可能喜欢的商品。\n\n保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。\n\n金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。\n\n房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。\n\n## 大数据有哪些部分组成？\n\n### 大数据平台运维\n\n平台软件(hadoop、spark、flink、kafka)的安装和维护\n​\n\n关于平台的性能的监测\n​\n\n平台的性能的调优\n\n### 数据仓库\n\nETL 工程师：数据清洗\n​\n\nHive 工程师:数据分析\n\n### 数据挖掘\n\n算法、建模\n\n### 可视化\n\necharts、kylin、kibina\n​\n\n# Hadoop 深入理解\n\n## 什么是 Hadoop?\n\nHadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。\n​\n\n有三个组成：\n​\n\n1. hdfs:分布式的文件系统，主要解决大数据的储存问题\n\n​\n\n2. mapreduce:分布式的批量计算\n\n​\n\n3. yarn:分布式的资源管理组件\n\n​\n\n## Hadoop 的发展和发行版本？\n\n#### ​\n\n### Hadoop 发展历史\n\nLucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎\n​\n\n2001 年年底成为 Apache 基金会的一个子项目\n​\n\n对于大数量的场景，Lucene 面对与 Google 同样的困难\n​\n\n学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch\n​\n\n可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)\n​\n\nGFS —>HDFS\nMap-Reduce —>MR\nBigTable —>Hbase\n​\n\n2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升\n​\n\n2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中\n​\n\n名字来源于 Doug Cutting 儿子的玩具大象\n​\n\nHadoop 就此诞生并迅速发展，标志这云计算时代来临\n\n### Hadoop 三大发行版本\n\nHadoop 三大发行版本：Apache、Cloudera、Hortonworks。\n​\n\nApache 版本最原始（最基础）的版本，对于入门学习最好。\n​\n\nCloudera 在大型互联网企业中用的较多。\n​\n\nHortonworks 文档较好。\n\n## Hadoop 的优点？\n\n1. 高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。\n\n​\n\n2. 高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。\n\n​\n\n3. 高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。\n\n​\n\n4. 高容错性：能够自动将失败的任务重新分配。\n\n## Hadoop 组成\n\n在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。\n\nHDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n​\n\nMapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。\n​\n\nCommon（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。\n​\n\n在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。\n\n### HDFS 架构概述\n\nNameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。\n\nDataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。\n\nSecondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。\n\n### YARN 架构概述\n\nResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；\n\nNodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；\n\nApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。\n\nContainer：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。\n\n### MapReduce 架构概述\n\nMapReduce 将计算过程分为两个阶段：Map 和 Reduce\n​\n\nMap 阶段：并行处理输入数据\n​\n\nReduce 阶段：对 Map 结果进行汇总\n\n## Hadoop 生态圈理解\n\n​\n\n### 协调与管理（Coordination and Management）\n\n#### HCatalog\n\n主要用来进行元数据管理。\n概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。\n\nHCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。\n\nHCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。\n\nHCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。\n\n#### Ambari\n\n主要是基于 web 管理 hadoop 的工具。\nApache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。\n\nApache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。\n\n#### Zookepper\n\n主要是配置信息数据同步。\n​\n\nZookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。\n\nZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n\n### 询问（Query）\n\n#### Impala\n\n主要是基于内存运算，大平台，数据更快。\n​\n\nImpala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。\n\nImpala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。\n\n#### Presto\n\n主要是基于 sql 语句。\n​\n\nPresto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。\n\n#### Hive\n\n主要是基于 sql 语句。\n​\n\nHive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。\n\n其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。\n\n#### Pig\n\n主要基于 sql 脚本。\n​\n\nApache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。\n\n要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。\n\n要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。\n\n优点：\n\n不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。\n​\n\n使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。\nApache Pig 使用多查询方法，从而减少代码长度。\n\n### 数据管道（Data piping）\n\n#### Sqoop\n\nSqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。\n\n#### Flume\n\nFlume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。\n\n### 核心 Hadoop（Core Hadoop）\n\n#### HDFS\n\nHadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n\nHDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。\n\n#### MapReduce\n\nMapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。\n\nMapReduce1.0:一个分布式的资源调度和离线并行计算框架。\n\nMapReduce2.1:一个分布式的离线并行计算框架。\n\n#### Yarn\n\nHadoop YARN：作业调度与集群资源管理的框架。\n\nApache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。\n\n### 机器学习（Machine Learning）\n\n#### Mahout\n\nApache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：\n\n推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。\n​\n\n聚集：收集文件并进行相关文件分组。\n​\n\n分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。\n​\n\n频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。\n\n### NoSQL 数据库（NoSQL Database）\n\n#### Hbase\n\nHBase 是一个分布式的、面向列的开源数据库。\n\nHBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。\n\n### 扩展\n\n#### Spark\n\nSpark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。\n\nApache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。\n​\n\nSpark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。\n\nSpark 主要有三个特点 :\n\n首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。\n​\n\n其次，Spark 很快，支持交互式计算和复杂算法。\n​\n\n最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。\n\n#### Tez\n\nTez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。\n​\n\n它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。\n\nTez 主要的两个设计目标:\n\n增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。\n​\n\n高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。\n\n#### Kafka\n\nKafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：\n​\n\n1. 通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。\n\n2. 高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。\n\n3. 支持通过 Kafka 服务器和消费机集群来分区消息。\n\n4. 支持 Hadoop 并行数据加载。\n\n#### Storm\n\nStorm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。\n\nStorm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。\n\n#### Oozie\n\nOozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。\n\nOozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。\n\n#### R 语言\n\nR 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。\n​\n","source":"_posts/大数据与Hadoop生态系统总结.md","raw":"---\nabbrlink: 1842b797\ndate: 2021-06-05\n---\n# 大数据概念理解\n\n## 什么是大数据？\n\n大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。\n\n主要解决：海量数据的存储和海量数据的分析计算问题。\n\n按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。\n\n换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T\n\n## 大数据特征\n\nVolume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。\n\nVelocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。\n\nVariety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。\n\nValue（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。\n\n## 大数据应用场景？\n\n物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。\n\n零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。\n\n旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。\n\n商品广告推荐：给用户推荐可能喜欢的商品。\n\n保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。\n\n金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。\n\n房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。\n\n## 大数据有哪些部分组成？\n\n### 大数据平台运维\n\n平台软件(hadoop、spark、flink、kafka)的安装和维护\n​\n\n关于平台的性能的监测\n​\n\n平台的性能的调优\n\n### 数据仓库\n\nETL 工程师：数据清洗\n​\n\nHive 工程师:数据分析\n\n### 数据挖掘\n\n算法、建模\n\n### 可视化\n\necharts、kylin、kibina\n​\n\n# Hadoop 深入理解\n\n## 什么是 Hadoop?\n\nHadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。\n​\n\n有三个组成：\n​\n\n1. hdfs:分布式的文件系统，主要解决大数据的储存问题\n\n​\n\n2. mapreduce:分布式的批量计算\n\n​\n\n3. yarn:分布式的资源管理组件\n\n​\n\n## Hadoop 的发展和发行版本？\n\n#### ​\n\n### Hadoop 发展历史\n\nLucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎\n​\n\n2001 年年底成为 Apache 基金会的一个子项目\n​\n\n对于大数量的场景，Lucene 面对与 Google 同样的困难\n​\n\n学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch\n​\n\n可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)\n​\n\nGFS —>HDFS\nMap-Reduce —>MR\nBigTable —>Hbase\n​\n\n2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升\n​\n\n2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中\n​\n\n名字来源于 Doug Cutting 儿子的玩具大象\n​\n\nHadoop 就此诞生并迅速发展，标志这云计算时代来临\n\n### Hadoop 三大发行版本\n\nHadoop 三大发行版本：Apache、Cloudera、Hortonworks。\n​\n\nApache 版本最原始（最基础）的版本，对于入门学习最好。\n​\n\nCloudera 在大型互联网企业中用的较多。\n​\n\nHortonworks 文档较好。\n\n## Hadoop 的优点？\n\n1. 高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。\n\n​\n\n2. 高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。\n\n​\n\n3. 高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。\n\n​\n\n4. 高容错性：能够自动将失败的任务重新分配。\n\n## Hadoop 组成\n\n在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。\n\nHDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n​\n\nMapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。\n​\n\nCommon（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。\n​\n\n在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。\n\n### HDFS 架构概述\n\nNameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。\n\nDataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。\n\nSecondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。\n\n### YARN 架构概述\n\nResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；\n\nNodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；\n\nApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。\n\nContainer：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。\n\n### MapReduce 架构概述\n\nMapReduce 将计算过程分为两个阶段：Map 和 Reduce\n​\n\nMap 阶段：并行处理输入数据\n​\n\nReduce 阶段：对 Map 结果进行汇总\n\n## Hadoop 生态圈理解\n\n​\n\n### 协调与管理（Coordination and Management）\n\n#### HCatalog\n\n主要用来进行元数据管理。\n概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。\n\nHCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。\n\nHCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。\n\nHCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。\n\n#### Ambari\n\n主要是基于 web 管理 hadoop 的工具。\nApache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。\n\nApache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。\n\n#### Zookepper\n\n主要是配置信息数据同步。\n​\n\nZookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。\n\nZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n\n### 询问（Query）\n\n#### Impala\n\n主要是基于内存运算，大平台，数据更快。\n​\n\nImpala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。\n\nImpala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。\n\n#### Presto\n\n主要是基于 sql 语句。\n​\n\nPresto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。\n\n#### Hive\n\n主要是基于 sql 语句。\n​\n\nHive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。\n\n其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。\n\n#### Pig\n\n主要基于 sql 脚本。\n​\n\nApache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。\n\n要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。\n\n要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。\n\n优点：\n\n不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。\n​\n\n使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。\nApache Pig 使用多查询方法，从而减少代码长度。\n\n### 数据管道（Data piping）\n\n#### Sqoop\n\nSqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。\n\n#### Flume\n\nFlume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。\n\n### 核心 Hadoop（Core Hadoop）\n\n#### HDFS\n\nHadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n\nHDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。\n\n#### MapReduce\n\nMapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。\n\nMapReduce1.0:一个分布式的资源调度和离线并行计算框架。\n\nMapReduce2.1:一个分布式的离线并行计算框架。\n\n#### Yarn\n\nHadoop YARN：作业调度与集群资源管理的框架。\n\nApache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。\n\n### 机器学习（Machine Learning）\n\n#### Mahout\n\nApache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：\n\n推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。\n​\n\n聚集：收集文件并进行相关文件分组。\n​\n\n分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。\n​\n\n频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。\n\n### NoSQL 数据库（NoSQL Database）\n\n#### Hbase\n\nHBase 是一个分布式的、面向列的开源数据库。\n\nHBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。\n\n### 扩展\n\n#### Spark\n\nSpark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。\n\nApache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。\n​\n\nSpark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。\n\nSpark 主要有三个特点 :\n\n首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。\n​\n\n其次，Spark 很快，支持交互式计算和复杂算法。\n​\n\n最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。\n\n#### Tez\n\nTez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。\n​\n\n它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。\n\nTez 主要的两个设计目标:\n\n增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。\n​\n\n高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。\n\n#### Kafka\n\nKafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：\n​\n\n1. 通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。\n\n2. 高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。\n\n3. 支持通过 Kafka 服务器和消费机集群来分区消息。\n\n4. 支持 Hadoop 并行数据加载。\n\n#### Storm\n\nStorm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。\n\nStorm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。\n\n#### Oozie\n\nOozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。\n\nOozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。\n\n#### R 语言\n\nR 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。\n​\n","slug":"大数据与Hadoop生态系统总结","published":1,"updated":"2021-07-19T06:13:07.024Z","title":"大数据与Hadoop生态系统总结","comments":1,"layout":"post","photos":[],"link":"","_id":"ckra8jl9i000ejqjy7j4ibeqv","content":"<h1 id=\"大数据概念理解\"><a href=\"#大数据概念理解\" class=\"headerlink\" title=\"大数据概念理解\"></a>大数据概念理解</h1><h2 id=\"什么是大数据？\"><a href=\"#什么是大数据？\" class=\"headerlink\" title=\"什么是大数据？\"></a>什么是大数据？</h2><p>大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p>\n<p>主要解决：海量数据的存储和海量数据的分析计算问题。</p>\n<p>按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。</p>\n<p>换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T</p>\n<h2 id=\"大数据特征\"><a href=\"#大数据特征\" class=\"headerlink\" title=\"大数据特征\"></a>大数据特征</h2><p>Volume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。</p>\n<p>Velocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。</p>\n<p>Variety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。</p>\n<p>Value（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。</p>\n<h2 id=\"大数据应用场景？\"><a href=\"#大数据应用场景？\" class=\"headerlink\" title=\"大数据应用场景？\"></a>大数据应用场景？</h2><p>物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。</p>\n<p>零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。</p>\n<p>旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。</p>\n<p>商品广告推荐：给用户推荐可能喜欢的商品。</p>\n<p>保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。</p>\n<p>金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。</p>\n<p>房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。</p>\n<h2 id=\"大数据有哪些部分组成？\"><a href=\"#大数据有哪些部分组成？\" class=\"headerlink\" title=\"大数据有哪些部分组成？\"></a>大数据有哪些部分组成？</h2><h3 id=\"大数据平台运维\"><a href=\"#大数据平台运维\" class=\"headerlink\" title=\"大数据平台运维\"></a>大数据平台运维</h3><p>平台软件(hadoop、spark、flink、kafka)的安装和维护<br>​</p>\n<p>关于平台的性能的监测<br>​</p>\n<p>平台的性能的调优</p>\n<h3 id=\"数据仓库\"><a href=\"#数据仓库\" class=\"headerlink\" title=\"数据仓库\"></a>数据仓库</h3><p>ETL 工程师：数据清洗<br>​</p>\n<p>Hive 工程师:数据分析</p>\n<h3 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h3><p>算法、建模</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>echarts、kylin、kibina<br>​</p>\n<h1 id=\"Hadoop-深入理解\"><a href=\"#Hadoop-深入理解\" class=\"headerlink\" title=\"Hadoop 深入理解\"></a>Hadoop 深入理解</h1><h2 id=\"什么是-Hadoop\"><a href=\"#什么是-Hadoop\" class=\"headerlink\" title=\"什么是 Hadoop?\"></a>什么是 Hadoop?</h2><p>Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。<br>​</p>\n<p>有三个组成：<br>​</p>\n<ol>\n<li>hdfs:分布式的文件系统，主要解决大数据的储存问题</li>\n</ol>\n<p>​</p>\n<ol>\n<li>mapreduce:分布式的批量计算</li>\n</ol>\n<p>​</p>\n<ol>\n<li>yarn:分布式的资源管理组件</li>\n</ol>\n<p>​</p>\n<h2 id=\"Hadoop-的发展和发行版本？\"><a href=\"#Hadoop-的发展和发行版本？\" class=\"headerlink\" title=\"Hadoop 的发展和发行版本？\"></a>Hadoop 的发展和发行版本？</h2><h4 id=\"​\"><a href=\"#​\" class=\"headerlink\" title=\"​\"></a>​</h4><h3 id=\"Hadoop-发展历史\"><a href=\"#Hadoop-发展历史\" class=\"headerlink\" title=\"Hadoop 发展历史\"></a>Hadoop 发展历史</h3><p>Lucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎<br>​</p>\n<p>2001 年年底成为 Apache 基金会的一个子项目<br>​</p>\n<p>对于大数量的场景，Lucene 面对与 Google 同样的困难<br>​</p>\n<p>学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch<br>​</p>\n<p>可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)<br>​</p>\n<p>GFS —&gt;HDFS<br>Map-Reduce —&gt;MR<br>BigTable —&gt;Hbase<br>​</p>\n<p>2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升<br>​</p>\n<p>2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中<br>​</p>\n<p>名字来源于 Doug Cutting 儿子的玩具大象<br>​</p>\n<p>Hadoop 就此诞生并迅速发展，标志这云计算时代来临</p>\n<h3 id=\"Hadoop-三大发行版本\"><a href=\"#Hadoop-三大发行版本\" class=\"headerlink\" title=\"Hadoop 三大发行版本\"></a>Hadoop 三大发行版本</h3><p>Hadoop 三大发行版本：Apache、Cloudera、Hortonworks。<br>​</p>\n<p>Apache 版本最原始（最基础）的版本，对于入门学习最好。<br>​</p>\n<p>Cloudera 在大型互联网企业中用的较多。<br>​</p>\n<p>Hortonworks 文档较好。</p>\n<h2 id=\"Hadoop-的优点？\"><a href=\"#Hadoop-的优点？\" class=\"headerlink\" title=\"Hadoop 的优点？\"></a>Hadoop 的优点？</h2><ol>\n<li>高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高容错性：能够自动将失败的任务重新分配。</li>\n</ol>\n<h2 id=\"Hadoop-组成\"><a href=\"#Hadoop-组成\" class=\"headerlink\" title=\"Hadoop 组成\"></a>Hadoop 组成</h2><p>在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。</p>\n<p>HDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。<br>​</p>\n<p>MapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。<br>​</p>\n<p>Common（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。<br>​</p>\n<p>在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。</p>\n<h3 id=\"HDFS-架构概述\"><a href=\"#HDFS-架构概述\" class=\"headerlink\" title=\"HDFS 架构概述\"></a>HDFS 架构概述</h3><p>NameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。</p>\n<p>DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</p>\n<p>Secondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。</p>\n<h3 id=\"YARN-架构概述\"><a href=\"#YARN-架构概述\" class=\"headerlink\" title=\"YARN 架构概述\"></a>YARN 架构概述</h3><p>ResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；</p>\n<p>NodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；</p>\n<p>ApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。</p>\n<p>Container：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。</p>\n<h3 id=\"MapReduce-架构概述\"><a href=\"#MapReduce-架构概述\" class=\"headerlink\" title=\"MapReduce 架构概述\"></a>MapReduce 架构概述</h3><p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce<br>​</p>\n<p>Map 阶段：并行处理输入数据<br>​</p>\n<p>Reduce 阶段：对 Map 结果进行汇总</p>\n<h2 id=\"Hadoop-生态圈理解\"><a href=\"#Hadoop-生态圈理解\" class=\"headerlink\" title=\"Hadoop 生态圈理解\"></a>Hadoop 生态圈理解</h2><p>​</p>\n<h3 id=\"协调与管理（Coordination-and-Management）\"><a href=\"#协调与管理（Coordination-and-Management）\" class=\"headerlink\" title=\"协调与管理（Coordination and Management）\"></a>协调与管理（Coordination and Management）</h3><h4 id=\"HCatalog\"><a href=\"#HCatalog\" class=\"headerlink\" title=\"HCatalog\"></a>HCatalog</h4><p>主要用来进行元数据管理。<br>概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。</p>\n<p>HCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。</p>\n<p>HCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。</p>\n<p>HCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。</p>\n<h4 id=\"Ambari\"><a href=\"#Ambari\" class=\"headerlink\" title=\"Ambari\"></a>Ambari</h4><p>主要是基于 web 管理 hadoop 的工具。<br>Apache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。</p>\n<p>Apache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。</p>\n<h4 id=\"Zookepper\"><a href=\"#Zookepper\" class=\"headerlink\" title=\"Zookepper\"></a>Zookepper</h4><p>主要是配置信息数据同步。<br>​</p>\n<p>Zookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。</p>\n<p>ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n<h3 id=\"询问（Query）\"><a href=\"#询问（Query）\" class=\"headerlink\" title=\"询问（Query）\"></a>询问（Query）</h3><h4 id=\"Impala\"><a href=\"#Impala\" class=\"headerlink\" title=\"Impala\"></a>Impala</h4><p>主要是基于内存运算，大平台，数据更快。<br>​</p>\n<p>Impala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。</p>\n<p>Impala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。</p>\n<h4 id=\"Presto\"><a href=\"#Presto\" class=\"headerlink\" title=\"Presto\"></a>Presto</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Presto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。</p>\n<h4 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。</p>\n<p>其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。</p>\n<h4 id=\"Pig\"><a href=\"#Pig\" class=\"headerlink\" title=\"Pig\"></a>Pig</h4><p>主要基于 sql 脚本。<br>​</p>\n<p>Apache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。</p>\n<p>要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。</p>\n<p>要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。</p>\n<p>优点：</p>\n<p>不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。<br>​</p>\n<p>使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。<br>Apache Pig 使用多查询方法，从而减少代码长度。</p>\n<h3 id=\"数据管道（Data-piping）\"><a href=\"#数据管道（Data-piping）\" class=\"headerlink\" title=\"数据管道（Data piping）\"></a>数据管道（Data piping）</h3><h4 id=\"Sqoop\"><a href=\"#Sqoop\" class=\"headerlink\" title=\"Sqoop\"></a>Sqoop</h4><p>Sqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。</p>\n<h4 id=\"Flume\"><a href=\"#Flume\" class=\"headerlink\" title=\"Flume\"></a>Flume</h4><p>Flume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</p>\n<h3 id=\"核心-Hadoop（Core-Hadoop）\"><a href=\"#核心-Hadoop（Core-Hadoop）\" class=\"headerlink\" title=\"核心 Hadoop（Core Hadoop）\"></a>核心 Hadoop（Core Hadoop）</h3><h4 id=\"HDFS\"><a href=\"#HDFS\" class=\"headerlink\" title=\"HDFS\"></a>HDFS</h4><p>Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。</p>\n<p>HDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。</p>\n<h4 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h4><p>MapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。</p>\n<p>MapReduce1.0:一个分布式的资源调度和离线并行计算框架。</p>\n<p>MapReduce2.1:一个分布式的离线并行计算框架。</p>\n<h4 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h4><p>Hadoop YARN：作业调度与集群资源管理的框架。</p>\n<p>Apache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。</p>\n<h3 id=\"机器学习（Machine-Learning）\"><a href=\"#机器学习（Machine-Learning）\" class=\"headerlink\" title=\"机器学习（Machine Learning）\"></a>机器学习（Machine Learning）</h3><h4 id=\"Mahout\"><a href=\"#Mahout\" class=\"headerlink\" title=\"Mahout\"></a>Mahout</h4><p>Apache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：</p>\n<p>推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。<br>​</p>\n<p>聚集：收集文件并进行相关文件分组。<br>​</p>\n<p>分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。<br>​</p>\n<p>频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。</p>\n<h3 id=\"NoSQL-数据库（NoSQL-Database）\"><a href=\"#NoSQL-数据库（NoSQL-Database）\" class=\"headerlink\" title=\"NoSQL 数据库（NoSQL Database）\"></a>NoSQL 数据库（NoSQL Database）</h3><h4 id=\"Hbase\"><a href=\"#Hbase\" class=\"headerlink\" title=\"Hbase\"></a>Hbase</h4><p>HBase 是一个分布式的、面向列的开源数据库。</p>\n<p>HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h4 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h4><p>Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。</p>\n<p>Apache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。<br>​</p>\n<p>Spark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。</p>\n<p>Spark 主要有三个特点 :</p>\n<p>首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。<br>​</p>\n<p>其次，Spark 很快，支持交互式计算和复杂算法。<br>​</p>\n<p>最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。</p>\n<h4 id=\"Tez\"><a href=\"#Tez\" class=\"headerlink\" title=\"Tez\"></a>Tez</h4><p>Tez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。<br>​</p>\n<p>它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。</p>\n<p>Tez 主要的两个设计目标:</p>\n<p>增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。<br>​</p>\n<p>高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。</p>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><p>Kafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：<br>​</p>\n<ol>\n<li><p>通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。</p>\n</li>\n<li><p>高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。</p>\n</li>\n<li><p>支持通过 Kafka 服务器和消费机集群来分区消息。</p>\n</li>\n<li><p>支持 Hadoop 并行数据加载。</p>\n</li>\n</ol>\n<h4 id=\"Storm\"><a href=\"#Storm\" class=\"headerlink\" title=\"Storm\"></a>Storm</h4><p>Storm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。</p>\n<p>Storm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</p>\n<h4 id=\"Oozie\"><a href=\"#Oozie\" class=\"headerlink\" title=\"Oozie\"></a>Oozie</h4><p>Oozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。</p>\n<p>Oozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。</p>\n<h4 id=\"R-语言\"><a href=\"#R-语言\" class=\"headerlink\" title=\"R 语言\"></a>R 语言</h4><p>R 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。<br>​</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"大数据概念理解\"><a href=\"#大数据概念理解\" class=\"headerlink\" title=\"大数据概念理解\"></a>大数据概念理解</h1><h2 id=\"什么是大数据？\"><a href=\"#什么是大数据？\" class=\"headerlink\" title=\"什么是大数据？\"></a>什么是大数据？</h2><p>大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p>\n<p>主要解决：海量数据的存储和海量数据的分析计算问题。</p>\n<p>按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。</p>\n<p>换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T</p>\n<h2 id=\"大数据特征\"><a href=\"#大数据特征\" class=\"headerlink\" title=\"大数据特征\"></a>大数据特征</h2><p>Volume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。</p>\n<p>Velocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。</p>\n<p>Variety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。</p>\n<p>Value（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。</p>\n<h2 id=\"大数据应用场景？\"><a href=\"#大数据应用场景？\" class=\"headerlink\" title=\"大数据应用场景？\"></a>大数据应用场景？</h2><p>物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。</p>\n<p>零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。</p>\n<p>旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。</p>\n<p>商品广告推荐：给用户推荐可能喜欢的商品。</p>\n<p>保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。</p>\n<p>金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。</p>\n<p>房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。</p>\n<h2 id=\"大数据有哪些部分组成？\"><a href=\"#大数据有哪些部分组成？\" class=\"headerlink\" title=\"大数据有哪些部分组成？\"></a>大数据有哪些部分组成？</h2><h3 id=\"大数据平台运维\"><a href=\"#大数据平台运维\" class=\"headerlink\" title=\"大数据平台运维\"></a>大数据平台运维</h3><p>平台软件(hadoop、spark、flink、kafka)的安装和维护<br>​</p>\n<p>关于平台的性能的监测<br>​</p>\n<p>平台的性能的调优</p>\n<h3 id=\"数据仓库\"><a href=\"#数据仓库\" class=\"headerlink\" title=\"数据仓库\"></a>数据仓库</h3><p>ETL 工程师：数据清洗<br>​</p>\n<p>Hive 工程师:数据分析</p>\n<h3 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h3><p>算法、建模</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>echarts、kylin、kibina<br>​</p>\n<h1 id=\"Hadoop-深入理解\"><a href=\"#Hadoop-深入理解\" class=\"headerlink\" title=\"Hadoop 深入理解\"></a>Hadoop 深入理解</h1><h2 id=\"什么是-Hadoop\"><a href=\"#什么是-Hadoop\" class=\"headerlink\" title=\"什么是 Hadoop?\"></a>什么是 Hadoop?</h2><p>Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。<br>​</p>\n<p>有三个组成：<br>​</p>\n<ol>\n<li>hdfs:分布式的文件系统，主要解决大数据的储存问题</li>\n</ol>\n<p>​</p>\n<ol>\n<li>mapreduce:分布式的批量计算</li>\n</ol>\n<p>​</p>\n<ol>\n<li>yarn:分布式的资源管理组件</li>\n</ol>\n<p>​</p>\n<h2 id=\"Hadoop-的发展和发行版本？\"><a href=\"#Hadoop-的发展和发行版本？\" class=\"headerlink\" title=\"Hadoop 的发展和发行版本？\"></a>Hadoop 的发展和发行版本？</h2><h4 id=\"​\"><a href=\"#​\" class=\"headerlink\" title=\"​\"></a>​</h4><h3 id=\"Hadoop-发展历史\"><a href=\"#Hadoop-发展历史\" class=\"headerlink\" title=\"Hadoop 发展历史\"></a>Hadoop 发展历史</h3><p>Lucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎<br>​</p>\n<p>2001 年年底成为 Apache 基金会的一个子项目<br>​</p>\n<p>对于大数量的场景，Lucene 面对与 Google 同样的困难<br>​</p>\n<p>学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch<br>​</p>\n<p>可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)<br>​</p>\n<p>GFS —&gt;HDFS<br>Map-Reduce —&gt;MR<br>BigTable —&gt;Hbase<br>​</p>\n<p>2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升<br>​</p>\n<p>2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中<br>​</p>\n<p>名字来源于 Doug Cutting 儿子的玩具大象<br>​</p>\n<p>Hadoop 就此诞生并迅速发展，标志这云计算时代来临</p>\n<h3 id=\"Hadoop-三大发行版本\"><a href=\"#Hadoop-三大发行版本\" class=\"headerlink\" title=\"Hadoop 三大发行版本\"></a>Hadoop 三大发行版本</h3><p>Hadoop 三大发行版本：Apache、Cloudera、Hortonworks。<br>​</p>\n<p>Apache 版本最原始（最基础）的版本，对于入门学习最好。<br>​</p>\n<p>Cloudera 在大型互联网企业中用的较多。<br>​</p>\n<p>Hortonworks 文档较好。</p>\n<h2 id=\"Hadoop-的优点？\"><a href=\"#Hadoop-的优点？\" class=\"headerlink\" title=\"Hadoop 的优点？\"></a>Hadoop 的优点？</h2><ol>\n<li>高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高容错性：能够自动将失败的任务重新分配。</li>\n</ol>\n<h2 id=\"Hadoop-组成\"><a href=\"#Hadoop-组成\" class=\"headerlink\" title=\"Hadoop 组成\"></a>Hadoop 组成</h2><p>在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。</p>\n<p>HDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。<br>​</p>\n<p>MapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。<br>​</p>\n<p>Common（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。<br>​</p>\n<p>在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。</p>\n<h3 id=\"HDFS-架构概述\"><a href=\"#HDFS-架构概述\" class=\"headerlink\" title=\"HDFS 架构概述\"></a>HDFS 架构概述</h3><p>NameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。</p>\n<p>DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</p>\n<p>Secondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。</p>\n<h3 id=\"YARN-架构概述\"><a href=\"#YARN-架构概述\" class=\"headerlink\" title=\"YARN 架构概述\"></a>YARN 架构概述</h3><p>ResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；</p>\n<p>NodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；</p>\n<p>ApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。</p>\n<p>Container：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。</p>\n<h3 id=\"MapReduce-架构概述\"><a href=\"#MapReduce-架构概述\" class=\"headerlink\" title=\"MapReduce 架构概述\"></a>MapReduce 架构概述</h3><p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce<br>​</p>\n<p>Map 阶段：并行处理输入数据<br>​</p>\n<p>Reduce 阶段：对 Map 结果进行汇总</p>\n<h2 id=\"Hadoop-生态圈理解\"><a href=\"#Hadoop-生态圈理解\" class=\"headerlink\" title=\"Hadoop 生态圈理解\"></a>Hadoop 生态圈理解</h2><p>​</p>\n<h3 id=\"协调与管理（Coordination-and-Management）\"><a href=\"#协调与管理（Coordination-and-Management）\" class=\"headerlink\" title=\"协调与管理（Coordination and Management）\"></a>协调与管理（Coordination and Management）</h3><h4 id=\"HCatalog\"><a href=\"#HCatalog\" class=\"headerlink\" title=\"HCatalog\"></a>HCatalog</h4><p>主要用来进行元数据管理。<br>概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。</p>\n<p>HCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。</p>\n<p>HCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。</p>\n<p>HCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。</p>\n<h4 id=\"Ambari\"><a href=\"#Ambari\" class=\"headerlink\" title=\"Ambari\"></a>Ambari</h4><p>主要是基于 web 管理 hadoop 的工具。<br>Apache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。</p>\n<p>Apache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。</p>\n<h4 id=\"Zookepper\"><a href=\"#Zookepper\" class=\"headerlink\" title=\"Zookepper\"></a>Zookepper</h4><p>主要是配置信息数据同步。<br>​</p>\n<p>Zookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。</p>\n<p>ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n<h3 id=\"询问（Query）\"><a href=\"#询问（Query）\" class=\"headerlink\" title=\"询问（Query）\"></a>询问（Query）</h3><h4 id=\"Impala\"><a href=\"#Impala\" class=\"headerlink\" title=\"Impala\"></a>Impala</h4><p>主要是基于内存运算，大平台，数据更快。<br>​</p>\n<p>Impala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。</p>\n<p>Impala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。</p>\n<h4 id=\"Presto\"><a href=\"#Presto\" class=\"headerlink\" title=\"Presto\"></a>Presto</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Presto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。</p>\n<h4 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。</p>\n<p>其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。</p>\n<h4 id=\"Pig\"><a href=\"#Pig\" class=\"headerlink\" title=\"Pig\"></a>Pig</h4><p>主要基于 sql 脚本。<br>​</p>\n<p>Apache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。</p>\n<p>要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。</p>\n<p>要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。</p>\n<p>优点：</p>\n<p>不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。<br>​</p>\n<p>使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。<br>Apache Pig 使用多查询方法，从而减少代码长度。</p>\n<h3 id=\"数据管道（Data-piping）\"><a href=\"#数据管道（Data-piping）\" class=\"headerlink\" title=\"数据管道（Data piping）\"></a>数据管道（Data piping）</h3><h4 id=\"Sqoop\"><a href=\"#Sqoop\" class=\"headerlink\" title=\"Sqoop\"></a>Sqoop</h4><p>Sqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。</p>\n<h4 id=\"Flume\"><a href=\"#Flume\" class=\"headerlink\" title=\"Flume\"></a>Flume</h4><p>Flume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</p>\n<h3 id=\"核心-Hadoop（Core-Hadoop）\"><a href=\"#核心-Hadoop（Core-Hadoop）\" class=\"headerlink\" title=\"核心 Hadoop（Core Hadoop）\"></a>核心 Hadoop（Core Hadoop）</h3><h4 id=\"HDFS\"><a href=\"#HDFS\" class=\"headerlink\" title=\"HDFS\"></a>HDFS</h4><p>Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。</p>\n<p>HDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。</p>\n<h4 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h4><p>MapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。</p>\n<p>MapReduce1.0:一个分布式的资源调度和离线并行计算框架。</p>\n<p>MapReduce2.1:一个分布式的离线并行计算框架。</p>\n<h4 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h4><p>Hadoop YARN：作业调度与集群资源管理的框架。</p>\n<p>Apache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。</p>\n<h3 id=\"机器学习（Machine-Learning）\"><a href=\"#机器学习（Machine-Learning）\" class=\"headerlink\" title=\"机器学习（Machine Learning）\"></a>机器学习（Machine Learning）</h3><h4 id=\"Mahout\"><a href=\"#Mahout\" class=\"headerlink\" title=\"Mahout\"></a>Mahout</h4><p>Apache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：</p>\n<p>推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。<br>​</p>\n<p>聚集：收集文件并进行相关文件分组。<br>​</p>\n<p>分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。<br>​</p>\n<p>频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。</p>\n<h3 id=\"NoSQL-数据库（NoSQL-Database）\"><a href=\"#NoSQL-数据库（NoSQL-Database）\" class=\"headerlink\" title=\"NoSQL 数据库（NoSQL Database）\"></a>NoSQL 数据库（NoSQL Database）</h3><h4 id=\"Hbase\"><a href=\"#Hbase\" class=\"headerlink\" title=\"Hbase\"></a>Hbase</h4><p>HBase 是一个分布式的、面向列的开源数据库。</p>\n<p>HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h4 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h4><p>Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。</p>\n<p>Apache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。<br>​</p>\n<p>Spark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。</p>\n<p>Spark 主要有三个特点 :</p>\n<p>首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。<br>​</p>\n<p>其次，Spark 很快，支持交互式计算和复杂算法。<br>​</p>\n<p>最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。</p>\n<h4 id=\"Tez\"><a href=\"#Tez\" class=\"headerlink\" title=\"Tez\"></a>Tez</h4><p>Tez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。<br>​</p>\n<p>它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。</p>\n<p>Tez 主要的两个设计目标:</p>\n<p>增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。<br>​</p>\n<p>高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。</p>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><p>Kafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：<br>​</p>\n<ol>\n<li><p>通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。</p>\n</li>\n<li><p>高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。</p>\n</li>\n<li><p>支持通过 Kafka 服务器和消费机集群来分区消息。</p>\n</li>\n<li><p>支持 Hadoop 并行数据加载。</p>\n</li>\n</ol>\n<h4 id=\"Storm\"><a href=\"#Storm\" class=\"headerlink\" title=\"Storm\"></a>Storm</h4><p>Storm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。</p>\n<p>Storm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</p>\n<h4 id=\"Oozie\"><a href=\"#Oozie\" class=\"headerlink\" title=\"Oozie\"></a>Oozie</h4><p>Oozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。</p>\n<p>Oozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。</p>\n<h4 id=\"R-语言\"><a href=\"#R-语言\" class=\"headerlink\" title=\"R 语言\"></a>R 语言</h4><p>R 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。<br>​</p>\n"}],"PostAsset":[{"_id":"source/_posts/Seata protocol supports http2/seata_protobuf.png","slug":"seata_protobuf.png","post":"ckra8jl9d0005jqjygliz0tgq","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}