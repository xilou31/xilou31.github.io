{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"c0b5318c4787cfa156420385a64b742938feed27","modified":1627310090891},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1629083772941},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1629083772982},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1629083772970},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1629083772952},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1629083772970},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1629083772982},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1629083772873},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1629083772951},{"_id":"themes/next/_config.yml","hash":"9062041cfb31907060d9259688682397565be195","modified":1629084697757},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1629083772941},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1629083772970},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1629083772952},{"_id":"source/404/index.md","hash":"19a62fac9a04299079b1068ac3ab1be736fa84f0","modified":1627310117456},{"_id":"source/categories/index.md","hash":"fc06e152800bc45791315d8a16ffc11b92e39c46","modified":1627310117459},{"_id":"source/_posts/Deffie-Hellman 密钥交换算法.md","hash":"833fbaba5bf90af9af5c7725a018694ea59f58a8","modified":1629085053980},{"_id":"source/_posts/.DS_Store","hash":"0183ad7f93e520eb3cf35e8229513a4ec2ce5e1a","modified":1627309297293},{"_id":"source/_posts/LeetCode刷题题库.md","hash":"a0406621c11052cad001974b1c2b250791aa58a1","modified":1629085078884},{"_id":"source/_posts/Seata protocol supports http2.md","hash":"ba8c37ea81174990ae5793f0a7c38615587354e9","modified":1629085084694},{"_id":"source/_posts/什么是RBAC权限模型.md","hash":"aefbdb185f2d81ab7bcfd883ef2733cb23841de2","modified":1629085038095},{"_id":"source/_posts/全连通内网守护程序.md","hash":"bb9bde84e65a7173cdf8eb7e8c2666182693906b","modified":1629084999599},{"_id":"source/_posts/关于爬虫的一点经验.md","hash":"641d6cf10d3207ff5103272c8f0cd065db912027","modified":1629084936768},{"_id":"source/_posts/基于开放 API 封装 Wechaty 接口下的飞书聊天机器人.md","hash":"9bd0ebc9b2105c112d5536a85c6c9ed4fd885d2a","modified":1629084972822},{"_id":"source/_posts/大数据与Hadoop生态系统总结.md","hash":"ab781adf2affcccc3fb0c7023d5605472083cc17","modified":1629084872050},{"_id":"source/about/index.md","hash":"3aba51f27756421d3b9fb9cec70097a626504bbc","modified":1627310117459},{"_id":"source/sitemap/index.md","hash":"4aa6279ebb85fcd734ed46594e66c2d898027e3f","modified":1627310117464},{"_id":"source/schedule/index.md","hash":"f1a4808e1b20f2287e6102cad12ff7a545c23d3b","modified":1627310117464},{"_id":"source/sitemap-xml/index.md","hash":"4c07531d5d25966022e5d16e753240a33026be92","modified":1627310117464},{"_id":"source/tags/index.md","hash":"e86da851897f1df9de36bb894a910a4f72ac1587","modified":1627310117464},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1629083772966},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1629083772968},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1629083772967},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1629083772968},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1629083772969},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1629083772970},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1629083772969},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1629083772967},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1629083772967},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1629083772967},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1629083772969},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1629083772938},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1629083772936},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1629083772935},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1629083772936},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1629083772941},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1629083772940},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1629083772941},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1629083772938},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1629083772936},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1629083772949},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1629083772945},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1629083772942},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1629083772946},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1629083772943},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1629083772946},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1629083772948},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1629083772944},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1629083772944},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1629083772945},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1629083772947},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1629083772943},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1629083772951},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1629083772943},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1629083772945},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1629083772948},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1629083772950},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1629083772942},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1629083772950},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1629083772950},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1629083772947},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1629083772949},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1629083772874},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1629083772886},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1629083772874},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1629083772878},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1629083772878},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1629083772878},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1629083772874},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1629083772958},{"_id":"source/images/avatar.jpg","hash":"4b6fb9f445729d9346877541317bf152f18adb42","modified":1627310117460},{"_id":"source/_posts/什么是RBAC权限模型/ClassicAC.png","hash":"9d1775733233335a16e219385be2339adc7fbd24","modified":1627310117458},{"_id":"source/_posts/什么是RBAC权限模型/RBAC.png","hash":"57dc4ba74f02a2f350dfdf096df047e20f342e00","modified":1627310117458},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1629083772968},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1629083772968},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1629083772969},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1629083772969},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1629083772937},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1629083772937},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1629083772937},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1629083772937},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1629083772939},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1629083772938},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1629083772940},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1629083772939},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1629083772940},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1629083772940},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1629083772939},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1629083772940},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1629083772939},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1629083772896},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1629083772895},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1629083772895},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1629083772884},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1629083772883},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1629083772884},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1629083772881},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1629083772881},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1629083772876},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1629083772876},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1629083772876},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1629083772877},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1629083772877},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1629083772893},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1629083772890},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1629083772889},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1629083772894},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1629083772963},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1629083772957},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1629083772958},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1629083772957},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1629083772956},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1629083772956},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1629083772965},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1629083772965},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1629083772966},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1629083772966},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1629083772961},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1629083772960},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1629083772960},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1629083772962},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1629083772962},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1629083772959},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1629083772961},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1629083772959},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1629083772960},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1629083772961},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1629083772921},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1629083772921},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1629083772921},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1629083772928},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629083772929},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1629083772928},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1629083772930},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1629083772928},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1629083772928},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1629083772927},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1629083772929},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1629083772928},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1629083772930},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629083772929},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629083772929},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1629083772930},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1629083772931},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1629083772932},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1629083772931},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1629083772932},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1629083772931},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1629083772932},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1629083772933},{"_id":"source/_posts/Seata protocol supports http2/seata_protobuf.png","hash":"5ca28fe423e6f799bf950aa3e00bc68b8bd7ede1","modified":1627310117457},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1629083772883},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1629083772883},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1629083772886},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1629083772885},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1629083772885},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1629083772885},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1629083772885},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1629083772879},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1629083772879},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1629083772881},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1629083772881},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1629083772880},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1629083772880},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1629083772880},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1629083772882},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1629083772882},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1629083772882},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1629083772879},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1629083772877},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1629083772875},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1629083772875},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1629083772876},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1629083772875},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1629083772895},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1629083772894},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1629083772895},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1629083772894},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1629083772890},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1629083772890},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1629083772889},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1629083772888},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1629083772889},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1629083772888},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1629083772889},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1629083772889},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1629083772892},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1629083772891},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1629083772891},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1629083772893},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1629083772893},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1629083772893},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1629083772886},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1629083772888},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1629083772887},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1629083772887},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1629083772887},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1629083772892},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1629083772892},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1629083772964},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1629083772964},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1629083772963},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1629083772954},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1629083772955},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1629083772956},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1629083772953},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1629083772955},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1629083772955},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1629083772953},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1629083772954},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1629083772920},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1629083772920},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1629083772920},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1629083772920},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1629083772920},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1629083772931},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1629083772931},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1629083772933},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1629083772933},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1629083772906},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1629083772907},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1629083772901},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1629083772907},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1629083772917},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1629083772917},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1629083772898},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1629083772898},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1629083772899},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1629083772900},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1629083772898},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1629083772901},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1629083772901},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1629083772897},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1629083772924},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1629083772927},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1629083772926},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1629083772927},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1629083772926},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1629083772926},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1629083772923},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1629083772922},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1629083772923},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1629083772923},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1629083772922},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1629083772922},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1629083772925},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1629083772924},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1629083772925},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1629083772925},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1629083772925},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1629083772924},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1629083772934},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1629083772934},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1629083772935},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1629083772935},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1629083772911},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1629083772911},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1629083772911},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1629083772910},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1629083772911},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1629083772904},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1629083772903},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1629083772904},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1629083772905},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1629083772906},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1629083772903},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1629083772902},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1629083772903},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1629083772902},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1629083772902},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1629083772903},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1629083772904},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1629083772902},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1629083772908},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1629083772909},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1629083772909},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1629083772908},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1629083772909},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1629083772917},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1629083772918},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1629083772918},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1629083772919},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1629083772919},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1629083772918},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1629083772918},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1629083772919},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1629083772913},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1629083772915},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1629083772914},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1629083772916},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1629083772913},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1629083772914},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1629083772915},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1629083772916},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1629083772916},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1629083772915},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1629083772897},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1629083772898},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1629083772897},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1629083772898},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1629083772900},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1629083772900},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1629083772900},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1629083772900},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1629083772899},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1629083772899},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1629083772899},{"_id":"source/images/background.jpg","hash":"d3ec7351b9e22332567b62cb6bcf74dcf0794f60","modified":1627310117464},{"_id":"public/categories/index.html","hash":"8999e2a7ecf9b0c07bab4d6e6b227f14f44d805e","modified":1629084707722},{"_id":"public/404/index.html","hash":"84402dc3d5e7eeb89309b3783f31737754ca8b94","modified":1629084707722},{"_id":"public/about/index.html","hash":"c991cbe245b6e1a70b2b4f421bdd37f44f620ace","modified":1629084707722},{"_id":"public/schedule/index.html","hash":"b19964f6968ab316ceebb24599354b7598b8a9a8","modified":1629084707722},{"_id":"public/sitemap-xml/index.html","hash":"585e7535f5775ff3413fb48bf72198735e1ccebc","modified":1629084707722},{"_id":"public/tags/index.html","hash":"3b10fa471bbf585cce3cff6ea2f92edac61389c0","modified":1629084707722},{"_id":"public/sitemap/index.html","hash":"73633f5d909e1544c8f34dfa2ed80e18c2404e84","modified":1629084707722},{"_id":"public/ec4f06e7/index.html","hash":"79fe02cf9763983c3ddaa6a7e6f70153972410bc","modified":1629085092687},{"_id":"public/dcb67373/index.html","hash":"b19844bff32a76d82a8a755c5b71e88f076e5c96","modified":1629085092687},{"_id":"public/f54835d/index.html","hash":"332f6d75a4cf2e9a56b22ce4eb0ed9f76e79b12b","modified":1629085092687},{"_id":"public/archives/index.html","hash":"d5fb0b298fb89989c7c3a095c9c92233f5db100c","modified":1629085092687},{"_id":"public/archives/2019/index.html","hash":"17e7d6d962ced4545d61bb54fdc28c1112c39252","modified":1629084707722},{"_id":"public/archives/2019/10/index.html","hash":"b03036430f1f70e9aaa4d98c027e00ed40020707","modified":1629084707722},{"_id":"public/archives/2021/index.html","hash":"c37965fbcd37ca765e7c5df80cd2327e8aca45d6","modified":1629085092687},{"_id":"public/archives/2021/06/index.html","hash":"5a6cc7ad77255d67f5672537d6b3a3cd7d602b43","modified":1629084707722},{"_id":"public/archives/2021/07/index.html","hash":"0eb73e3b05c7ea07a2d9ad334c198f177c566db6","modified":1629085092687},{"_id":"public/7784fafc/index.html","hash":"ab53b75706b258e0acf4484e837f03db1472c59c","modified":1629085092687},{"_id":"public/76ccdb2e/index.html","hash":"7aa6ba78ca76e4675ce87a18f36120c1b59949fb","modified":1629085092687},{"_id":"public/1842b797/index.html","hash":"b6eb5ea8e1d97f61378dc5e7ceb2f5247f3373e4","modified":1629084876964},{"_id":"public/1c4cd1f0/index.html","hash":"9533176737489650a4359980c5c4219a32d813f6","modified":1629085092687},{"_id":"public/4b69a11a/index.html","hash":"aff0b85065b592dee5418bb4def5978876fd762a","modified":1629085092687},{"_id":"public/index.html","hash":"3e6225d45b3b451764cbec608580bbee47aa36e3","modified":1629085092687},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1629084104734},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1629084104734},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1629084104734},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1629084104734},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1629084104734},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1629084104734},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1629084104734},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1629084104734},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1629084104734},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1629084104734},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1629084104734},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1629084104734},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1629084104734},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1629084104734},{"_id":"public/ec4f06e7/ClassicAC.png","hash":"9d1775733233335a16e219385be2339adc7fbd24","modified":1629084104734},{"_id":"public/ec4f06e7/RBAC.png","hash":"57dc4ba74f02a2f350dfdf096df047e20f342e00","modified":1629084104734},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1629084104734},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1629084104734},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1629084104734},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1629084104734},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1629084104734},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1629084104734},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1629084104734},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1629084104734},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1629084104734},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1629084104734},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1629084104734},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1629084104734},{"_id":"public/css/main.css","hash":"ad420faa86a0fd721d69e768bd92aff50133ab3b","modified":1629084104734},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1629084104734},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1629084104734},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1629084104734},{"_id":"public/images/avatar.jpg","hash":"4b6fb9f445729d9346877541317bf152f18adb42","modified":1629084104734},{"_id":"public/1c4cd1f0/seata_protobuf.png","hash":"5ca28fe423e6f799bf950aa3e00bc68b8bd7ede1","modified":1629084104734},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1629084104734},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1629084104734},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1629084104734},{"_id":"public/images/background.jpg","hash":"d3ec7351b9e22332567b62cb6bcf74dcf0794f60","modified":1629084104734}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2020-04-28T13:14:02.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-04-28 21:14:02\n---\n","updated":"2021-07-26T14:35:17.456Z","path":"404/index.html","comments":1,"layout":"page","_id":"ckse2m4pf0000hcjyd1wjgr65","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2020-04-28T13:13:13.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-04-28 21:13:13\n---\n","updated":"2021-07-26T14:35:17.459Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckse2m4pj0002hcjyah4d66yr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-04-28T13:13:07.000Z","_content":"\n### Who Am I 👨🏻‍💻\n\nHello, here's xilou31, an student of CS in South China Agricultural University.\n\nI am willing to develop some tools making my life easier. \n\nI would like to be a developer of backend.\n\nAnd recently, I've been very interested in open source software.\n\nIf you have some interesting ideas about open source, please feel free to contact me.\n\n### About Me 💡\n\n- 🛠️  Java  | Go | Python\n- 🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis\n- 🎲  Chess | Badminton | Jogging\n- 🎮  League of Legends\n\n### How To Contact Me 📫\n\n+ Email:   xilou31@gmail.com\n+ Wechat:  xilou31\n+ Github:  http://github.com/xilou31","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-04-28 21:13:07\n---\n\n### Who Am I 👨🏻‍💻\n\nHello, here's xilou31, an student of CS in South China Agricultural University.\n\nI am willing to develop some tools making my life easier. \n\nI would like to be a developer of backend.\n\nAnd recently, I've been very interested in open source software.\n\nIf you have some interesting ideas about open source, please feel free to contact me.\n\n### About Me 💡\n\n- 🛠️  Java  | Go | Python\n- 🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis\n- 🎲  Chess | Badminton | Jogging\n- 🎮  League of Legends\n\n### How To Contact Me 📫\n\n+ Email:   xilou31@gmail.com\n+ Wechat:  xilou31\n+ Github:  http://github.com/xilou31","updated":"2021-07-26T14:35:17.459Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckse2m4pk0004hcjy556k9hyw","content":"<h3 id=\"Who-Am-I-👨🏻‍💻\"><a href=\"#Who-Am-I-👨🏻‍💻\" class=\"headerlink\" title=\"Who Am I 👨🏻‍💻\"></a>Who Am I 👨🏻‍💻</h3><p>Hello, here’s xilou31, an student of CS in South China Agricultural University.</p>\n<p>I am willing to develop some tools making my life easier. </p>\n<p>I would like to be a developer of backend.</p>\n<p>And recently, I’ve been very interested in open source software.</p>\n<p>If you have some interesting ideas about open source, please feel free to contact me.</p>\n<h3 id=\"About-Me-💡\"><a href=\"#About-Me-💡\" class=\"headerlink\" title=\"About Me 💡\"></a>About Me 💡</h3><ul>\n<li>🛠️  Java  | Go | Python</li>\n<li>🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis</li>\n<li>🎲  Chess | Badminton | Jogging</li>\n<li>🎮  League of Legends</li>\n</ul>\n<h3 id=\"How-To-Contact-Me-📫\"><a href=\"#How-To-Contact-Me-📫\" class=\"headerlink\" title=\"How To Contact Me 📫\"></a>How To Contact Me 📫</h3><ul>\n<li>Email:   xilou31@gmail.com</li>\n<li>Wechat:  xilou31</li>\n<li>Github:  <a href=\"http://github.com/xilou31\" target=\"_blank\" rel=\"noopener\">http://github.com/xilou31</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Who-Am-I-👨🏻‍💻\"><a href=\"#Who-Am-I-👨🏻‍💻\" class=\"headerlink\" title=\"Who Am I 👨🏻‍💻\"></a>Who Am I 👨🏻‍💻</h3><p>Hello, here’s xilou31, an student of CS in South China Agricultural University.</p>\n<p>I am willing to develop some tools making my life easier. </p>\n<p>I would like to be a developer of backend.</p>\n<p>And recently, I’ve been very interested in open source software.</p>\n<p>If you have some interesting ideas about open source, please feel free to contact me.</p>\n<h3 id=\"About-Me-💡\"><a href=\"#About-Me-💡\" class=\"headerlink\" title=\"About Me 💡\"></a>About Me 💡</h3><ul>\n<li>🛠️  Java  | Go | Python</li>\n<li>🖥️  Mac   | Netty | RocketMQ | Docker | MySQL | Redis</li>\n<li>🎲  Chess | Badminton | Jogging</li>\n<li>🎮  League of Legends</li>\n</ul>\n<h3 id=\"How-To-Contact-Me-📫\"><a href=\"#How-To-Contact-Me-📫\" class=\"headerlink\" title=\"How To Contact Me 📫\"></a>How To Contact Me 📫</h3><ul>\n<li>Email:   xilou31@gmail.com</li>\n<li>Wechat:  xilou31</li>\n<li>Github:  <a href=\"http://github.com/xilou31\" target=\"_blank\" rel=\"noopener\">http://github.com/xilou31</a></li>\n</ul>\n"},{"title":"sitemap","date":"2020-04-28T13:13:54.000Z","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2020-04-28 21:13:54\n---\n","updated":"2021-07-26T14:35:17.464Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"ckse2m4pm0006hcjy5vk452em","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2020-04-28T13:13:26.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2020-04-28 21:13:26\n---\n","updated":"2021-07-26T14:35:17.464Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ckse2m4pn0008hcjyebk6e9j0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"sitemap.xml","date":"2020-04-28T13:13:46.000Z","_content":"","source":"sitemap-xml/index.md","raw":"---\ntitle: sitemap.xml\ndate: 2020-04-28 21:13:46\n---\n","updated":"2021-07-26T14:35:17.464Z","path":"sitemap-xml/index.html","comments":1,"layout":"page","_id":"ckse2m4pr000ahcjyaciu7k7e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-04-28T13:12:58.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-04-28 21:12:58\n---\n","updated":"2021-07-26T14:35:17.464Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckse2m4ps000chcjyafz76thn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"abbrlink":"dcb67373","date":"2021-07-01T16:00:00.000Z","description":"DH 密钥交换算法","_content":"Deffie-Hellman 简称 DH 算法。\n\n### 背景\n\n对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。\n\n但是问题来了，对称加密需要双方提前协商好密钥。\n\n在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。\n\n但是密钥在不安全的信道是无法保证安全的。\n\n所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。\n\n### 原理\n\nDH 算法本质上是使用非对称加密。\n\n我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：\n\n1. 甲首选选择一个素数`p`，例如 509，底数`g`，任选，例如 5，随机数`a`，例如 123，然后计算`A=g^a mod p`，结果是 215，然后，甲发送`p＝509`，`g=5`，`A=215`给乙；\n\n2. 乙方收到后，也选择一个随机数`b`，例如，456，然后计算`B=g^b mod p`，结果是 181，乙再同时计算`s=A^b mod p`，结果是 121；\n\n3. 乙把计算的`B=181`发给甲，甲计算`s＝B^a mod p`的余数，计算结果与乙算出的结果一样，都是 121。\n\n所以最终双方协商出的密钥`s`是 121。\n\n注意到这个密钥`s`并没有在网络上传输。而通过网络传输的`p`，`g`，`A`和`B`是无法推算出`s`的，因为实际算法选择的素数是非常大的。\n\n所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。\n\n如果我们把`a`看成甲的私钥，`A`看成甲的公钥，`b`看成乙的私钥，`B`看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥`secretKey`，DH 算法通过数学定律保证了双方各自计算出的`secretKey`是相同的。\n\n### 缺点\n\nDH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。\n\n当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。\n\n至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。\n","source":"_posts/Deffie-Hellman 密钥交换算法.md","raw":"---\nabbrlink: dcb67373\ndate: 2021-07-02\ndescription: DH 密钥交换算法\n---\nDeffie-Hellman 简称 DH 算法。\n\n### 背景\n\n对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。\n\n但是问题来了，对称加密需要双方提前协商好密钥。\n\n在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。\n\n但是密钥在不安全的信道是无法保证安全的。\n\n所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。\n\n### 原理\n\nDH 算法本质上是使用非对称加密。\n\n我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：\n\n1. 甲首选选择一个素数`p`，例如 509，底数`g`，任选，例如 5，随机数`a`，例如 123，然后计算`A=g^a mod p`，结果是 215，然后，甲发送`p＝509`，`g=5`，`A=215`给乙；\n\n2. 乙方收到后，也选择一个随机数`b`，例如，456，然后计算`B=g^b mod p`，结果是 181，乙再同时计算`s=A^b mod p`，结果是 121；\n\n3. 乙把计算的`B=181`发给甲，甲计算`s＝B^a mod p`的余数，计算结果与乙算出的结果一样，都是 121。\n\n所以最终双方协商出的密钥`s`是 121。\n\n注意到这个密钥`s`并没有在网络上传输。而通过网络传输的`p`，`g`，`A`和`B`是无法推算出`s`的，因为实际算法选择的素数是非常大的。\n\n所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。\n\n如果我们把`a`看成甲的私钥，`A`看成甲的公钥，`b`看成乙的私钥，`B`看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥`secretKey`，DH 算法通过数学定律保证了双方各自计算出的`secretKey`是相同的。\n\n### 缺点\n\nDH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。\n\n当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。\n\n至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。\n","slug":"Deffie-Hellman 密钥交换算法","published":1,"updated":"2021-08-16T03:37:33.980Z","title":"Deffie-Hellman 密钥交换算法","_id":"ckse2m4ph0001hcjygy3n7wzw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Deffie-Hellman 简称 DH 算法。</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。</p>\n<p>但是问题来了，对称加密需要双方提前协商好密钥。</p>\n<p>在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。</p>\n<p>但是密钥在不安全的信道是无法保证安全的。</p>\n<p>所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>DH 算法本质上是使用非对称加密。</p>\n<p>我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：</p>\n<ol>\n<li><p>甲首选选择一个素数<code>p</code>，例如 509，底数<code>g</code>，任选，例如 5，随机数<code>a</code>，例如 123，然后计算<code>A=g^a mod p</code>，结果是 215，然后，甲发送<code>p＝509</code>，<code>g=5</code>，<code>A=215</code>给乙；</p>\n</li>\n<li><p>乙方收到后，也选择一个随机数<code>b</code>，例如，456，然后计算<code>B=g^b mod p</code>，结果是 181，乙再同时计算<code>s=A^b mod p</code>，结果是 121；</p>\n</li>\n<li><p>乙把计算的<code>B=181</code>发给甲，甲计算<code>s＝B^a mod p</code>的余数，计算结果与乙算出的结果一样，都是 121。</p>\n</li>\n</ol>\n<p>所以最终双方协商出的密钥<code>s</code>是 121。</p>\n<p>注意到这个密钥<code>s</code>并没有在网络上传输。而通过网络传输的<code>p</code>，<code>g</code>，<code>A</code>和<code>B</code>是无法推算出<code>s</code>的，因为实际算法选择的素数是非常大的。</p>\n<p>所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。</p>\n<p>如果我们把<code>a</code>看成甲的私钥，<code>A</code>看成甲的公钥，<code>b</code>看成乙的私钥，<code>B</code>看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥<code>secretKey</code>，DH 算法通过数学定律保证了双方各自计算出的<code>secretKey</code>是相同的。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>DH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。</p>\n<p>当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。</p>\n<p>至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Deffie-Hellman 简称 DH 算法。</p>\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>对称加密算法，解决了数据加密的问题。加密后的密文，即使被中间人截获，没有密钥也无法破解。</p>\n<p>但是问题来了，对称加密需要双方提前协商好密钥。</p>\n<p>在不安全的信道上传输信息是可以的，因为只要密钥不泄漏，黑客也无法破解信息。</p>\n<p>但是密钥在不安全的信道是无法保证安全的。</p>\n<p>所以 DH 算法解决的问题就是，如何保证密钥在不安全的信道下的安全。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>DH 算法本质上是使用非对称加密。</p>\n<p>我们来看 DH 算法交换密钥的步骤。假设甲乙双方需要传递密钥，他们之间可以这么做：</p>\n<ol>\n<li><p>甲首选选择一个素数<code>p</code>，例如 509，底数<code>g</code>，任选，例如 5，随机数<code>a</code>，例如 123，然后计算<code>A=g^a mod p</code>，结果是 215，然后，甲发送<code>p＝509</code>，<code>g=5</code>，<code>A=215</code>给乙；</p>\n</li>\n<li><p>乙方收到后，也选择一个随机数<code>b</code>，例如，456，然后计算<code>B=g^b mod p</code>，结果是 181，乙再同时计算<code>s=A^b mod p</code>，结果是 121；</p>\n</li>\n<li><p>乙把计算的<code>B=181</code>发给甲，甲计算<code>s＝B^a mod p</code>的余数，计算结果与乙算出的结果一样，都是 121。</p>\n</li>\n</ol>\n<p>所以最终双方协商出的密钥<code>s</code>是 121。</p>\n<p>注意到这个密钥<code>s</code>并没有在网络上传输。而通过网络传输的<code>p</code>，<code>g</code>，<code>A</code>和<code>B</code>是无法推算出<code>s</code>的，因为实际算法选择的素数是非常大的。</p>\n<p>所以，更确切地说，DH 算法是一个密钥协商算法，双方最终协商出一个共同的密钥，而这个密钥不会通过网络传输。</p>\n<p>如果我们把<code>a</code>看成甲的私钥，<code>A</code>看成甲的公钥，<code>b</code>看成乙的私钥，<code>B</code>看成乙的公钥，DH 算法的本质就是双方各自生成自己的私钥和公钥，私钥仅对自己可见，然后交换公钥，并根据自己的私钥和对方的公钥，生成最终的密钥<code>secretKey</code>，DH 算法通过数学定律保证了双方各自计算出的<code>secretKey</code>是相同的。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>DH 算法解决了密钥交换的安全性问题，但是没有解决中间人攻击。</p>\n<p>当中间人构造属于自己的公钥，并与甲乙双方通信，即可造成中间人攻击。</p>\n<p>至于怎么解决中间人攻击，可以参考 HTTPS，即公钥需要经过验证，需要有 CA 颁发的证书，这样就能确认对方的身份。</p>\n"},{"abbrlink":"7784fafc","date":"2021-06-19T16:00:00.000Z","description":"LeetCode 各种题型集合的题库。","_content":"## 贪心算法\n\n### 分配问题\n\n- [x] 455. Assign Cookies (Easy)\n- [x] 135. Candy (Hard)\n\n### 区间问题\n\n- [ ] 435. Non-overlapping Intervals (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [x] 605. Can Place Flowers (Easy)\n- [ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)\n- [ ] 763. Partition Labels (Medium)\n- [x] 122. Best Time to Buy and Sell Stock II (Easy)\n\n#### 进阶难度\n\n- [ ] 406. Queue Reconstruction by Height (Medium)\n- [ ] 665. Non-decreasing Array (Easy)\n\n## 双指针\n\n### Two Sum\n\n- [x] 167. Two Sum II - Input array is sorted (Easy)\n\n### 归并两个有序数组\n\n- [ ] 88. Merge Sorted Array (Easy)\n\n### 快慢指针\n\n- [ ] 142. Linked List Cycle II (Medium)\n\n### 滑动窗口\n\n- [ ] 76. Minimum Window Substring (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 633. Sum of Square Numbers (Easy)\n- [ ] 680. Valid Palindrome II (Easy)\n- [ ] 524. Longest Word in Dictionary through Deleting (Medium)\n\n#### 进阶难度\n\n- [ ] 340. Longest Substring with At Most K Distinct Characters (Hard)\n\n## 二分查找\n\n### 求开方\n\n- [ ] 69. Sqrt(x) (Easy)\n\n### 查找区间\n\n- [ ] 34. Find First and Last Position of Element in Sorted Array (Medium)\n\n### 旋转数组查找数字\n\n- [ ] 81. Search in Rotated Sorted Array II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 154. Find Minimum in Rotated Sorted Array II (Medium)\n- [ ] 540. Single Element in a Sorted Array (Medium)\n\n#### 进阶难度\n\n- [ ] 4. Median of Two Sorted Arrays (Hard)\n\n## 排序算法\n\n### 常用排序\n\n- [ ] 快速排序(Quicksort)\n- [ ] 归并排序(Merge Sort)\n- [ ] 插入排序(Insertion Sort)\n- [ ] 冒泡排序(Bubble Sort)\n- [ ] 选择排序(Selection Sort)\n\n### 快速选择\n\n- [ ] 215. Kth Largest Element in an Array\n\n### 桶排序\n\n- [ ] 347. Top K Frequent Elements (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 451. Sort Characters By Frequency (Medium)\n\n#### 进阶难度\n\n- [ ] 75. Sort Colors (Medium)\n\n## 搜索算法\n\n### 深度优先\n\n- [ ] 695. Max Area of Island (Easy)\n- [ ] 547. Friend Circles (Medium)\n- [ ] 417. Pacific Atlantic Water Flow (Medium)\n\n### 回溯法\n\n- [ ] 46. Permutations (Medium)\n- [ ] 77. Combinations (Medium)\n- [ ] 79. Word Search (Medium)\n- [ ] 51. N-Queens (Hard)\n\n## 广度优先\n\n- [ ] 934. Shortest Bridge (Medium)\n- [ ] 126. Word Ladder II (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 130. Surrounded Regions (Medium)\n- [ ] 257. Binary Tree Paths (Easy)\n\n#### 进阶难度\n\n- [ ] 47. Permutations II (Medium)\n- [ ] 40. Combination Sum II (Medium)\n- [ ] 37. Sudoku Solver (Hard)\n- [ ] 310. Minimum Height Trees (Medium)\n\n## 动态规划\n\n### 一维动态规划\n\n- [x] 70. Climbing Stairs (Easy)\n- [x] 198. House Robber (Easy)\n- [ ] 413. Arithmetic Slices (Medium)\n\n### 二维动态规划\n\n- [ ] 64. Minimum Path Sum (Medium)\n- [ ] 542. 01 Matrix (Medium)\n- [ ] 221. Maximal Square (Medium)\n\n### 分割类型\n\n- [ ] 279. Perfect Squares (Medium)\n- [ ] 91. Decode Ways (Medium)\n- [ ] 139. Word Break (Medium)\n\n### 子序列\n\n- [ ] 300. Longest Increasing Subsequence (Medium)\n- [ ] 1143. Longest Commom Subsequence (Medium)\n\n### 背包\n\n- [ ] 416. Partition Equal Subset Sum (Medium)\n- [ ] 474. Ones and Zeroes (Medium)\n- [ ] 322. Coin Change (Medium)\n\n### 字符串编辑\n\n- [ ] 72. Edit Distance (Hard)\n- [ ] 650. 2 Keys Keyboard (Medium)\n- [ ] 10. Regular Expression Matching (Hard)\n\n### 股票交易\n\n- [x] 121. Best Time to Buy and Sell Stock (Easy)\n- [ ] 188. Best Time to Buy and Sell Stock IV (Hard)\n- [ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 213. House Robber II (Medium)\n- [x] 53. Maximum Subarray (Easy)\n- [ ] 343. Integer Break (Medium)\n- [ ] 583. Delete Operation for Two Strings (Medium)\n\n#### 进阶难度\n\n- [ ] 646. Maximum Length of Pair Chain (Medium)\n- [ ] 376. Wiggle Subsequence (Medium)\n- [ ] 494. Target Sum (Medium)\n- [ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)\n\n## 分治法\n\n### 表达式问题\n\n- [ ] 241. Different Ways to Add Parentheses (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 932. Beautiful Array (Medium)\n\n#### 进阶难度\n\n- [ ] 312. Burst Balloons (Hard)\n\n## 数学问题\n\n### 公倍数和公因数\n\n- [ ] 辗转相除法\n\n### 质数\n\n- [ ] 204. Count Primes (Easy)\n\n### 数字处理\n\n- [ ] 504. Base 7 (Easy)\n- [ ] 172. Factorial Trailing Zeroes\n- [ ] 415. Add Strings (Easy)\n- [ ] 326. Power of Three (Easy)\n\n### 随机与取样\n\n- [ ] 384. Shuffle an Array (Medium)\n- [ ] 528. Random Pick with Weight (Medium)\n- [ ] 382. Linked List Random Node (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 168. Excel Sheet Column Title (Easy)\n- [ ] 67. Add Binary (Easy)\n- [ ] 238. Product of Array Except Self (Medium)\n\n#### 进阶难度\n\n- [ ] 462. Minimum Moves to Equal Array Elements II (Medium)\n- [ ] 169. Majority Element (Easy)\n- [ ] 470. Implement Rand10() Using Rand7() (Medium)\n- [ ] 202. Happy Number (Easy)\n\n## 位运算\n\n### 位运算基础问题\n\n- [ ] 461. Hamming Distance (Easy)\n- [ ] 190. Reverse Bits (Easy)\n- [ ] 136. Single Number (Easy)\n\n### 二进制特性\n\n- [ ] 342. Power of Four (Easy)\n- [ ] 318. Maximum Product of Word Lengths (Medium)\n- [ ] 338. Counting Bits (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 268. Missing Number (Easy)\n- [ ] 693. Binary Number with Alternating Bits (Easy)\n- [ ] 476. Number Complement (Easy)\n\n#### 进阶难度\n\n- [ ] 260. Single Number III (Medium)\n\n## 数据结构\n\n### 数组\n\n- [x] 448. Find All Numbers Disappeared in an Array (Easy)\n- [ ] 48. Rotate Image (Medium)\n- [ ] 240. Search a 2D Matrix II (Medium)\n- [ ] 769. Max Chunks To Make Sorted (Medium)\n\n### 栈和队列\n\n- [ ] 232. Implement Queue using Stacks (Easy)\n- [ ] 155. Min Stack (Easy)\n- [ ] 20. Valid Parentheses (Easy)\n\n### 单调栈\n\n- [ ] 739. Daily Temperatures (Medium)\n\n### 优先队列\n\n- [ ] 23. Merge k Sorted Lists (Hard)\n- [ ] 218. The Skyline Problem (Hard)\n\n### 双端队列\n\n- [ ] 239. Sliding Window Maximum (Hard)\n\n### 哈希表\n\n- [ ] 1. Two Sum (Easy)\n- [ ] 128. Longest Consecutive Sequence (Hard)\n- [ ] 149. Max Points on a Line (Hard)\n\n### 多重集合和映射\n\n- [ ] 332. Reconstruct Itinerary (Medium)\n\n### 前缀和和积分图\n\n- [ ] 303. Range Sum Query - Immutable (Easy)\n- [ ] 304. Range Sum Query 2D - Immutable (Medium)\n- [ ] 560. Subarray Sum Equals K (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 566. Reshape the Matrix (Easy)\n- [ ] 225. Implement Stack using Queues (Easy)\n- [ ] 503. Next Greater Element II (Medium)\n- [ ] 217. Contains Duplicate (Easy)\n- [ ] 697. Degree of an Array (Easy)\n- [ ] 594. Longest Harmonious Subsequence (Easy)\n\n#### 进阶难度\n\n- [ ] 287. Find the Duplicate Number (Medium)\n- [ ] 313. Super Ugly Number (Medium)\n- [ ] 870. Advantage Shuffle (Medium)\n- [ ] 307. Range Sum Query - Mutable (Medium)\n\n## 字符串\n\n### 字符串比较\n\n- [x] 242. Valid Anagram (Easy)\n- [x] 205. Isomorphic Strings (Easy)\n- [ ] 647. Palindromic Substrings (Medium)\n- [ ] 696. Count Binary Substrings (Easy)\n\n### 字符串理解\n\n- [ ] 227. Basic Calculator II (Medium)\n\n### 字符串匹配\n\n- [ ] 28. Implement strStr() (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [x] 409. Longest Palindrome (Easy)\n- [ ] 3. Longest Substring Without Repeating Characters (Medium)\n\n#### 进阶难度\n\n- [ ] 772. Basic Calculator III (Hard)\n- [ ] 5. Longest Palindromic Substring (Medium)\n\n## 链表\n\n### 链表基本操作\n\n- [ ] 206. Reverse Linked List (Easy)\n- [ ] 21. Merge Two Sorted Lists (Easy)\n- [ ] 24. Swap Nodes in Pairs (Medium)\n\n### 其他链表技巧\n\n- [ ] 160. Intersection of Two Linked Lists (Easy)\n- [ ] 234. Palindrome Linked List (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 83. Remove Duplicates from Sorted List (Easy)\n- [ ] 328. Odd Even Linked List (Medium)\n- [ ] 19. Remove Nth Node From End of List (Medium)\n\n#### 进阶难度\n\n- [ ] 148. Sort List (Medium)\n\n## 树\n\n### 树的递归\n\n- [ ] 104. Maximum Depth of Binary Tree (Easy)\n- [ ] 110. Balanced Binary Tree (Easy)\n- [ ] 543. Diameter of Binary Tree (Easy)\n- [ ] 437. Path Sum III (Easy)\n- [ ] 101. Symmetric Tree (Easy)\n- [ ] 1110. Delete Nodes And Return Forest (Medium)\n\n### 层次遍历\n\n- [ ] 637. Average of Levels in Binary Tree (Easy)\n\n### 前中后序遍历\n\n- [ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)\n- [ ] 144. Binary Tree Preorder Traversal (Medium)\n\n### 二叉搜索树\n\n- [ ] 99. Recover Binary Search Tree (Hard)\n- [ ] 669. Trim a Binary Search Tree (Easy)\n\n### 字典树\n\n- [ ] 208. Implement Trie (Prefix Tree) (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 226. Invert Binary Tree (Easy)\n- [ ] 617. Merge Two Binary Trees (Easy)\n- [ ] 572. Subtree of Another Tree (Easy)\n- [ ] 404. Sum of Left Leaves (Easy)\n- [ ] 513. Find Bottom Left Tree Value (Easy)\n- [ ] 538. Convert BST to Greater Tree (Easy)\n- [ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)\n- [ ] 530. Minimum Absolute Difference in BST (Easy)\n\n#### 进阶难度\n\n- [ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)\n- [ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)\n- [ ] 94. Binary Tree Inorder Traversal (Medium)\n- [ ] 145. Binary Tree Postorder Traversal (Medium)\n- [ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)\n- [ ] 109. Convert Sorted List to Binary Search Tree (Medium)\n- [ ] 897. Increasing Order Search Tree (Easy)\n- [ ] 653. Two Sum IV - Input is a BST (Easy)\n- [ ] 450. Delete Node in a BST (Medium)\n\n## 图\n\n### 二分图\n\n- [ ] 785. Is Graph Bipartite? (Medium)\n\n### 拓扑排序\n\n- [ ] 210. Course Schedule II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1059. All Paths from Source Lead to Destination (Medium)\n\n#### 进阶难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 882. Reachable Nodes In Subdivided Graph (Hard)\n\n## 高阶数据结构\n\n### 并查集\n\n- [ ] 684. Redundant Connection (Medium)\n\n### 复合数据结构\n\n- [ ] 146. LRU Cache (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 380. Insert Delete GetRandom O(1) (Medium)\n\n#### 进阶难度\n\n- [ ] 432. All O‘one Data Structure (Hard)\n- [ ] 716. Max Stack (Easy)\n","source":"_posts/LeetCode刷题题库.md","raw":"---\nabbrlink: 7784fafc\ndate: 2021-06-20\ndescription: LeetCode 各种题型集合的题库。\n---\n## 贪心算法\n\n### 分配问题\n\n- [x] 455. Assign Cookies (Easy)\n- [x] 135. Candy (Hard)\n\n### 区间问题\n\n- [ ] 435. Non-overlapping Intervals (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [x] 605. Can Place Flowers (Easy)\n- [ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)\n- [ ] 763. Partition Labels (Medium)\n- [x] 122. Best Time to Buy and Sell Stock II (Easy)\n\n#### 进阶难度\n\n- [ ] 406. Queue Reconstruction by Height (Medium)\n- [ ] 665. Non-decreasing Array (Easy)\n\n## 双指针\n\n### Two Sum\n\n- [x] 167. Two Sum II - Input array is sorted (Easy)\n\n### 归并两个有序数组\n\n- [ ] 88. Merge Sorted Array (Easy)\n\n### 快慢指针\n\n- [ ] 142. Linked List Cycle II (Medium)\n\n### 滑动窗口\n\n- [ ] 76. Minimum Window Substring (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 633. Sum of Square Numbers (Easy)\n- [ ] 680. Valid Palindrome II (Easy)\n- [ ] 524. Longest Word in Dictionary through Deleting (Medium)\n\n#### 进阶难度\n\n- [ ] 340. Longest Substring with At Most K Distinct Characters (Hard)\n\n## 二分查找\n\n### 求开方\n\n- [ ] 69. Sqrt(x) (Easy)\n\n### 查找区间\n\n- [ ] 34. Find First and Last Position of Element in Sorted Array (Medium)\n\n### 旋转数组查找数字\n\n- [ ] 81. Search in Rotated Sorted Array II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 154. Find Minimum in Rotated Sorted Array II (Medium)\n- [ ] 540. Single Element in a Sorted Array (Medium)\n\n#### 进阶难度\n\n- [ ] 4. Median of Two Sorted Arrays (Hard)\n\n## 排序算法\n\n### 常用排序\n\n- [ ] 快速排序(Quicksort)\n- [ ] 归并排序(Merge Sort)\n- [ ] 插入排序(Insertion Sort)\n- [ ] 冒泡排序(Bubble Sort)\n- [ ] 选择排序(Selection Sort)\n\n### 快速选择\n\n- [ ] 215. Kth Largest Element in an Array\n\n### 桶排序\n\n- [ ] 347. Top K Frequent Elements (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 451. Sort Characters By Frequency (Medium)\n\n#### 进阶难度\n\n- [ ] 75. Sort Colors (Medium)\n\n## 搜索算法\n\n### 深度优先\n\n- [ ] 695. Max Area of Island (Easy)\n- [ ] 547. Friend Circles (Medium)\n- [ ] 417. Pacific Atlantic Water Flow (Medium)\n\n### 回溯法\n\n- [ ] 46. Permutations (Medium)\n- [ ] 77. Combinations (Medium)\n- [ ] 79. Word Search (Medium)\n- [ ] 51. N-Queens (Hard)\n\n## 广度优先\n\n- [ ] 934. Shortest Bridge (Medium)\n- [ ] 126. Word Ladder II (Hard)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 130. Surrounded Regions (Medium)\n- [ ] 257. Binary Tree Paths (Easy)\n\n#### 进阶难度\n\n- [ ] 47. Permutations II (Medium)\n- [ ] 40. Combination Sum II (Medium)\n- [ ] 37. Sudoku Solver (Hard)\n- [ ] 310. Minimum Height Trees (Medium)\n\n## 动态规划\n\n### 一维动态规划\n\n- [x] 70. Climbing Stairs (Easy)\n- [x] 198. House Robber (Easy)\n- [ ] 413. Arithmetic Slices (Medium)\n\n### 二维动态规划\n\n- [ ] 64. Minimum Path Sum (Medium)\n- [ ] 542. 01 Matrix (Medium)\n- [ ] 221. Maximal Square (Medium)\n\n### 分割类型\n\n- [ ] 279. Perfect Squares (Medium)\n- [ ] 91. Decode Ways (Medium)\n- [ ] 139. Word Break (Medium)\n\n### 子序列\n\n- [ ] 300. Longest Increasing Subsequence (Medium)\n- [ ] 1143. Longest Commom Subsequence (Medium)\n\n### 背包\n\n- [ ] 416. Partition Equal Subset Sum (Medium)\n- [ ] 474. Ones and Zeroes (Medium)\n- [ ] 322. Coin Change (Medium)\n\n### 字符串编辑\n\n- [ ] 72. Edit Distance (Hard)\n- [ ] 650. 2 Keys Keyboard (Medium)\n- [ ] 10. Regular Expression Matching (Hard)\n\n### 股票交易\n\n- [x] 121. Best Time to Buy and Sell Stock (Easy)\n- [ ] 188. Best Time to Buy and Sell Stock IV (Hard)\n- [ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 213. House Robber II (Medium)\n- [x] 53. Maximum Subarray (Easy)\n- [ ] 343. Integer Break (Medium)\n- [ ] 583. Delete Operation for Two Strings (Medium)\n\n#### 进阶难度\n\n- [ ] 646. Maximum Length of Pair Chain (Medium)\n- [ ] 376. Wiggle Subsequence (Medium)\n- [ ] 494. Target Sum (Medium)\n- [ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)\n\n## 分治法\n\n### 表达式问题\n\n- [ ] 241. Different Ways to Add Parentheses (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 932. Beautiful Array (Medium)\n\n#### 进阶难度\n\n- [ ] 312. Burst Balloons (Hard)\n\n## 数学问题\n\n### 公倍数和公因数\n\n- [ ] 辗转相除法\n\n### 质数\n\n- [ ] 204. Count Primes (Easy)\n\n### 数字处理\n\n- [ ] 504. Base 7 (Easy)\n- [ ] 172. Factorial Trailing Zeroes\n- [ ] 415. Add Strings (Easy)\n- [ ] 326. Power of Three (Easy)\n\n### 随机与取样\n\n- [ ] 384. Shuffle an Array (Medium)\n- [ ] 528. Random Pick with Weight (Medium)\n- [ ] 382. Linked List Random Node (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 168. Excel Sheet Column Title (Easy)\n- [ ] 67. Add Binary (Easy)\n- [ ] 238. Product of Array Except Self (Medium)\n\n#### 进阶难度\n\n- [ ] 462. Minimum Moves to Equal Array Elements II (Medium)\n- [ ] 169. Majority Element (Easy)\n- [ ] 470. Implement Rand10() Using Rand7() (Medium)\n- [ ] 202. Happy Number (Easy)\n\n## 位运算\n\n### 位运算基础问题\n\n- [ ] 461. Hamming Distance (Easy)\n- [ ] 190. Reverse Bits (Easy)\n- [ ] 136. Single Number (Easy)\n\n### 二进制特性\n\n- [ ] 342. Power of Four (Easy)\n- [ ] 318. Maximum Product of Word Lengths (Medium)\n- [ ] 338. Counting Bits (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 268. Missing Number (Easy)\n- [ ] 693. Binary Number with Alternating Bits (Easy)\n- [ ] 476. Number Complement (Easy)\n\n#### 进阶难度\n\n- [ ] 260. Single Number III (Medium)\n\n## 数据结构\n\n### 数组\n\n- [x] 448. Find All Numbers Disappeared in an Array (Easy)\n- [ ] 48. Rotate Image (Medium)\n- [ ] 240. Search a 2D Matrix II (Medium)\n- [ ] 769. Max Chunks To Make Sorted (Medium)\n\n### 栈和队列\n\n- [ ] 232. Implement Queue using Stacks (Easy)\n- [ ] 155. Min Stack (Easy)\n- [ ] 20. Valid Parentheses (Easy)\n\n### 单调栈\n\n- [ ] 739. Daily Temperatures (Medium)\n\n### 优先队列\n\n- [ ] 23. Merge k Sorted Lists (Hard)\n- [ ] 218. The Skyline Problem (Hard)\n\n### 双端队列\n\n- [ ] 239. Sliding Window Maximum (Hard)\n\n### 哈希表\n\n- [ ] 1. Two Sum (Easy)\n- [ ] 128. Longest Consecutive Sequence (Hard)\n- [ ] 149. Max Points on a Line (Hard)\n\n### 多重集合和映射\n\n- [ ] 332. Reconstruct Itinerary (Medium)\n\n### 前缀和和积分图\n\n- [ ] 303. Range Sum Query - Immutable (Easy)\n- [ ] 304. Range Sum Query 2D - Immutable (Medium)\n- [ ] 560. Subarray Sum Equals K (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 566. Reshape the Matrix (Easy)\n- [ ] 225. Implement Stack using Queues (Easy)\n- [ ] 503. Next Greater Element II (Medium)\n- [ ] 217. Contains Duplicate (Easy)\n- [ ] 697. Degree of an Array (Easy)\n- [ ] 594. Longest Harmonious Subsequence (Easy)\n\n#### 进阶难度\n\n- [ ] 287. Find the Duplicate Number (Medium)\n- [ ] 313. Super Ugly Number (Medium)\n- [ ] 870. Advantage Shuffle (Medium)\n- [ ] 307. Range Sum Query - Mutable (Medium)\n\n## 字符串\n\n### 字符串比较\n\n- [x] 242. Valid Anagram (Easy)\n- [x] 205. Isomorphic Strings (Easy)\n- [ ] 647. Palindromic Substrings (Medium)\n- [ ] 696. Count Binary Substrings (Easy)\n\n### 字符串理解\n\n- [ ] 227. Basic Calculator II (Medium)\n\n### 字符串匹配\n\n- [ ] 28. Implement strStr() (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [x] 409. Longest Palindrome (Easy)\n- [ ] 3. Longest Substring Without Repeating Characters (Medium)\n\n#### 进阶难度\n\n- [ ] 772. Basic Calculator III (Hard)\n- [ ] 5. Longest Palindromic Substring (Medium)\n\n## 链表\n\n### 链表基本操作\n\n- [ ] 206. Reverse Linked List (Easy)\n- [ ] 21. Merge Two Sorted Lists (Easy)\n- [ ] 24. Swap Nodes in Pairs (Medium)\n\n### 其他链表技巧\n\n- [ ] 160. Intersection of Two Linked Lists (Easy)\n- [ ] 234. Palindrome Linked List (Easy)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 83. Remove Duplicates from Sorted List (Easy)\n- [ ] 328. Odd Even Linked List (Medium)\n- [ ] 19. Remove Nth Node From End of List (Medium)\n\n#### 进阶难度\n\n- [ ] 148. Sort List (Medium)\n\n## 树\n\n### 树的递归\n\n- [ ] 104. Maximum Depth of Binary Tree (Easy)\n- [ ] 110. Balanced Binary Tree (Easy)\n- [ ] 543. Diameter of Binary Tree (Easy)\n- [ ] 437. Path Sum III (Easy)\n- [ ] 101. Symmetric Tree (Easy)\n- [ ] 1110. Delete Nodes And Return Forest (Medium)\n\n### 层次遍历\n\n- [ ] 637. Average of Levels in Binary Tree (Easy)\n\n### 前中后序遍历\n\n- [ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)\n- [ ] 144. Binary Tree Preorder Traversal (Medium)\n\n### 二叉搜索树\n\n- [ ] 99. Recover Binary Search Tree (Hard)\n- [ ] 669. Trim a Binary Search Tree (Easy)\n\n### 字典树\n\n- [ ] 208. Implement Trie (Prefix Tree) (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 226. Invert Binary Tree (Easy)\n- [ ] 617. Merge Two Binary Trees (Easy)\n- [ ] 572. Subtree of Another Tree (Easy)\n- [ ] 404. Sum of Left Leaves (Easy)\n- [ ] 513. Find Bottom Left Tree Value (Easy)\n- [ ] 538. Convert BST to Greater Tree (Easy)\n- [ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)\n- [ ] 530. Minimum Absolute Difference in BST (Easy)\n\n#### 进阶难度\n\n- [ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)\n- [ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)\n- [ ] 94. Binary Tree Inorder Traversal (Medium)\n- [ ] 145. Binary Tree Postorder Traversal (Medium)\n- [ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)\n- [ ] 109. Convert Sorted List to Binary Search Tree (Medium)\n- [ ] 897. Increasing Order Search Tree (Easy)\n- [ ] 653. Two Sum IV - Input is a BST (Easy)\n- [ ] 450. Delete Node in a BST (Medium)\n\n## 图\n\n### 二分图\n\n- [ ] 785. Is Graph Bipartite? (Medium)\n\n### 拓扑排序\n\n- [ ] 210. Course Schedule II (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1059. All Paths from Source Lead to Destination (Medium)\n\n#### 进阶难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 882. Reachable Nodes In Subdivided Graph (Hard)\n\n## 高阶数据结构\n\n### 并查集\n\n- [ ] 684. Redundant Connection (Medium)\n\n### 复合数据结构\n\n- [ ] 146. LRU Cache (Medium)\n\n### 练习\n\n#### 基础难度\n\n- [ ] 1135. Connecting Cities With Minimum Cost (Medium)\n- [ ] 380. Insert Delete GetRandom O(1) (Medium)\n\n#### 进阶难度\n\n- [ ] 432. All O‘one Data Structure (Hard)\n- [ ] 716. Max Stack (Easy)\n","slug":"LeetCode刷题题库","published":1,"updated":"2021-08-16T03:37:58.884Z","title":"LeetCode刷题题库","_id":"ckse2m4pj0003hcjy05k44lna","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><h3 id=\"分配问题\"><a href=\"#分配问题\" class=\"headerlink\" title=\"分配问题\"></a>分配问题</h3><ul>\n<li>[x] 455. Assign Cookies (Easy)</li>\n<li>[x] 135. Candy (Hard)</li>\n</ul>\n<h3 id=\"区间问题\"><a href=\"#区间问题\" class=\"headerlink\" title=\"区间问题\"></a>区间问题</h3><ul>\n<li>[ ] 435. Non-overlapping Intervals (Medium)</li>\n</ul>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度\"><a href=\"#基础难度\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 605. Can Place Flowers (Easy)</li>\n<li>[ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)</li>\n<li>[ ] 763. Partition Labels (Medium)</li>\n<li>[x] 122. Best Time to Buy and Sell Stock II (Easy)</li>\n</ul>\n<h4 id=\"进阶难度\"><a href=\"#进阶难度\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 406. Queue Reconstruction by Height (Medium)</li>\n<li>[ ] 665. Non-decreasing Array (Easy)</li>\n</ul>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><ul>\n<li>[x] 167. Two Sum II - Input array is sorted (Easy)</li>\n</ul>\n<h3 id=\"归并两个有序数组\"><a href=\"#归并两个有序数组\" class=\"headerlink\" title=\"归并两个有序数组\"></a>归并两个有序数组</h3><ul>\n<li>[ ] 88. Merge Sorted Array (Easy)</li>\n</ul>\n<h3 id=\"快慢指针\"><a href=\"#快慢指针\" class=\"headerlink\" title=\"快慢指针\"></a>快慢指针</h3><ul>\n<li>[ ] 142. Linked List Cycle II (Medium)</li>\n</ul>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><ul>\n<li>[ ] 76. Minimum Window Substring (Hard)</li>\n</ul>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-1\"><a href=\"#基础难度-1\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 633. Sum of Square Numbers (Easy)</li>\n<li>[ ] 680. Valid Palindrome II (Easy)</li>\n<li>[ ] 524. Longest Word in Dictionary through Deleting (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-1\"><a href=\"#进阶难度-1\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 340. Longest Substring with At Most K Distinct Characters (Hard)</li>\n</ul>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><h3 id=\"求开方\"><a href=\"#求开方\" class=\"headerlink\" title=\"求开方\"></a>求开方</h3><ul>\n<li>[ ] 69. Sqrt(x) (Easy)</li>\n</ul>\n<h3 id=\"查找区间\"><a href=\"#查找区间\" class=\"headerlink\" title=\"查找区间\"></a>查找区间</h3><ul>\n<li>[ ] 34. Find First and Last Position of Element in Sorted Array (Medium)</li>\n</ul>\n<h3 id=\"旋转数组查找数字\"><a href=\"#旋转数组查找数字\" class=\"headerlink\" title=\"旋转数组查找数字\"></a>旋转数组查找数字</h3><ul>\n<li>[ ] 81. Search in Rotated Sorted Array II (Medium)</li>\n</ul>\n<h3 id=\"练习-2\"><a href=\"#练习-2\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-2\"><a href=\"#基础难度-2\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 154. Find Minimum in Rotated Sorted Array II (Medium)</li>\n<li>[ ] 540. Single Element in a Sorted Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-2\"><a href=\"#进阶难度-2\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 4. Median of Two Sorted Arrays (Hard)</li>\n</ul>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"常用排序\"><a href=\"#常用排序\" class=\"headerlink\" title=\"常用排序\"></a>常用排序</h3><ul>\n<li>[ ] 快速排序(Quicksort)</li>\n<li>[ ] 归并排序(Merge Sort)</li>\n<li>[ ] 插入排序(Insertion Sort)</li>\n<li>[ ] 冒泡排序(Bubble Sort)</li>\n<li>[ ] 选择排序(Selection Sort)</li>\n</ul>\n<h3 id=\"快速选择\"><a href=\"#快速选择\" class=\"headerlink\" title=\"快速选择\"></a>快速选择</h3><ul>\n<li>[ ] 215. Kth Largest Element in an Array</li>\n</ul>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><ul>\n<li>[ ] 347. Top K Frequent Elements (Medium)</li>\n</ul>\n<h3 id=\"练习-3\"><a href=\"#练习-3\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-3\"><a href=\"#基础难度-3\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 451. Sort Characters By Frequency (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-3\"><a href=\"#进阶难度-3\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 75. Sort Colors (Medium)</li>\n</ul>\n<h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h3 id=\"深度优先\"><a href=\"#深度优先\" class=\"headerlink\" title=\"深度优先\"></a>深度优先</h3><ul>\n<li>[ ] 695. Max Area of Island (Easy)</li>\n<li>[ ] 547. Friend Circles (Medium)</li>\n<li>[ ] 417. Pacific Atlantic Water Flow (Medium)</li>\n</ul>\n<h3 id=\"回溯法\"><a href=\"#回溯法\" class=\"headerlink\" title=\"回溯法\"></a>回溯法</h3><ul>\n<li>[ ] 46. Permutations (Medium)</li>\n<li>[ ] 77. Combinations (Medium)</li>\n<li>[ ] 79. Word Search (Medium)</li>\n<li>[ ] 51. N-Queens (Hard)</li>\n</ul>\n<h2 id=\"广度优先\"><a href=\"#广度优先\" class=\"headerlink\" title=\"广度优先\"></a>广度优先</h2><ul>\n<li>[ ] 934. Shortest Bridge (Medium)</li>\n<li>[ ] 126. Word Ladder II (Hard)</li>\n</ul>\n<h3 id=\"练习-4\"><a href=\"#练习-4\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-4\"><a href=\"#基础难度-4\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 130. Surrounded Regions (Medium)</li>\n<li>[ ] 257. Binary Tree Paths (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-4\"><a href=\"#进阶难度-4\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 47. Permutations II (Medium)</li>\n<li>[ ] 40. Combination Sum II (Medium)</li>\n<li>[ ] 37. Sudoku Solver (Hard)</li>\n<li>[ ] 310. Minimum Height Trees (Medium)</li>\n</ul>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><h3 id=\"一维动态规划\"><a href=\"#一维动态规划\" class=\"headerlink\" title=\"一维动态规划\"></a>一维动态规划</h3><ul>\n<li>[x] 70. Climbing Stairs (Easy)</li>\n<li>[x] 198. House Robber (Easy)</li>\n<li>[ ] 413. Arithmetic Slices (Medium)</li>\n</ul>\n<h3 id=\"二维动态规划\"><a href=\"#二维动态规划\" class=\"headerlink\" title=\"二维动态规划\"></a>二维动态规划</h3><ul>\n<li>[ ] 64. Minimum Path Sum (Medium)</li>\n<li>[ ] 542. 01 Matrix (Medium)</li>\n<li>[ ] 221. Maximal Square (Medium)</li>\n</ul>\n<h3 id=\"分割类型\"><a href=\"#分割类型\" class=\"headerlink\" title=\"分割类型\"></a>分割类型</h3><ul>\n<li>[ ] 279. Perfect Squares (Medium)</li>\n<li>[ ] 91. Decode Ways (Medium)</li>\n<li>[ ] 139. Word Break (Medium)</li>\n</ul>\n<h3 id=\"子序列\"><a href=\"#子序列\" class=\"headerlink\" title=\"子序列\"></a>子序列</h3><ul>\n<li>[ ] 300. Longest Increasing Subsequence (Medium)</li>\n<li>[ ] 1143. Longest Commom Subsequence (Medium)</li>\n</ul>\n<h3 id=\"背包\"><a href=\"#背包\" class=\"headerlink\" title=\"背包\"></a>背包</h3><ul>\n<li>[ ] 416. Partition Equal Subset Sum (Medium)</li>\n<li>[ ] 474. Ones and Zeroes (Medium)</li>\n<li>[ ] 322. Coin Change (Medium)</li>\n</ul>\n<h3 id=\"字符串编辑\"><a href=\"#字符串编辑\" class=\"headerlink\" title=\"字符串编辑\"></a>字符串编辑</h3><ul>\n<li>[ ] 72. Edit Distance (Hard)</li>\n<li>[ ] 650. 2 Keys Keyboard (Medium)</li>\n<li>[ ] 10. Regular Expression Matching (Hard)</li>\n</ul>\n<h3 id=\"股票交易\"><a href=\"#股票交易\" class=\"headerlink\" title=\"股票交易\"></a>股票交易</h3><ul>\n<li>[x] 121. Best Time to Buy and Sell Stock (Easy)</li>\n<li>[ ] 188. Best Time to Buy and Sell Stock IV (Hard)</li>\n<li>[ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)</li>\n</ul>\n<h3 id=\"练习-5\"><a href=\"#练习-5\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-5\"><a href=\"#基础难度-5\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 213. House Robber II (Medium)</li>\n<li>[x] 53. Maximum Subarray (Easy)</li>\n<li>[ ] 343. Integer Break (Medium)</li>\n<li>[ ] 583. Delete Operation for Two Strings (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-5\"><a href=\"#进阶难度-5\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 646. Maximum Length of Pair Chain (Medium)</li>\n<li>[ ] 376. Wiggle Subsequence (Medium)</li>\n<li>[ ] 494. Target Sum (Medium)</li>\n<li>[ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)</li>\n</ul>\n<h2 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h2><h3 id=\"表达式问题\"><a href=\"#表达式问题\" class=\"headerlink\" title=\"表达式问题\"></a>表达式问题</h3><ul>\n<li>[ ] 241. Different Ways to Add Parentheses (Medium)</li>\n</ul>\n<h3 id=\"练习-6\"><a href=\"#练习-6\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-6\"><a href=\"#基础难度-6\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 932. Beautiful Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-6\"><a href=\"#进阶难度-6\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 312. Burst Balloons (Hard)</li>\n</ul>\n<h2 id=\"数学问题\"><a href=\"#数学问题\" class=\"headerlink\" title=\"数学问题\"></a>数学问题</h2><h3 id=\"公倍数和公因数\"><a href=\"#公倍数和公因数\" class=\"headerlink\" title=\"公倍数和公因数\"></a>公倍数和公因数</h3><ul>\n<li>[ ] 辗转相除法</li>\n</ul>\n<h3 id=\"质数\"><a href=\"#质数\" class=\"headerlink\" title=\"质数\"></a>质数</h3><ul>\n<li>[ ] 204. Count Primes (Easy)</li>\n</ul>\n<h3 id=\"数字处理\"><a href=\"#数字处理\" class=\"headerlink\" title=\"数字处理\"></a>数字处理</h3><ul>\n<li>[ ] 504. Base 7 (Easy)</li>\n<li>[ ] 172. Factorial Trailing Zeroes</li>\n<li>[ ] 415. Add Strings (Easy)</li>\n<li>[ ] 326. Power of Three (Easy)</li>\n</ul>\n<h3 id=\"随机与取样\"><a href=\"#随机与取样\" class=\"headerlink\" title=\"随机与取样\"></a>随机与取样</h3><ul>\n<li>[ ] 384. Shuffle an Array (Medium)</li>\n<li>[ ] 528. Random Pick with Weight (Medium)</li>\n<li>[ ] 382. Linked List Random Node (Medium)</li>\n</ul>\n<h3 id=\"练习-7\"><a href=\"#练习-7\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-7\"><a href=\"#基础难度-7\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 168. Excel Sheet Column Title (Easy)</li>\n<li>[ ] 67. Add Binary (Easy)</li>\n<li>[ ] 238. Product of Array Except Self (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-7\"><a href=\"#进阶难度-7\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 462. Minimum Moves to Equal Array Elements II (Medium)</li>\n<li>[ ] 169. Majority Element (Easy)</li>\n<li>[ ] 470. Implement Rand10() Using Rand7() (Medium)</li>\n<li>[ ] 202. Happy Number (Easy)</li>\n</ul>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"位运算基础问题\"><a href=\"#位运算基础问题\" class=\"headerlink\" title=\"位运算基础问题\"></a>位运算基础问题</h3><ul>\n<li>[ ] 461. Hamming Distance (Easy)</li>\n<li>[ ] 190. Reverse Bits (Easy)</li>\n<li>[ ] 136. Single Number (Easy)</li>\n</ul>\n<h3 id=\"二进制特性\"><a href=\"#二进制特性\" class=\"headerlink\" title=\"二进制特性\"></a>二进制特性</h3><ul>\n<li>[ ] 342. Power of Four (Easy)</li>\n<li>[ ] 318. Maximum Product of Word Lengths (Medium)</li>\n<li>[ ] 338. Counting Bits (Medium)</li>\n</ul>\n<h3 id=\"练习-8\"><a href=\"#练习-8\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-8\"><a href=\"#基础难度-8\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 268. Missing Number (Easy)</li>\n<li>[ ] 693. Binary Number with Alternating Bits (Easy)</li>\n<li>[ ] 476. Number Complement (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-8\"><a href=\"#进阶难度-8\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 260. Single Number III (Medium)</li>\n</ul>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>[x] 448. Find All Numbers Disappeared in an Array (Easy)</li>\n<li>[ ] 48. Rotate Image (Medium)</li>\n<li>[ ] 240. Search a 2D Matrix II (Medium)</li>\n<li>[ ] 769. Max Chunks To Make Sorted (Medium)</li>\n</ul>\n<h3 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h3><ul>\n<li>[ ] 232. Implement Queue using Stacks (Easy)</li>\n<li>[ ] 155. Min Stack (Easy)</li>\n<li>[ ] 20. Valid Parentheses (Easy)</li>\n</ul>\n<h3 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3><ul>\n<li>[ ] 739. Daily Temperatures (Medium)</li>\n</ul>\n<h3 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h3><ul>\n<li>[ ] 23. Merge k Sorted Lists (Hard)</li>\n<li>[ ] 218. The Skyline Problem (Hard)</li>\n</ul>\n<h3 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h3><ul>\n<li>[ ] 239. Sliding Window Maximum (Hard)</li>\n</ul>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><ul>\n<li>[ ] 1. Two Sum (Easy)</li>\n<li>[ ] 128. Longest Consecutive Sequence (Hard)</li>\n<li>[ ] 149. Max Points on a Line (Hard)</li>\n</ul>\n<h3 id=\"多重集合和映射\"><a href=\"#多重集合和映射\" class=\"headerlink\" title=\"多重集合和映射\"></a>多重集合和映射</h3><ul>\n<li>[ ] 332. Reconstruct Itinerary (Medium)</li>\n</ul>\n<h3 id=\"前缀和和积分图\"><a href=\"#前缀和和积分图\" class=\"headerlink\" title=\"前缀和和积分图\"></a>前缀和和积分图</h3><ul>\n<li>[ ] 303. Range Sum Query - Immutable (Easy)</li>\n<li>[ ] 304. Range Sum Query 2D - Immutable (Medium)</li>\n<li>[ ] 560. Subarray Sum Equals K (Medium)</li>\n</ul>\n<h3 id=\"练习-9\"><a href=\"#练习-9\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-9\"><a href=\"#基础难度-9\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 566. Reshape the Matrix (Easy)</li>\n<li>[ ] 225. Implement Stack using Queues (Easy)</li>\n<li>[ ] 503. Next Greater Element II (Medium)</li>\n<li>[ ] 217. Contains Duplicate (Easy)</li>\n<li>[ ] 697. Degree of an Array (Easy)</li>\n<li>[ ] 594. Longest Harmonious Subsequence (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-9\"><a href=\"#进阶难度-9\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 287. Find the Duplicate Number (Medium)</li>\n<li>[ ] 313. Super Ugly Number (Medium)</li>\n<li>[ ] 870. Advantage Shuffle (Medium)</li>\n<li>[ ] 307. Range Sum Query - Mutable (Medium)</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h3><ul>\n<li>[x] 242. Valid Anagram (Easy)</li>\n<li>[x] 205. Isomorphic Strings (Easy)</li>\n<li>[ ] 647. Palindromic Substrings (Medium)</li>\n<li>[ ] 696. Count Binary Substrings (Easy)</li>\n</ul>\n<h3 id=\"字符串理解\"><a href=\"#字符串理解\" class=\"headerlink\" title=\"字符串理解\"></a>字符串理解</h3><ul>\n<li>[ ] 227. Basic Calculator II (Medium)</li>\n</ul>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li>[ ] 28. Implement strStr() (Easy)</li>\n</ul>\n<h3 id=\"练习-10\"><a href=\"#练习-10\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-10\"><a href=\"#基础难度-10\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 409. Longest Palindrome (Easy)</li>\n<li>[ ] 3. Longest Substring Without Repeating Characters (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-10\"><a href=\"#进阶难度-10\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 772. Basic Calculator III (Hard)</li>\n<li>[ ] 5. Longest Palindromic Substring (Medium)</li>\n</ul>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"链表基本操作\"><a href=\"#链表基本操作\" class=\"headerlink\" title=\"链表基本操作\"></a>链表基本操作</h3><ul>\n<li>[ ] 206. Reverse Linked List (Easy)</li>\n<li>[ ] 21. Merge Two Sorted Lists (Easy)</li>\n<li>[ ] 24. Swap Nodes in Pairs (Medium)</li>\n</ul>\n<h3 id=\"其他链表技巧\"><a href=\"#其他链表技巧\" class=\"headerlink\" title=\"其他链表技巧\"></a>其他链表技巧</h3><ul>\n<li>[ ] 160. Intersection of Two Linked Lists (Easy)</li>\n<li>[ ] 234. Palindrome Linked List (Easy)</li>\n</ul>\n<h3 id=\"练习-11\"><a href=\"#练习-11\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-11\"><a href=\"#基础难度-11\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 83. Remove Duplicates from Sorted List (Easy)</li>\n<li>[ ] 328. Odd Even Linked List (Medium)</li>\n<li>[ ] 19. Remove Nth Node From End of List (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-11\"><a href=\"#进阶难度-11\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 148. Sort List (Medium)</li>\n</ul>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><h3 id=\"树的递归\"><a href=\"#树的递归\" class=\"headerlink\" title=\"树的递归\"></a>树的递归</h3><ul>\n<li>[ ] 104. Maximum Depth of Binary Tree (Easy)</li>\n<li>[ ] 110. Balanced Binary Tree (Easy)</li>\n<li>[ ] 543. Diameter of Binary Tree (Easy)</li>\n<li>[ ] 437. Path Sum III (Easy)</li>\n<li>[ ] 101. Symmetric Tree (Easy)</li>\n<li>[ ] 1110. Delete Nodes And Return Forest (Medium)</li>\n</ul>\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><ul>\n<li>[ ] 637. Average of Levels in Binary Tree (Easy)</li>\n</ul>\n<h3 id=\"前中后序遍历\"><a href=\"#前中后序遍历\" class=\"headerlink\" title=\"前中后序遍历\"></a>前中后序遍历</h3><ul>\n<li>[ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)</li>\n<li>[ ] 144. Binary Tree Preorder Traversal (Medium)</li>\n</ul>\n<h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><ul>\n<li>[ ] 99. Recover Binary Search Tree (Hard)</li>\n<li>[ ] 669. Trim a Binary Search Tree (Easy)</li>\n</ul>\n<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><ul>\n<li>[ ] 208. Implement Trie (Prefix Tree) (Medium)</li>\n</ul>\n<h3 id=\"练习-12\"><a href=\"#练习-12\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-12\"><a href=\"#基础难度-12\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 226. Invert Binary Tree (Easy)</li>\n<li>[ ] 617. Merge Two Binary Trees (Easy)</li>\n<li>[ ] 572. Subtree of Another Tree (Easy)</li>\n<li>[ ] 404. Sum of Left Leaves (Easy)</li>\n<li>[ ] 513. Find Bottom Left Tree Value (Easy)</li>\n<li>[ ] 538. Convert BST to Greater Tree (Easy)</li>\n<li>[ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)</li>\n<li>[ ] 530. Minimum Absolute Difference in BST (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-12\"><a href=\"#进阶难度-12\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)</li>\n<li>[ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)</li>\n<li>[ ] 94. Binary Tree Inorder Traversal (Medium)</li>\n<li>[ ] 145. Binary Tree Postorder Traversal (Medium)</li>\n<li>[ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)</li>\n<li>[ ] 109. Convert Sorted List to Binary Search Tree (Medium)</li>\n<li>[ ] 897. Increasing Order Search Tree (Easy)</li>\n<li>[ ] 653. Two Sum IV - Input is a BST (Easy)</li>\n<li>[ ] 450. Delete Node in a BST (Medium)</li>\n</ul>\n<h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"二分图\"><a href=\"#二分图\" class=\"headerlink\" title=\"二分图\"></a>二分图</h3><ul>\n<li>[ ] 785. Is Graph Bipartite? (Medium)</li>\n</ul>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><ul>\n<li>[ ] 210. Course Schedule II (Medium)</li>\n</ul>\n<h3 id=\"练习-13\"><a href=\"#练习-13\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-13\"><a href=\"#基础难度-13\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1059. All Paths from Source Lead to Destination (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-13\"><a href=\"#进阶难度-13\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 882. Reachable Nodes In Subdivided Graph (Hard)</li>\n</ul>\n<h2 id=\"高阶数据结构\"><a href=\"#高阶数据结构\" class=\"headerlink\" title=\"高阶数据结构\"></a>高阶数据结构</h2><h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><ul>\n<li>[ ] 684. Redundant Connection (Medium)</li>\n</ul>\n<h3 id=\"复合数据结构\"><a href=\"#复合数据结构\" class=\"headerlink\" title=\"复合数据结构\"></a>复合数据结构</h3><ul>\n<li>[ ] 146. LRU Cache (Medium)</li>\n</ul>\n<h3 id=\"练习-14\"><a href=\"#练习-14\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-14\"><a href=\"#基础难度-14\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 380. Insert Delete GetRandom O(1) (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-14\"><a href=\"#进阶难度-14\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 432. All O‘one Data Structure (Hard)</li>\n<li>[ ] 716. Max Stack (Easy)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><h3 id=\"分配问题\"><a href=\"#分配问题\" class=\"headerlink\" title=\"分配问题\"></a>分配问题</h3><ul>\n<li>[x] 455. Assign Cookies (Easy)</li>\n<li>[x] 135. Candy (Hard)</li>\n</ul>\n<h3 id=\"区间问题\"><a href=\"#区间问题\" class=\"headerlink\" title=\"区间问题\"></a>区间问题</h3><ul>\n<li>[ ] 435. Non-overlapping Intervals (Medium)</li>\n</ul>\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度\"><a href=\"#基础难度\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 605. Can Place Flowers (Easy)</li>\n<li>[ ] 452. Minimum Number of Arrows to Burst Balloons (Medium)</li>\n<li>[ ] 763. Partition Labels (Medium)</li>\n<li>[x] 122. Best Time to Buy and Sell Stock II (Easy)</li>\n</ul>\n<h4 id=\"进阶难度\"><a href=\"#进阶难度\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 406. Queue Reconstruction by Height (Medium)</li>\n<li>[ ] 665. Non-decreasing Array (Easy)</li>\n</ul>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><h3 id=\"Two-Sum\"><a href=\"#Two-Sum\" class=\"headerlink\" title=\"Two Sum\"></a>Two Sum</h3><ul>\n<li>[x] 167. Two Sum II - Input array is sorted (Easy)</li>\n</ul>\n<h3 id=\"归并两个有序数组\"><a href=\"#归并两个有序数组\" class=\"headerlink\" title=\"归并两个有序数组\"></a>归并两个有序数组</h3><ul>\n<li>[ ] 88. Merge Sorted Array (Easy)</li>\n</ul>\n<h3 id=\"快慢指针\"><a href=\"#快慢指针\" class=\"headerlink\" title=\"快慢指针\"></a>快慢指针</h3><ul>\n<li>[ ] 142. Linked List Cycle II (Medium)</li>\n</ul>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3><ul>\n<li>[ ] 76. Minimum Window Substring (Hard)</li>\n</ul>\n<h3 id=\"练习-1\"><a href=\"#练习-1\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-1\"><a href=\"#基础难度-1\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 633. Sum of Square Numbers (Easy)</li>\n<li>[ ] 680. Valid Palindrome II (Easy)</li>\n<li>[ ] 524. Longest Word in Dictionary through Deleting (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-1\"><a href=\"#进阶难度-1\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 340. Longest Substring with At Most K Distinct Characters (Hard)</li>\n</ul>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><h3 id=\"求开方\"><a href=\"#求开方\" class=\"headerlink\" title=\"求开方\"></a>求开方</h3><ul>\n<li>[ ] 69. Sqrt(x) (Easy)</li>\n</ul>\n<h3 id=\"查找区间\"><a href=\"#查找区间\" class=\"headerlink\" title=\"查找区间\"></a>查找区间</h3><ul>\n<li>[ ] 34. Find First and Last Position of Element in Sorted Array (Medium)</li>\n</ul>\n<h3 id=\"旋转数组查找数字\"><a href=\"#旋转数组查找数字\" class=\"headerlink\" title=\"旋转数组查找数字\"></a>旋转数组查找数字</h3><ul>\n<li>[ ] 81. Search in Rotated Sorted Array II (Medium)</li>\n</ul>\n<h3 id=\"练习-2\"><a href=\"#练习-2\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-2\"><a href=\"#基础难度-2\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 154. Find Minimum in Rotated Sorted Array II (Medium)</li>\n<li>[ ] 540. Single Element in a Sorted Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-2\"><a href=\"#进阶难度-2\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 4. Median of Two Sorted Arrays (Hard)</li>\n</ul>\n<h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><h3 id=\"常用排序\"><a href=\"#常用排序\" class=\"headerlink\" title=\"常用排序\"></a>常用排序</h3><ul>\n<li>[ ] 快速排序(Quicksort)</li>\n<li>[ ] 归并排序(Merge Sort)</li>\n<li>[ ] 插入排序(Insertion Sort)</li>\n<li>[ ] 冒泡排序(Bubble Sort)</li>\n<li>[ ] 选择排序(Selection Sort)</li>\n</ul>\n<h3 id=\"快速选择\"><a href=\"#快速选择\" class=\"headerlink\" title=\"快速选择\"></a>快速选择</h3><ul>\n<li>[ ] 215. Kth Largest Element in an Array</li>\n</ul>\n<h3 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h3><ul>\n<li>[ ] 347. Top K Frequent Elements (Medium)</li>\n</ul>\n<h3 id=\"练习-3\"><a href=\"#练习-3\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-3\"><a href=\"#基础难度-3\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 451. Sort Characters By Frequency (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-3\"><a href=\"#进阶难度-3\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 75. Sort Colors (Medium)</li>\n</ul>\n<h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h3 id=\"深度优先\"><a href=\"#深度优先\" class=\"headerlink\" title=\"深度优先\"></a>深度优先</h3><ul>\n<li>[ ] 695. Max Area of Island (Easy)</li>\n<li>[ ] 547. Friend Circles (Medium)</li>\n<li>[ ] 417. Pacific Atlantic Water Flow (Medium)</li>\n</ul>\n<h3 id=\"回溯法\"><a href=\"#回溯法\" class=\"headerlink\" title=\"回溯法\"></a>回溯法</h3><ul>\n<li>[ ] 46. Permutations (Medium)</li>\n<li>[ ] 77. Combinations (Medium)</li>\n<li>[ ] 79. Word Search (Medium)</li>\n<li>[ ] 51. N-Queens (Hard)</li>\n</ul>\n<h2 id=\"广度优先\"><a href=\"#广度优先\" class=\"headerlink\" title=\"广度优先\"></a>广度优先</h2><ul>\n<li>[ ] 934. Shortest Bridge (Medium)</li>\n<li>[ ] 126. Word Ladder II (Hard)</li>\n</ul>\n<h3 id=\"练习-4\"><a href=\"#练习-4\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-4\"><a href=\"#基础难度-4\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 130. Surrounded Regions (Medium)</li>\n<li>[ ] 257. Binary Tree Paths (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-4\"><a href=\"#进阶难度-4\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 47. Permutations II (Medium)</li>\n<li>[ ] 40. Combination Sum II (Medium)</li>\n<li>[ ] 37. Sudoku Solver (Hard)</li>\n<li>[ ] 310. Minimum Height Trees (Medium)</li>\n</ul>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><h3 id=\"一维动态规划\"><a href=\"#一维动态规划\" class=\"headerlink\" title=\"一维动态规划\"></a>一维动态规划</h3><ul>\n<li>[x] 70. Climbing Stairs (Easy)</li>\n<li>[x] 198. House Robber (Easy)</li>\n<li>[ ] 413. Arithmetic Slices (Medium)</li>\n</ul>\n<h3 id=\"二维动态规划\"><a href=\"#二维动态规划\" class=\"headerlink\" title=\"二维动态规划\"></a>二维动态规划</h3><ul>\n<li>[ ] 64. Minimum Path Sum (Medium)</li>\n<li>[ ] 542. 01 Matrix (Medium)</li>\n<li>[ ] 221. Maximal Square (Medium)</li>\n</ul>\n<h3 id=\"分割类型\"><a href=\"#分割类型\" class=\"headerlink\" title=\"分割类型\"></a>分割类型</h3><ul>\n<li>[ ] 279. Perfect Squares (Medium)</li>\n<li>[ ] 91. Decode Ways (Medium)</li>\n<li>[ ] 139. Word Break (Medium)</li>\n</ul>\n<h3 id=\"子序列\"><a href=\"#子序列\" class=\"headerlink\" title=\"子序列\"></a>子序列</h3><ul>\n<li>[ ] 300. Longest Increasing Subsequence (Medium)</li>\n<li>[ ] 1143. Longest Commom Subsequence (Medium)</li>\n</ul>\n<h3 id=\"背包\"><a href=\"#背包\" class=\"headerlink\" title=\"背包\"></a>背包</h3><ul>\n<li>[ ] 416. Partition Equal Subset Sum (Medium)</li>\n<li>[ ] 474. Ones and Zeroes (Medium)</li>\n<li>[ ] 322. Coin Change (Medium)</li>\n</ul>\n<h3 id=\"字符串编辑\"><a href=\"#字符串编辑\" class=\"headerlink\" title=\"字符串编辑\"></a>字符串编辑</h3><ul>\n<li>[ ] 72. Edit Distance (Hard)</li>\n<li>[ ] 650. 2 Keys Keyboard (Medium)</li>\n<li>[ ] 10. Regular Expression Matching (Hard)</li>\n</ul>\n<h3 id=\"股票交易\"><a href=\"#股票交易\" class=\"headerlink\" title=\"股票交易\"></a>股票交易</h3><ul>\n<li>[x] 121. Best Time to Buy and Sell Stock (Easy)</li>\n<li>[ ] 188. Best Time to Buy and Sell Stock IV (Hard)</li>\n<li>[ ] 309. Best Time to Buy and Sell Stock with Cooldown (Medium)</li>\n</ul>\n<h3 id=\"练习-5\"><a href=\"#练习-5\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-5\"><a href=\"#基础难度-5\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 213. House Robber II (Medium)</li>\n<li>[x] 53. Maximum Subarray (Easy)</li>\n<li>[ ] 343. Integer Break (Medium)</li>\n<li>[ ] 583. Delete Operation for Two Strings (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-5\"><a href=\"#进阶难度-5\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 646. Maximum Length of Pair Chain (Medium)</li>\n<li>[ ] 376. Wiggle Subsequence (Medium)</li>\n<li>[ ] 494. Target Sum (Medium)</li>\n<li>[ ] 714. Best Time to Buy and Sell Stock with Transaction Fee (Medium)</li>\n</ul>\n<h2 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h2><h3 id=\"表达式问题\"><a href=\"#表达式问题\" class=\"headerlink\" title=\"表达式问题\"></a>表达式问题</h3><ul>\n<li>[ ] 241. Different Ways to Add Parentheses (Medium)</li>\n</ul>\n<h3 id=\"练习-6\"><a href=\"#练习-6\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-6\"><a href=\"#基础难度-6\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 932. Beautiful Array (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-6\"><a href=\"#进阶难度-6\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 312. Burst Balloons (Hard)</li>\n</ul>\n<h2 id=\"数学问题\"><a href=\"#数学问题\" class=\"headerlink\" title=\"数学问题\"></a>数学问题</h2><h3 id=\"公倍数和公因数\"><a href=\"#公倍数和公因数\" class=\"headerlink\" title=\"公倍数和公因数\"></a>公倍数和公因数</h3><ul>\n<li>[ ] 辗转相除法</li>\n</ul>\n<h3 id=\"质数\"><a href=\"#质数\" class=\"headerlink\" title=\"质数\"></a>质数</h3><ul>\n<li>[ ] 204. Count Primes (Easy)</li>\n</ul>\n<h3 id=\"数字处理\"><a href=\"#数字处理\" class=\"headerlink\" title=\"数字处理\"></a>数字处理</h3><ul>\n<li>[ ] 504. Base 7 (Easy)</li>\n<li>[ ] 172. Factorial Trailing Zeroes</li>\n<li>[ ] 415. Add Strings (Easy)</li>\n<li>[ ] 326. Power of Three (Easy)</li>\n</ul>\n<h3 id=\"随机与取样\"><a href=\"#随机与取样\" class=\"headerlink\" title=\"随机与取样\"></a>随机与取样</h3><ul>\n<li>[ ] 384. Shuffle an Array (Medium)</li>\n<li>[ ] 528. Random Pick with Weight (Medium)</li>\n<li>[ ] 382. Linked List Random Node (Medium)</li>\n</ul>\n<h3 id=\"练习-7\"><a href=\"#练习-7\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-7\"><a href=\"#基础难度-7\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 168. Excel Sheet Column Title (Easy)</li>\n<li>[ ] 67. Add Binary (Easy)</li>\n<li>[ ] 238. Product of Array Except Self (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-7\"><a href=\"#进阶难度-7\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 462. Minimum Moves to Equal Array Elements II (Medium)</li>\n<li>[ ] 169. Majority Element (Easy)</li>\n<li>[ ] 470. Implement Rand10() Using Rand7() (Medium)</li>\n<li>[ ] 202. Happy Number (Easy)</li>\n</ul>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"位运算基础问题\"><a href=\"#位运算基础问题\" class=\"headerlink\" title=\"位运算基础问题\"></a>位运算基础问题</h3><ul>\n<li>[ ] 461. Hamming Distance (Easy)</li>\n<li>[ ] 190. Reverse Bits (Easy)</li>\n<li>[ ] 136. Single Number (Easy)</li>\n</ul>\n<h3 id=\"二进制特性\"><a href=\"#二进制特性\" class=\"headerlink\" title=\"二进制特性\"></a>二进制特性</h3><ul>\n<li>[ ] 342. Power of Four (Easy)</li>\n<li>[ ] 318. Maximum Product of Word Lengths (Medium)</li>\n<li>[ ] 338. Counting Bits (Medium)</li>\n</ul>\n<h3 id=\"练习-8\"><a href=\"#练习-8\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-8\"><a href=\"#基础难度-8\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 268. Missing Number (Easy)</li>\n<li>[ ] 693. Binary Number with Alternating Bits (Easy)</li>\n<li>[ ] 476. Number Complement (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-8\"><a href=\"#进阶难度-8\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 260. Single Number III (Medium)</li>\n</ul>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li>[x] 448. Find All Numbers Disappeared in an Array (Easy)</li>\n<li>[ ] 48. Rotate Image (Medium)</li>\n<li>[ ] 240. Search a 2D Matrix II (Medium)</li>\n<li>[ ] 769. Max Chunks To Make Sorted (Medium)</li>\n</ul>\n<h3 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h3><ul>\n<li>[ ] 232. Implement Queue using Stacks (Easy)</li>\n<li>[ ] 155. Min Stack (Easy)</li>\n<li>[ ] 20. Valid Parentheses (Easy)</li>\n</ul>\n<h3 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3><ul>\n<li>[ ] 739. Daily Temperatures (Medium)</li>\n</ul>\n<h3 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h3><ul>\n<li>[ ] 23. Merge k Sorted Lists (Hard)</li>\n<li>[ ] 218. The Skyline Problem (Hard)</li>\n</ul>\n<h3 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h3><ul>\n<li>[ ] 239. Sliding Window Maximum (Hard)</li>\n</ul>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><ul>\n<li>[ ] 1. Two Sum (Easy)</li>\n<li>[ ] 128. Longest Consecutive Sequence (Hard)</li>\n<li>[ ] 149. Max Points on a Line (Hard)</li>\n</ul>\n<h3 id=\"多重集合和映射\"><a href=\"#多重集合和映射\" class=\"headerlink\" title=\"多重集合和映射\"></a>多重集合和映射</h3><ul>\n<li>[ ] 332. Reconstruct Itinerary (Medium)</li>\n</ul>\n<h3 id=\"前缀和和积分图\"><a href=\"#前缀和和积分图\" class=\"headerlink\" title=\"前缀和和积分图\"></a>前缀和和积分图</h3><ul>\n<li>[ ] 303. Range Sum Query - Immutable (Easy)</li>\n<li>[ ] 304. Range Sum Query 2D - Immutable (Medium)</li>\n<li>[ ] 560. Subarray Sum Equals K (Medium)</li>\n</ul>\n<h3 id=\"练习-9\"><a href=\"#练习-9\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-9\"><a href=\"#基础难度-9\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 566. Reshape the Matrix (Easy)</li>\n<li>[ ] 225. Implement Stack using Queues (Easy)</li>\n<li>[ ] 503. Next Greater Element II (Medium)</li>\n<li>[ ] 217. Contains Duplicate (Easy)</li>\n<li>[ ] 697. Degree of an Array (Easy)</li>\n<li>[ ] 594. Longest Harmonious Subsequence (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-9\"><a href=\"#进阶难度-9\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 287. Find the Duplicate Number (Medium)</li>\n<li>[ ] 313. Super Ugly Number (Medium)</li>\n<li>[ ] 870. Advantage Shuffle (Medium)</li>\n<li>[ ] 307. Range Sum Query - Mutable (Medium)</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h3><ul>\n<li>[x] 242. Valid Anagram (Easy)</li>\n<li>[x] 205. Isomorphic Strings (Easy)</li>\n<li>[ ] 647. Palindromic Substrings (Medium)</li>\n<li>[ ] 696. Count Binary Substrings (Easy)</li>\n</ul>\n<h3 id=\"字符串理解\"><a href=\"#字符串理解\" class=\"headerlink\" title=\"字符串理解\"></a>字符串理解</h3><ul>\n<li>[ ] 227. Basic Calculator II (Medium)</li>\n</ul>\n<h3 id=\"字符串匹配\"><a href=\"#字符串匹配\" class=\"headerlink\" title=\"字符串匹配\"></a>字符串匹配</h3><ul>\n<li>[ ] 28. Implement strStr() (Easy)</li>\n</ul>\n<h3 id=\"练习-10\"><a href=\"#练习-10\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-10\"><a href=\"#基础难度-10\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[x] 409. Longest Palindrome (Easy)</li>\n<li>[ ] 3. Longest Substring Without Repeating Characters (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-10\"><a href=\"#进阶难度-10\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 772. Basic Calculator III (Hard)</li>\n<li>[ ] 5. Longest Palindromic Substring (Medium)</li>\n</ul>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h3 id=\"链表基本操作\"><a href=\"#链表基本操作\" class=\"headerlink\" title=\"链表基本操作\"></a>链表基本操作</h3><ul>\n<li>[ ] 206. Reverse Linked List (Easy)</li>\n<li>[ ] 21. Merge Two Sorted Lists (Easy)</li>\n<li>[ ] 24. Swap Nodes in Pairs (Medium)</li>\n</ul>\n<h3 id=\"其他链表技巧\"><a href=\"#其他链表技巧\" class=\"headerlink\" title=\"其他链表技巧\"></a>其他链表技巧</h3><ul>\n<li>[ ] 160. Intersection of Two Linked Lists (Easy)</li>\n<li>[ ] 234. Palindrome Linked List (Easy)</li>\n</ul>\n<h3 id=\"练习-11\"><a href=\"#练习-11\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-11\"><a href=\"#基础难度-11\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 83. Remove Duplicates from Sorted List (Easy)</li>\n<li>[ ] 328. Odd Even Linked List (Medium)</li>\n<li>[ ] 19. Remove Nth Node From End of List (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-11\"><a href=\"#进阶难度-11\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 148. Sort List (Medium)</li>\n</ul>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><h3 id=\"树的递归\"><a href=\"#树的递归\" class=\"headerlink\" title=\"树的递归\"></a>树的递归</h3><ul>\n<li>[ ] 104. Maximum Depth of Binary Tree (Easy)</li>\n<li>[ ] 110. Balanced Binary Tree (Easy)</li>\n<li>[ ] 543. Diameter of Binary Tree (Easy)</li>\n<li>[ ] 437. Path Sum III (Easy)</li>\n<li>[ ] 101. Symmetric Tree (Easy)</li>\n<li>[ ] 1110. Delete Nodes And Return Forest (Medium)</li>\n</ul>\n<h3 id=\"层次遍历\"><a href=\"#层次遍历\" class=\"headerlink\" title=\"层次遍历\"></a>层次遍历</h3><ul>\n<li>[ ] 637. Average of Levels in Binary Tree (Easy)</li>\n</ul>\n<h3 id=\"前中后序遍历\"><a href=\"#前中后序遍历\" class=\"headerlink\" title=\"前中后序遍历\"></a>前中后序遍历</h3><ul>\n<li>[ ] 105. Construct Binary Tree from Preorder and Inorder Traversal (Medium)</li>\n<li>[ ] 144. Binary Tree Preorder Traversal (Medium)</li>\n</ul>\n<h3 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h3><ul>\n<li>[ ] 99. Recover Binary Search Tree (Hard)</li>\n<li>[ ] 669. Trim a Binary Search Tree (Easy)</li>\n</ul>\n<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><ul>\n<li>[ ] 208. Implement Trie (Prefix Tree) (Medium)</li>\n</ul>\n<h3 id=\"练习-12\"><a href=\"#练习-12\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-12\"><a href=\"#基础难度-12\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 226. Invert Binary Tree (Easy)</li>\n<li>[ ] 617. Merge Two Binary Trees (Easy)</li>\n<li>[ ] 572. Subtree of Another Tree (Easy)</li>\n<li>[ ] 404. Sum of Left Leaves (Easy)</li>\n<li>[ ] 513. Find Bottom Left Tree Value (Easy)</li>\n<li>[ ] 538. Convert BST to Greater Tree (Easy)</li>\n<li>[ ] 235. Lowest Common Ancestor of a Binary Search Tree (Easy)</li>\n<li>[ ] 530. Minimum Absolute Difference in BST (Easy)</li>\n</ul>\n<h4 id=\"进阶难度-12\"><a href=\"#进阶难度-12\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 889. Construct Binary Tree from Preorder and Postorder Traversal (Medium)</li>\n<li>[ ] 106. Construct Binary Tree from Inorder and Postorder Traversal (Medium)</li>\n<li>[ ] 94. Binary Tree Inorder Traversal (Medium)</li>\n<li>[ ] 145. Binary Tree Postorder Traversal (Medium)</li>\n<li>[ ] 236. Lowest Common Ancestor of a Binary Tree (Medium)</li>\n<li>[ ] 109. Convert Sorted List to Binary Search Tree (Medium)</li>\n<li>[ ] 897. Increasing Order Search Tree (Easy)</li>\n<li>[ ] 653. Two Sum IV - Input is a BST (Easy)</li>\n<li>[ ] 450. Delete Node in a BST (Medium)</li>\n</ul>\n<h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><h3 id=\"二分图\"><a href=\"#二分图\" class=\"headerlink\" title=\"二分图\"></a>二分图</h3><ul>\n<li>[ ] 785. Is Graph Bipartite? (Medium)</li>\n</ul>\n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3><ul>\n<li>[ ] 210. Course Schedule II (Medium)</li>\n</ul>\n<h3 id=\"练习-13\"><a href=\"#练习-13\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-13\"><a href=\"#基础难度-13\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1059. All Paths from Source Lead to Destination (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-13\"><a href=\"#进阶难度-13\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 882. Reachable Nodes In Subdivided Graph (Hard)</li>\n</ul>\n<h2 id=\"高阶数据结构\"><a href=\"#高阶数据结构\" class=\"headerlink\" title=\"高阶数据结构\"></a>高阶数据结构</h2><h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><ul>\n<li>[ ] 684. Redundant Connection (Medium)</li>\n</ul>\n<h3 id=\"复合数据结构\"><a href=\"#复合数据结构\" class=\"headerlink\" title=\"复合数据结构\"></a>复合数据结构</h3><ul>\n<li>[ ] 146. LRU Cache (Medium)</li>\n</ul>\n<h3 id=\"练习-14\"><a href=\"#练习-14\" class=\"headerlink\" title=\"练习\"></a>练习</h3><h4 id=\"基础难度-14\"><a href=\"#基础难度-14\" class=\"headerlink\" title=\"基础难度\"></a>基础难度</h4><ul>\n<li>[ ] 1135. Connecting Cities With Minimum Cost (Medium)</li>\n<li>[ ] 380. Insert Delete GetRandom O(1) (Medium)</li>\n</ul>\n<h4 id=\"进阶难度-14\"><a href=\"#进阶难度-14\" class=\"headerlink\" title=\"进阶难度\"></a>进阶难度</h4><ul>\n<li>[ ] 432. All O‘one Data Structure (Hard)</li>\n<li>[ ] 716. Max Stack (Easy)</li>\n</ul>\n"},{"abbrlink":"1c4cd1f0","date":"2021-06-02T16:00:00.000Z","description":"Summer Code 2021 Seata Proposal","_content":"## 项目背景\n\n在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。\n![seata_protobuf.png](seata_protobuf.png)\n因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。\n\n## HTTP2 跟 HTTP1.1 有什么区别\n\n1. 多路复用\n1. 头部压缩\n1. 二进制分帧\n1. 请求优先级\n1. 服务器推送\n\n## 方案描述\n\n#### 打包、拆包（头部压缩、二进制分帧）\n\n1. 修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。\n1. 增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder\n1. 将传输单元定义为 Frame，做进一步抽象。\n1. 在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。\n\n#### HTTP 连接多路复用\n\n1. 在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。\n1. 增加 AbstractNettyRemoting 中，对 Http2Stream 的创建\n\n## 时间规划\n\n- 尝试自己做一个 HTTP2 的 NettyServer 的 Demo\n  - 7.1 - 7.10\n  - 阅读 Netty 关于 HTTP2 相关文档，并实现 Demo\n- 用 Wireshark 抓包分析并修改 Demo\n  - 7.10 - 7.15\n  - 主要看 Headers 是否压缩，是否实现二进制分帧等等\n- 在 Seata 中尝试修改源码\n  - 7.15 - 7.30\n  - 尝试修改上述方案描述所提到的相关类\n- 性能测试，若性能不佳则找出原因\n  - 7.30 - 8.7\n  - 会测试 HTTP2 和原本私有协议之间的性能差距\n- 代码重构\n  - 8.7 - 8.20\n  - 结合 Seata 社区的意见，对提交的代码进行修改或者重构\n- 书写相关的文档\n  - 8.20 - 8.30\n  - 针对两个月以来的成果书写文档\n\n## 参考资料\n\n[Use Protobuf as the codec of RPC（Seata Issues#823 ）](https://github.com/seata/seata/issues/823)\n[New RPC protocol propose. （Seata Issues#893）](https://github.com/seata/seata/issues/893)\n[RFC7540（HTTP/2）](https://datatracker.ietf.org/doc/html/rfc7540)\n[RFC7541（HPACK）](https://datatracker.ietf.org/doc/html/rfc7541)\n[gRPC over HTTP2](https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html)\n","source":"_posts/Seata protocol supports http2.md","raw":"---\nabbrlink: 1c4cd1f0\ndate: 2021-06-03\ndescription: Summer Code 2021 Seata Proposal\n---\n## 项目背景\n\n在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。\n![seata_protobuf.png](seata_protobuf.png)\n因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。\n\n## HTTP2 跟 HTTP1.1 有什么区别\n\n1. 多路复用\n1. 头部压缩\n1. 二进制分帧\n1. 请求优先级\n1. 服务器推送\n\n## 方案描述\n\n#### 打包、拆包（头部压缩、二进制分帧）\n\n1. 修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。\n1. 增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder\n1. 将传输单元定义为 Frame，做进一步抽象。\n1. 在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。\n\n#### HTTP 连接多路复用\n\n1. 在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。\n1. 增加 AbstractNettyRemoting 中，对 Http2Stream 的创建\n\n## 时间规划\n\n- 尝试自己做一个 HTTP2 的 NettyServer 的 Demo\n  - 7.1 - 7.10\n  - 阅读 Netty 关于 HTTP2 相关文档，并实现 Demo\n- 用 Wireshark 抓包分析并修改 Demo\n  - 7.10 - 7.15\n  - 主要看 Headers 是否压缩，是否实现二进制分帧等等\n- 在 Seata 中尝试修改源码\n  - 7.15 - 7.30\n  - 尝试修改上述方案描述所提到的相关类\n- 性能测试，若性能不佳则找出原因\n  - 7.30 - 8.7\n  - 会测试 HTTP2 和原本私有协议之间的性能差距\n- 代码重构\n  - 8.7 - 8.20\n  - 结合 Seata 社区的意见，对提交的代码进行修改或者重构\n- 书写相关的文档\n  - 8.20 - 8.30\n  - 针对两个月以来的成果书写文档\n\n## 参考资料\n\n[Use Protobuf as the codec of RPC（Seata Issues#823 ）](https://github.com/seata/seata/issues/823)\n[New RPC protocol propose. （Seata Issues#893）](https://github.com/seata/seata/issues/893)\n[RFC7540（HTTP/2）](https://datatracker.ietf.org/doc/html/rfc7540)\n[RFC7541（HPACK）](https://datatracker.ietf.org/doc/html/rfc7541)\n[gRPC over HTTP2](https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html)\n","slug":"Seata protocol supports http2","published":1,"updated":"2021-08-16T03:38:04.694Z","title":"Seata protocol supports http2","_id":"ckse2m4pl0005hcjygexbaxsw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。<br><img src=\"/1c4cd1f0/seata_protobuf.png\" alt=\"seata_protobuf.png\"><br>因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。</p>\n<h2 id=\"HTTP2-跟-HTTP1-1-有什么区别\"><a href=\"#HTTP2-跟-HTTP1-1-有什么区别\" class=\"headerlink\" title=\"HTTP2 跟 HTTP1.1 有什么区别\"></a>HTTP2 跟 HTTP1.1 有什么区别</h2><ol>\n<li>多路复用</li>\n<li>头部压缩</li>\n<li>二进制分帧</li>\n<li>请求优先级</li>\n<li>服务器推送</li>\n</ol>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"打包、拆包（头部压缩、二进制分帧）\"><a href=\"#打包、拆包（头部压缩、二进制分帧）\" class=\"headerlink\" title=\"打包、拆包（头部压缩、二进制分帧）\"></a>打包、拆包（头部压缩、二进制分帧）</h4><ol>\n<li>修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。</li>\n<li>增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder</li>\n<li>将传输单元定义为 Frame，做进一步抽象。</li>\n<li>在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。</li>\n</ol>\n<h4 id=\"HTTP-连接多路复用\"><a href=\"#HTTP-连接多路复用\" class=\"headerlink\" title=\"HTTP 连接多路复用\"></a>HTTP 连接多路复用</h4><ol>\n<li>在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。</li>\n<li>增加 AbstractNettyRemoting 中，对 Http2Stream 的创建</li>\n</ol>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>尝试自己做一个 HTTP2 的 NettyServer 的 Demo<ul>\n<li>7.1 - 7.10</li>\n<li>阅读 Netty 关于 HTTP2 相关文档，并实现 Demo</li>\n</ul>\n</li>\n<li>用 Wireshark 抓包分析并修改 Demo<ul>\n<li>7.10 - 7.15</li>\n<li>主要看 Headers 是否压缩，是否实现二进制分帧等等</li>\n</ul>\n</li>\n<li>在 Seata 中尝试修改源码<ul>\n<li>7.15 - 7.30</li>\n<li>尝试修改上述方案描述所提到的相关类</li>\n</ul>\n</li>\n<li>性能测试，若性能不佳则找出原因<ul>\n<li>7.30 - 8.7</li>\n<li>会测试 HTTP2 和原本私有协议之间的性能差距</li>\n</ul>\n</li>\n<li>代码重构<ul>\n<li>8.7 - 8.20</li>\n<li>结合 Seata 社区的意见，对提交的代码进行修改或者重构</li>\n</ul>\n</li>\n<li>书写相关的文档<ul>\n<li>8.20 - 8.30</li>\n<li>针对两个月以来的成果书写文档</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/seata/seata/issues/823\" target=\"_blank\" rel=\"noopener\">Use Protobuf as the codec of RPC（Seata Issues#823 ）</a><br><a href=\"https://github.com/seata/seata/issues/893\" target=\"_blank\" rel=\"noopener\">New RPC protocol propose. （Seata Issues#893）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7540\" target=\"_blank\" rel=\"noopener\">RFC7540（HTTP/2）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7541\" target=\"_blank\" rel=\"noopener\">RFC7541（HPACK）</a><br><a href=\"https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html\" target=\"_blank\" rel=\"noopener\">gRPC over HTTP2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>在现在的版本，Seata 中 RM、TM 之间的通信，使用的是自定义的一个协议，再使用 ProtoBuf 来进行序列化的操作，协议的格式如下。<br><img src=\"/1c4cd1f0/seata_protobuf.png\" alt=\"seata_protobuf.png\"><br>因为以后要支持多语言，出于多语言的兼容问题，现需要将 Seata 的通信协议拓展支持 HTTP2。</p>\n<h2 id=\"HTTP2-跟-HTTP1-1-有什么区别\"><a href=\"#HTTP2-跟-HTTP1-1-有什么区别\" class=\"headerlink\" title=\"HTTP2 跟 HTTP1.1 有什么区别\"></a>HTTP2 跟 HTTP1.1 有什么区别</h2><ol>\n<li>多路复用</li>\n<li>头部压缩</li>\n<li>二进制分帧</li>\n<li>请求优先级</li>\n<li>服务器推送</li>\n</ol>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"打包、拆包（头部压缩、二进制分帧）\"><a href=\"#打包、拆包（头部压缩、二进制分帧）\" class=\"headerlink\" title=\"打包、拆包（头部压缩、二进制分帧）\"></a>打包、拆包（头部压缩、二进制分帧）</h4><ol>\n<li>修改 ProtocolV1Decoder、ProtocolV1Encoder，抽象为 ProtocolDecoder、ProtocolEncoder。</li>\n<li>增加 ProtocolHTTP2Decoder、ProtocolHTTP2Encoder</li>\n<li>将传输单元定义为 Frame，做进一步抽象。</li>\n<li>在源码中加入 HPACK 算法的实现，用于 Header Frame 的压缩。</li>\n</ol>\n<h4 id=\"HTTP-连接多路复用\"><a href=\"#HTTP-连接多路复用\" class=\"headerlink\" title=\"HTTP 连接多路复用\"></a>HTTP 连接多路复用</h4><ol>\n<li>在 NettyBaseConfig、TransportProtocolType 等类中，加入 HTTP2 的支持。</li>\n<li>增加 AbstractNettyRemoting 中，对 Http2Stream 的创建</li>\n</ol>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>尝试自己做一个 HTTP2 的 NettyServer 的 Demo<ul>\n<li>7.1 - 7.10</li>\n<li>阅读 Netty 关于 HTTP2 相关文档，并实现 Demo</li>\n</ul>\n</li>\n<li>用 Wireshark 抓包分析并修改 Demo<ul>\n<li>7.10 - 7.15</li>\n<li>主要看 Headers 是否压缩，是否实现二进制分帧等等</li>\n</ul>\n</li>\n<li>在 Seata 中尝试修改源码<ul>\n<li>7.15 - 7.30</li>\n<li>尝试修改上述方案描述所提到的相关类</li>\n</ul>\n</li>\n<li>性能测试，若性能不佳则找出原因<ul>\n<li>7.30 - 8.7</li>\n<li>会测试 HTTP2 和原本私有协议之间的性能差距</li>\n</ul>\n</li>\n<li>代码重构<ul>\n<li>8.7 - 8.20</li>\n<li>结合 Seata 社区的意见，对提交的代码进行修改或者重构</li>\n</ul>\n</li>\n<li>书写相关的文档<ul>\n<li>8.20 - 8.30</li>\n<li>针对两个月以来的成果书写文档</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://github.com/seata/seata/issues/823\" target=\"_blank\" rel=\"noopener\">Use Protobuf as the codec of RPC（Seata Issues#823 ）</a><br><a href=\"https://github.com/seata/seata/issues/893\" target=\"_blank\" rel=\"noopener\">New RPC protocol propose. （Seata Issues#893）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7540\" target=\"_blank\" rel=\"noopener\">RFC7540（HTTP/2）</a><br><a href=\"https://datatracker.ietf.org/doc/html/rfc7541\" target=\"_blank\" rel=\"noopener\">RFC7541（HPACK）</a><br><a href=\"https://grpc.github.io/grpc/core/md_doc__p_r_o_t_o_c_o_l-_h_t_t_p2.html\" target=\"_blank\" rel=\"noopener\">gRPC over HTTP2</a></p>\n"},{"abbrlink":"ec4f06e7","date":"2021-07-25T16:00:00.000Z","description":"DBAC 鉴权模型","_content":"DBAC是Role-Based Access Control的简称，即基于角色的权限控制。\n\n翻译成人话就是，每一个用户都有对应的角色，不同的角色拥有不同的权限。\n\n在传统的权限控制中，是直接把权限给予相关用户。\n![ClassicAC.png](ClassicAC.png)\n\n但是RBAC权限模式则多加了一个中间层，即角色。\n![RBAC.png](RBAC.png)\n\n这有什么好处吗？\n\n答案是为了增加安全性和效率。\n\n比如多个用户拥有相同的权限，在分配的时候就要分别为这几个用户指定相同的权限，修改时也要为这几个用户的权限进行一一修改。\n\n有了角色后，只需要为该角色制定好权限后，将相同权限的用户都指定为同一个角色即可，便于权限管理。\n\n对于批量的用户权限调整，只需调整用户关联的角色权限，无需对每一个用户都进行权限调整，既大幅提升权限调整的效率，又降低了漏调权限的概率。\n\n这个模型中又包含了2种：\n\n1.用户和角色是多对一关系，即：一个用户只充当一种角色，一种角色可以有多个用户担当。\n\n2.用户和角色是多对多关系，即：一个用户可同时充当多种角色，一种角色可以有多个用户担当。\n\n那么，什么时候该使用多对一的权限体系，什么时候又该使用多对多的权限体系呢？\n\n如果系统功能比较单一，使用人员较少，岗位权限相对清晰且确保不会出现兼岗的情况，此时可以考虑用多对一的权限体系。\n\n其余情况尽量使用多对多的权限体系，保证系统的可扩展性。如：张三既是行政，也负责财务工作，那张三就同时拥有行政和财务两个角色的权限。\n","source":"_posts/什么是RBAC权限模型.md","raw":"---\nabbrlink: ec4f06e7\ndate: 2021-7-26\ndescription: DBAC 鉴权模型\n---\nDBAC是Role-Based Access Control的简称，即基于角色的权限控制。\n\n翻译成人话就是，每一个用户都有对应的角色，不同的角色拥有不同的权限。\n\n在传统的权限控制中，是直接把权限给予相关用户。\n![ClassicAC.png](ClassicAC.png)\n\n但是RBAC权限模式则多加了一个中间层，即角色。\n![RBAC.png](RBAC.png)\n\n这有什么好处吗？\n\n答案是为了增加安全性和效率。\n\n比如多个用户拥有相同的权限，在分配的时候就要分别为这几个用户指定相同的权限，修改时也要为这几个用户的权限进行一一修改。\n\n有了角色后，只需要为该角色制定好权限后，将相同权限的用户都指定为同一个角色即可，便于权限管理。\n\n对于批量的用户权限调整，只需调整用户关联的角色权限，无需对每一个用户都进行权限调整，既大幅提升权限调整的效率，又降低了漏调权限的概率。\n\n这个模型中又包含了2种：\n\n1.用户和角色是多对一关系，即：一个用户只充当一种角色，一种角色可以有多个用户担当。\n\n2.用户和角色是多对多关系，即：一个用户可同时充当多种角色，一种角色可以有多个用户担当。\n\n那么，什么时候该使用多对一的权限体系，什么时候又该使用多对多的权限体系呢？\n\n如果系统功能比较单一，使用人员较少，岗位权限相对清晰且确保不会出现兼岗的情况，此时可以考虑用多对一的权限体系。\n\n其余情况尽量使用多对多的权限体系，保证系统的可扩展性。如：张三既是行政，也负责财务工作，那张三就同时拥有行政和财务两个角色的权限。\n","slug":"什么是RBAC权限模型","published":1,"updated":"2021-08-16T03:37:18.095Z","title":"什么是RBAC权限模型","_id":"ckse2m4pm0007hcjye01n4mc4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>DBAC是Role-Based Access Control的简称，即基于角色的权限控制。</p>\n<p>翻译成人话就是，每一个用户都有对应的角色，不同的角色拥有不同的权限。</p>\n<p>在传统的权限控制中，是直接把权限给予相关用户。<br><img src=\"/ec4f06e7/ClassicAC.png\" alt=\"ClassicAC.png\"></p>\n<p>但是RBAC权限模式则多加了一个中间层，即角色。<br><img src=\"/ec4f06e7/RBAC.png\" alt=\"RBAC.png\"></p>\n<p>这有什么好处吗？</p>\n<p>答案是为了增加安全性和效率。</p>\n<p>比如多个用户拥有相同的权限，在分配的时候就要分别为这几个用户指定相同的权限，修改时也要为这几个用户的权限进行一一修改。</p>\n<p>有了角色后，只需要为该角色制定好权限后，将相同权限的用户都指定为同一个角色即可，便于权限管理。</p>\n<p>对于批量的用户权限调整，只需调整用户关联的角色权限，无需对每一个用户都进行权限调整，既大幅提升权限调整的效率，又降低了漏调权限的概率。</p>\n<p>这个模型中又包含了2种：</p>\n<p>1.用户和角色是多对一关系，即：一个用户只充当一种角色，一种角色可以有多个用户担当。</p>\n<p>2.用户和角色是多对多关系，即：一个用户可同时充当多种角色，一种角色可以有多个用户担当。</p>\n<p>那么，什么时候该使用多对一的权限体系，什么时候又该使用多对多的权限体系呢？</p>\n<p>如果系统功能比较单一，使用人员较少，岗位权限相对清晰且确保不会出现兼岗的情况，此时可以考虑用多对一的权限体系。</p>\n<p>其余情况尽量使用多对多的权限体系，保证系统的可扩展性。如：张三既是行政，也负责财务工作，那张三就同时拥有行政和财务两个角色的权限。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>DBAC是Role-Based Access Control的简称，即基于角色的权限控制。</p>\n<p>翻译成人话就是，每一个用户都有对应的角色，不同的角色拥有不同的权限。</p>\n<p>在传统的权限控制中，是直接把权限给予相关用户。<br><img src=\"/ec4f06e7/ClassicAC.png\" alt=\"ClassicAC.png\"></p>\n<p>但是RBAC权限模式则多加了一个中间层，即角色。<br><img src=\"/ec4f06e7/RBAC.png\" alt=\"RBAC.png\"></p>\n<p>这有什么好处吗？</p>\n<p>答案是为了增加安全性和效率。</p>\n<p>比如多个用户拥有相同的权限，在分配的时候就要分别为这几个用户指定相同的权限，修改时也要为这几个用户的权限进行一一修改。</p>\n<p>有了角色后，只需要为该角色制定好权限后，将相同权限的用户都指定为同一个角色即可，便于权限管理。</p>\n<p>对于批量的用户权限调整，只需调整用户关联的角色权限，无需对每一个用户都进行权限调整，既大幅提升权限调整的效率，又降低了漏调权限的概率。</p>\n<p>这个模型中又包含了2种：</p>\n<p>1.用户和角色是多对一关系，即：一个用户只充当一种角色，一种角色可以有多个用户担当。</p>\n<p>2.用户和角色是多对多关系，即：一个用户可同时充当多种角色，一种角色可以有多个用户担当。</p>\n<p>那么，什么时候该使用多对一的权限体系，什么时候又该使用多对多的权限体系呢？</p>\n<p>如果系统功能比较单一，使用人员较少，岗位权限相对清晰且确保不会出现兼岗的情况，此时可以考虑用多对一的权限体系。</p>\n<p>其余情况尽量使用多对多的权限体系，保证系统的可扩展性。如：张三既是行政，也负责财务工作，那张三就同时拥有行政和财务两个角色的权限。</p>\n"},{"abbrlink":"f54835d","date":"2021-06-09T16:00:00.000Z","description":"Summer Code 2021 USTC Proposal","_content":"## 项目背景\n\n一个组织的敏感接口不能暴露在外网。\n\n而若以网关的形式转发流量，那么瓶颈会出现在网关上。\n\n因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。\n\n## 方案描述\n\n- [ ] 支持配置文件进行配置\n- [ ] 将 WireGuard 拓展支持 Mac 地址\n- [ ] mesh 连接\n- [ ] 使得机器支持热部署\n- [ ] 让任意两台 NAT 后的机器直接相连\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.25\n  - 学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等\n- 重构 wireguard 的 go 语言实现\n  - 7.25 - 8.20\n  - 将 wireguard 中所需功能提取出来，并修改使其支持 mesh\n- 进行性能测试\n  - 8.20 - 8.25\n  - 做性能测试，并修改源代码\n- 书写文档\n  - 8.25 - 8.30\n  - 书写相关的文档\n- 增加 Dashboard\n  - 若有空余时间\n  - 让机器可以可视化监控状态\n","source":"_posts/全连通内网守护程序.md","raw":"---\nabbrlink: f54835d\ndate: 2021-06-10\ndescription: Summer Code 2021 USTC Proposal\n---\n## 项目背景\n\n一个组织的敏感接口不能暴露在外网。\n\n而若以网关的形式转发流量，那么瓶颈会出现在网关上。\n\n因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。\n\n## 方案描述\n\n- [ ] 支持配置文件进行配置\n- [ ] 将 WireGuard 拓展支持 Mac 地址\n- [ ] mesh 连接\n- [ ] 使得机器支持热部署\n- [ ] 让任意两台 NAT 后的机器直接相连\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.25\n  - 学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等\n- 重构 wireguard 的 go 语言实现\n  - 7.25 - 8.20\n  - 将 wireguard 中所需功能提取出来，并修改使其支持 mesh\n- 进行性能测试\n  - 8.20 - 8.25\n  - 做性能测试，并修改源代码\n- 书写文档\n  - 8.25 - 8.30\n  - 书写相关的文档\n- 增加 Dashboard\n  - 若有空余时间\n  - 让机器可以可视化监控状态\n","slug":"全连通内网守护程序","published":1,"updated":"2021-08-16T03:36:39.599Z","title":"全连通内网守护程序","_id":"ckse2m4pn0009hcjy5uew4f37","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>一个组织的敏感接口不能暴露在外网。</p>\n<p>而若以网关的形式转发流量，那么瓶颈会出现在网关上。</p>\n<p>因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><ul>\n<li>[ ] 支持配置文件进行配置</li>\n<li>[ ] 将 WireGuard 拓展支持 Mac 地址</li>\n<li>[ ] mesh 连接</li>\n<li>[ ] 使得机器支持热部署</li>\n<li>[ ] 让任意两台 NAT 后的机器直接相连</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.25</li>\n<li>学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等</li>\n</ul>\n</li>\n<li>重构 wireguard 的 go 语言实现<ul>\n<li>7.25 - 8.20</li>\n<li>将 wireguard 中所需功能提取出来，并修改使其支持 mesh</li>\n</ul>\n</li>\n<li>进行性能测试<ul>\n<li>8.20 - 8.25</li>\n<li>做性能测试，并修改源代码</li>\n</ul>\n</li>\n<li>书写文档<ul>\n<li>8.25 - 8.30</li>\n<li>书写相关的文档</li>\n</ul>\n</li>\n<li>增加 Dashboard<ul>\n<li>若有空余时间</li>\n<li>让机器可以可视化监控状态</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>一个组织的敏感接口不能暴露在外网。</p>\n<p>而若以网关的形式转发流量，那么瓶颈会出现在网关上。</p>\n<p>因此需要开发出支持任意两台机器都可以通信的软件，并且该软件可以支持 mesh 连接。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><ul>\n<li>[ ] 支持配置文件进行配置</li>\n<li>[ ] 将 WireGuard 拓展支持 Mac 地址</li>\n<li>[ ] mesh 连接</li>\n<li>[ ] 使得机器支持热部署</li>\n<li>[ ] 让任意两台 NAT 后的机器直接相连</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.25</li>\n<li>学习 go 语言，阅读 wireguard 的 go 语言实现，了解 mesh 连接如何实现等等</li>\n</ul>\n</li>\n<li>重构 wireguard 的 go 语言实现<ul>\n<li>7.25 - 8.20</li>\n<li>将 wireguard 中所需功能提取出来，并修改使其支持 mesh</li>\n</ul>\n</li>\n<li>进行性能测试<ul>\n<li>8.20 - 8.25</li>\n<li>做性能测试，并修改源代码</li>\n</ul>\n</li>\n<li>书写文档<ul>\n<li>8.25 - 8.30</li>\n<li>书写相关的文档</li>\n</ul>\n</li>\n<li>增加 Dashboard<ul>\n<li>若有空余时间</li>\n<li>让机器可以可视化监控状态</li>\n</ul>\n</li>\n</ul>\n"},{"abbrlink":"4b69a11a","date":"2019-10-26T16:00:00.000Z","description":"关于爬虫的一些小总结","_content":"突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。\n\n他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。\n\n当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。\n\n我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。\n\n首先让我们理清一下思路。\n\n爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬\n\n我接下来会一一解释其中如何操作。\n\n首先一个大体的爬取思路是：\n\n模拟登录\n\n获取奶茶店铺总数\n\n一页页去找商家\n\n根据 id 去获取商家地址\n\n爬取\n首先是模拟登录部分\n首先先输入手机号码，然后让饿了吗发送手机验证码\n\n这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码\n\n有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。\n\n查看手机，输入手机短信上的验证码。\n\n模拟登录部分就是这样了。\n\n获取奶茶店铺总数\n为什么要获取奶茶店铺总数呢？\n\n因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。\n\n用 chrome 获取接口，post 即可\n\n一页页去找商家\n观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家\n\n所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数\n\n获取商家地址\n商家的地址有点特别，是要点开具体的商家，才能看到地址\n\n而饿了吗后台给每个商家分配了一个单独的商家 id\n\n这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id\n\n所以我们前面存储商家的 id，用来获取商家地址\n\n最后把商家 id 删除即可\n\n解析\n解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。\n\n一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。\n\n另外，还有正则化，css 解析器等等。\n\n存储\n存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。\n\n另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？\n\n去重\n去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。\n\n数据库\n内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。\n\n因为有内存回收机制，这样内存绝对够用。\n\n当然我这里没有用过数据库。\n\n代码优化\n我在爬取过程中发现，爬取速度异常的慢 QAQ\n\n提供几种加速的思路。\n\n多线程\n线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。\n\n多进程\n进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。\n\n分布式\n分布式我没接触过，但是分布式可以更加快的加速爬取的速度。\n\n分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。\n\n每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。\n\n线程<进程<电脑，所以速度上多线程<多进程<分布式。\n\n防反爬\n我在爬取的时候，深受反爬制度的打击。\n\n好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。\n\n解决方式：\n\n封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。\n\n获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。\n\n一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。\n\n它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。\n\n模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。\n\n也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。\n\n原文以及代码见:[https://github.com/xilou31/eLeMa_Crawler](https://github.com/xilou31/eLeMa_Crawler)\n","source":"_posts/关于爬虫的一点经验.md","raw":"---\nabbrlink: 4b69a11a\ndate: 2019-10-27\ndescription: 关于爬虫的一些小总结\n---\n突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。\n\n他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。\n\n当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。\n\n我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。\n\n首先让我们理清一下思路。\n\n爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬\n\n我接下来会一一解释其中如何操作。\n\n首先一个大体的爬取思路是：\n\n模拟登录\n\n获取奶茶店铺总数\n\n一页页去找商家\n\n根据 id 去获取商家地址\n\n爬取\n首先是模拟登录部分\n首先先输入手机号码，然后让饿了吗发送手机验证码\n\n这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码\n\n有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。\n\n查看手机，输入手机短信上的验证码。\n\n模拟登录部分就是这样了。\n\n获取奶茶店铺总数\n为什么要获取奶茶店铺总数呢？\n\n因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。\n\n用 chrome 获取接口，post 即可\n\n一页页去找商家\n观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家\n\n所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数\n\n获取商家地址\n商家的地址有点特别，是要点开具体的商家，才能看到地址\n\n而饿了吗后台给每个商家分配了一个单独的商家 id\n\n这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id\n\n所以我们前面存储商家的 id，用来获取商家地址\n\n最后把商家 id 删除即可\n\n解析\n解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。\n\n一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。\n\n另外，还有正则化，css 解析器等等。\n\n存储\n存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。\n\n另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？\n\n去重\n去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。\n\n数据库\n内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。\n\n因为有内存回收机制，这样内存绝对够用。\n\n当然我这里没有用过数据库。\n\n代码优化\n我在爬取过程中发现，爬取速度异常的慢 QAQ\n\n提供几种加速的思路。\n\n多线程\n线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。\n\n多进程\n进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。\n\n分布式\n分布式我没接触过，但是分布式可以更加快的加速爬取的速度。\n\n分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。\n\n每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。\n\n线程<进程<电脑，所以速度上多线程<多进程<分布式。\n\n防反爬\n我在爬取的时候，深受反爬制度的打击。\n\n好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。\n\n解决方式：\n\n封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。\n\n获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。\n\n一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。\n\n它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。\n\n模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。\n\n也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。\n\n原文以及代码见:[https://github.com/xilou31/eLeMa_Crawler](https://github.com/xilou31/eLeMa_Crawler)\n","slug":"关于爬虫的一点经验","published":1,"updated":"2021-08-16T03:35:36.768Z","title":"关于爬虫的一点经验","_id":"ckse2m4pr000bhcjyen1z92cf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。</p>\n<p>他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。</p>\n<p>当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。</p>\n<p>我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。</p>\n<p>首先让我们理清一下思路。</p>\n<p>爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬</p>\n<p>我接下来会一一解释其中如何操作。</p>\n<p>首先一个大体的爬取思路是：</p>\n<p>模拟登录</p>\n<p>获取奶茶店铺总数</p>\n<p>一页页去找商家</p>\n<p>根据 id 去获取商家地址</p>\n<p>爬取<br>首先是模拟登录部分<br>首先先输入手机号码，然后让饿了吗发送手机验证码</p>\n<p>这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码</p>\n<p>有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。</p>\n<p>查看手机，输入手机短信上的验证码。</p>\n<p>模拟登录部分就是这样了。</p>\n<p>获取奶茶店铺总数<br>为什么要获取奶茶店铺总数呢？</p>\n<p>因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。</p>\n<p>用 chrome 获取接口，post 即可</p>\n<p>一页页去找商家<br>观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家</p>\n<p>所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数</p>\n<p>获取商家地址<br>商家的地址有点特别，是要点开具体的商家，才能看到地址</p>\n<p>而饿了吗后台给每个商家分配了一个单独的商家 id</p>\n<p>这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id</p>\n<p>所以我们前面存储商家的 id，用来获取商家地址</p>\n<p>最后把商家 id 删除即可</p>\n<p>解析<br>解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。</p>\n<p>一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。</p>\n<p>另外，还有正则化，css 解析器等等。</p>\n<p>存储<br>存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。</p>\n<p>另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？</p>\n<p>去重<br>去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。</p>\n<p>数据库<br>内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。</p>\n<p>因为有内存回收机制，这样内存绝对够用。</p>\n<p>当然我这里没有用过数据库。</p>\n<p>代码优化<br>我在爬取过程中发现，爬取速度异常的慢 QAQ</p>\n<p>提供几种加速的思路。</p>\n<p>多线程<br>线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。</p>\n<p>多进程<br>进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。</p>\n<p>分布式<br>分布式我没接触过，但是分布式可以更加快的加速爬取的速度。</p>\n<p>分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。</p>\n<p>每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。</p>\n<p>线程&lt;进程&lt;电脑，所以速度上多线程&lt;多进程&lt;分布式。</p>\n<p>防反爬<br>我在爬取的时候，深受反爬制度的打击。</p>\n<p>好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。</p>\n<p>解决方式：</p>\n<p>封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。</p>\n<p>获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。</p>\n<p>一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。</p>\n<p>它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。</p>\n<p>模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。</p>\n<p>也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。</p>\n<p>原文以及代码见:<a href=\"https://github.com/xilou31/eLeMa_Crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/xilou31/eLeMa_Crawler</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>突然有这么一天，我的一位同学找到了我，问我做不做爬虫的外包，是一位已经毕业的师兄。</p>\n<p>他说他准备开奶茶店，因此想了解整个广州地区的奶茶店分布，以及奶茶店销量与地点的关系，借此来找到合适的地点开奶茶店。</p>\n<p>当时也是年轻，对价格没太多了解，最终是以 300 块的价格成交了，但是还是学到不少东西的。</p>\n<p>我们选择的爬虫对象就是我们的外卖平台：“饿了吗”。通过外卖的销量，也能一定程度地反映出奶茶店的销量。</p>\n<p>首先让我们理清一下思路。</p>\n<p>爬虫大体上分为五个部分：爬取、存储、解析、代码优化、防反爬</p>\n<p>我接下来会一一解释其中如何操作。</p>\n<p>首先一个大体的爬取思路是：</p>\n<p>模拟登录</p>\n<p>获取奶茶店铺总数</p>\n<p>一页页去找商家</p>\n<p>根据 id 去获取商家地址</p>\n<p>爬取<br>首先是模拟登录部分<br>首先先输入手机号码，然后让饿了吗发送手机验证码</p>\n<p>这个时候有两种情况，有图片验证码（也就是让你识别字母），或者是没有图片验证码，会直接发送手机验证码</p>\n<p>有图片验证码的情况下怎么处理呢？我们可以将验证码的图片先转为二进制，再将二进制转为 png 格式的图片，下载到本地。然后用电脑自带的图片播放器打开，进行人工识别并手动输入验证码。</p>\n<p>查看手机，输入手机短信上的验证码。</p>\n<p>模拟登录部分就是这样了。</p>\n<p>获取奶茶店铺总数<br>为什么要获取奶茶店铺总数呢？</p>\n<p>因为你第三步一页页去找商家，其实是有一个最大数量的。如果不获取奶茶店铺总数，爬虫就会去找一些没有信息的页面。</p>\n<p>用 chrome 获取接口，post 即可</p>\n<p>一页页去找商家<br>观察饿了吗的页面，可以看到饿了吗每个页面会显示 8 个商家</p>\n<p>所以我们设置每次获取 8 个商家，直到超过奶茶店铺总数</p>\n<p>获取商家地址<br>商家的地址有点特别，是要点开具体的商家，才能看到地址</p>\n<p>而饿了吗后台给每个商家分配了一个单独的商家 id</p>\n<p>这个 id 去哪里获取呢？仔细分析后，可以看到我们在一页页找商家的时候，获取商家经纬度的时候，同时也可以获取到商家的 id</p>\n<p>所以我们前面存储商家的 id，用来获取商家地址</p>\n<p>最后把商家 id 删除即可</p>\n<p>解析<br>解析部分没什么好讲的，主要就是将页面信息或者将服务器返回的数据，提取出自己想要的。</p>\n<p>一般来说，静态页面用 BeautifulSoup 这个库来解析。动态页面，用 json 这个库，将数据转化为 json 格式。</p>\n<p>另外，还有正则化，css 解析器等等。</p>\n<p>存储<br>存储过程中有一个很大的问题，就是两个很近的地方，可能获取的商家信息基本都是重复的。所以去重是一个问题。</p>\n<p>另外就是，数据其实是存储在内存里面的，万一爬取的数据太多，内存不够放怎么办？</p>\n<p>去重<br>去重的话，我们可以将数据先转为 pandas 的 DataFrame，然后 DataFrame 有一个内置函数可以去重。</p>\n<p>数据库<br>内存的大小是有限的。我们可以这样处理，在本地安装 mysql，然后每次爬取一个地址，就将那里的数据存储在 mysql 数据库里面，然后再将内存里面的数据释放掉。</p>\n<p>因为有内存回收机制，这样内存绝对够用。</p>\n<p>当然我这里没有用过数据库。</p>\n<p>代码优化<br>我在爬取过程中发现，爬取速度异常的慢 QAQ</p>\n<p>提供几种加速的思路。</p>\n<p>多线程<br>线程是操作系统能够进行运算调度的最小单位。多线程相当于有多个爬虫同时爬取。但是一定要注意，一定要防止堵塞，也就是要异步执行，下面几种相同。</p>\n<p>多进程<br>进程在线程之上。我在代码中就是使用了多进程。还挺方便的，毕竟 python 有多进程和多线程的库，可以查一下官方文档即可使用。</p>\n<p>分布式<br>分布式我没接触过，但是分布式可以更加快的加速爬取的速度。</p>\n<p>分布式通俗的讲，就是多台电脑一起爬取。可以将一个爬取任务，细分为多个子任务。</p>\n<p>每个电脑完成自己的任务后，再将自己的那部分数据上传，最终整合起来。</p>\n<p>线程&lt;进程&lt;电脑，所以速度上多线程&lt;多进程&lt;分布式。</p>\n<p>防反爬<br>我在爬取的时候，深受反爬制度的打击。</p>\n<p>好一点的，封 ip。差一点的，直接把账号给封了。最严重的是，有一天刚好不是很幸运，加密手段换了。当然不是因为我才换得，是刚好他们公司打算换，所以就只能换一种方式来爬取了。</p>\n<p>解决方式：</p>\n<p>封 ip 的话，可以使用代理池。见过身边有同学做过代理池，也用过，不过原理不是很清楚。</p>\n<p>获取 cookie。一般浏览器是怎么样知道你是登录的呢，是通过 cookie 或者 token。</p>\n<p>一般是，当你登录的时候，登录服务器会将一段口令，当然生成口令的算法只有别人才知道。</p>\n<p>它会将口令存储在登陆服务器上，同时也会发到你的电脑或者手机上。当你尝试获取信息时，服务器就会找他自己服务器里面有没有这个口令，如果有代表已经登录。</p>\n<p>模拟浏览器行为。怎么说呢？有一个库叫做 selenium，它可以控制浏览器行为，比如你在电脑上输入代码，让浏览器打开某个网址。那么浏览器真的可以打开那个网址。</p>\n<p>也可以模拟上划滚动等等行为。所以这种方法也是没那么容易被封的，因为他跟用户的行为是相同的，就是爬取速度比较慢就是了，但是是自动化的。</p>\n<p>原文以及代码见:<a href=\"https://github.com/xilou31/eLeMa_Crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/xilou31/eLeMa_Crawler</a></p>\n"},{"abbrlink":"76ccdb2e","date":"2021-06-08T16:00:00.000Z","description":"Summer Code 2021 Wechaty Proposal","_content":"## 项目背景\n\n原 2020 年**开源供应链点亮计划**有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。\n\n原项目已实现**图片、群聊、附件、Ding**这些功能。\n\n但其中 puppet 有部分接口没有完全实现功能。\n\n现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。\n\n另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。\n\n## 方案描述\n\n#### 功能\n\n- [ ] 富文本\n- [ ] 群名片\n- [ ] 消息卡片\n- [ ] 日历\n- [ ] 会议室\n- [ ] 视频会议\n- [ ] 邮箱\n- [ ] 打卡\n\n#### 非功能\n\n- [ ] 完善飞书 puppet 的使用文档\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.15\n  - 阅读 wechaty-puppet-lark 源代码，学习 TypeScript\n- 完善富文本等功能对应的 puppet 接口\n  - 7.15 - 8.7\n  - 阅读飞书开放平台文档，熟悉飞书服务端 API\n  - 完善飞书 puppet 的接口\n- 完成富文本等功能对应的订阅事件\n  - 8.7 - 8.15\n  - 在 ding-dong-bot.ts 中增加相应的代码\n- 重构代码\n  - 8.15 - 8.23\n- 完善飞书 puppet 使用文档\n  - 8.22 - 8.30\n\n## 参考资料\n\n[飞书开放平台](https://open.feishu.cn/document/)\n[wechaty-puppet-lark](https://github.com/wechaty/wechaty-puppet-lark)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初](https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中](https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末](https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/)\n","source":"_posts/基于开放 API 封装 Wechaty 接口下的飞书聊天机器人.md","raw":"---\nabbrlink: 76ccdb2e\ndate: 2021-06-09\ndescription: Summer Code 2021 Wechaty Proposal\n---\n## 项目背景\n\n原 2020 年**开源供应链点亮计划**有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。\n\n原项目已实现**图片、群聊、附件、Ding**这些功能。\n\n但其中 puppet 有部分接口没有完全实现功能。\n\n现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。\n\n另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。\n\n## 方案描述\n\n#### 功能\n\n- [ ] 富文本\n- [ ] 群名片\n- [ ] 消息卡片\n- [ ] 日历\n- [ ] 会议室\n- [ ] 视频会议\n- [ ] 邮箱\n- [ ] 打卡\n\n#### 非功能\n\n- [ ] 完善飞书 puppet 的使用文档\n\n## 时间规划\n\n- 熟悉技术栈\n  - 7.1 - 7.15\n  - 阅读 wechaty-puppet-lark 源代码，学习 TypeScript\n- 完善富文本等功能对应的 puppet 接口\n  - 7.15 - 8.7\n  - 阅读飞书开放平台文档，熟悉飞书服务端 API\n  - 完善飞书 puppet 的接口\n- 完成富文本等功能对应的订阅事件\n  - 8.7 - 8.15\n  - 在 ding-dong-bot.ts 中增加相应的代码\n- 重构代码\n  - 8.15 - 8.23\n- 完善飞书 puppet 使用文档\n  - 8.22 - 8.30\n\n## 参考资料\n\n[飞书开放平台](https://open.feishu.cn/document/)\n[wechaty-puppet-lark](https://github.com/wechaty/wechaty-puppet-lark)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初](https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中](https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/)\n[基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末](https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/)\n","slug":"基于开放 API 封装 Wechaty 接口下的飞书聊天机器人","published":1,"updated":"2021-08-16T03:36:12.822Z","title":"基于开放 API 封装 Wechaty 接口下的飞书聊天机器人","_id":"ckse2m4ps000dhcjy0oos5ge9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>原 2020 年<strong>开源供应链点亮计划</strong>有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。</p>\n<p>原项目已实现<strong>图片、群聊、附件、Ding</strong>这些功能。</p>\n<p>但其中 puppet 有部分接口没有完全实现功能。</p>\n<p>现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。</p>\n<p>另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li>[ ] 富文本</li>\n<li>[ ] 群名片</li>\n<li>[ ] 消息卡片</li>\n<li>[ ] 日历</li>\n<li>[ ] 会议室</li>\n<li>[ ] 视频会议</li>\n<li>[ ] 邮箱</li>\n<li>[ ] 打卡</li>\n</ul>\n<h4 id=\"非功能\"><a href=\"#非功能\" class=\"headerlink\" title=\"非功能\"></a>非功能</h4><ul>\n<li>[ ] 完善飞书 puppet 的使用文档</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.15</li>\n<li>阅读 wechaty-puppet-lark 源代码，学习 TypeScript</li>\n</ul>\n</li>\n<li>完善富文本等功能对应的 puppet 接口<ul>\n<li>7.15 - 8.7</li>\n<li>阅读飞书开放平台文档，熟悉飞书服务端 API</li>\n<li>完善飞书 puppet 的接口</li>\n</ul>\n</li>\n<li>完成富文本等功能对应的订阅事件<ul>\n<li>8.7 - 8.15</li>\n<li>在 ding-dong-bot.ts 中增加相应的代码</li>\n</ul>\n</li>\n<li>重构代码<ul>\n<li>8.15 - 8.23</li>\n</ul>\n</li>\n<li>完善飞书 puppet 使用文档<ul>\n<li>8.22 - 8.30</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://open.feishu.cn/document/\" target=\"_blank\" rel=\"noopener\">飞书开放平台</a><br><a href=\"https://github.com/wechaty/wechaty-puppet-lark\" target=\"_blank\" rel=\"noopener\">wechaty-puppet-lark</a><br><a href=\"https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初</a><br><a href=\"https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中</a><br><a href=\"https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目背景\"><a href=\"#项目背景\" class=\"headerlink\" title=\"项目背景\"></a>项目背景</h2><p>原 2020 年<strong>开源供应链点亮计划</strong>有项目“基于开放 API 封装 Wechaty 接口下的飞书聊天机器人”。</p>\n<p>原项目已实现<strong>图片、群聊、附件、Ding</strong>这些功能。</p>\n<p>但其中 puppet 有部分接口没有完全实现功能。</p>\n<p>现需要对接飞书接口，以完善 puppet 上各个类型的消息接口。</p>\n<p>另外在实现 puppet 接口后，在 ding-dong-bot.ts 中增加对应的订阅消息事件。</p>\n<h2 id=\"方案描述\"><a href=\"#方案描述\" class=\"headerlink\" title=\"方案描述\"></a>方案描述</h2><h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><ul>\n<li>[ ] 富文本</li>\n<li>[ ] 群名片</li>\n<li>[ ] 消息卡片</li>\n<li>[ ] 日历</li>\n<li>[ ] 会议室</li>\n<li>[ ] 视频会议</li>\n<li>[ ] 邮箱</li>\n<li>[ ] 打卡</li>\n</ul>\n<h4 id=\"非功能\"><a href=\"#非功能\" class=\"headerlink\" title=\"非功能\"></a>非功能</h4><ul>\n<li>[ ] 完善飞书 puppet 的使用文档</li>\n</ul>\n<h2 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h2><ul>\n<li>熟悉技术栈<ul>\n<li>7.1 - 7.15</li>\n<li>阅读 wechaty-puppet-lark 源代码，学习 TypeScript</li>\n</ul>\n</li>\n<li>完善富文本等功能对应的 puppet 接口<ul>\n<li>7.15 - 8.7</li>\n<li>阅读飞书开放平台文档，熟悉飞书服务端 API</li>\n<li>完善飞书 puppet 的接口</li>\n</ul>\n</li>\n<li>完成富文本等功能对应的订阅事件<ul>\n<li>8.7 - 8.15</li>\n<li>在 ding-dong-bot.ts 中增加相应的代码</li>\n</ul>\n</li>\n<li>重构代码<ul>\n<li>8.15 - 8.23</li>\n</ul>\n</li>\n<li>完善飞书 puppet 使用文档<ul>\n<li>8.22 - 8.30</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://open.feishu.cn/document/\" target=\"_blank\" rel=\"noopener\">飞书开放平台</a><br><a href=\"https://github.com/wechaty/wechaty-puppet-lark\" target=\"_blank\" rel=\"noopener\">wechaty-puppet-lark</a><br><a href=\"https://wechaty.js.org/2020/07/29/wechaty-puppet-lark-plan-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期初</a><br><a href=\"https://wechaty.js.org/2020/08/19/wechaty-puppet-lark-mid-term-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期中</a><br><a href=\"https://wechaty.js.org/2020/09/30/wechaty-puppet-lark-final-blog/\" target=\"_blank\" rel=\"noopener\">基于开放 API 封装 Wechaty 接口下的飞书聊天机器人：期末</a></p>\n"},{"abbrlink":"1842b797","date":"2021-06-04T16:00:00.000Z","description":"大数据","_content":"# 大数据概念理解\n\n## 什么是大数据？\n\n大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。\n\n主要解决：海量数据的存储和海量数据的分析计算问题。\n\n按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。\n\n换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T\n\n## 大数据特征\n\nVolume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。\n\nVelocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。\n\nVariety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。\n\nValue（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。\n\n## 大数据应用场景？\n\n物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。\n\n零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。\n\n旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。\n\n商品广告推荐：给用户推荐可能喜欢的商品。\n\n保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。\n\n金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。\n\n房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。\n\n## 大数据有哪些部分组成？\n\n### 大数据平台运维\n\n平台软件(hadoop、spark、flink、kafka)的安装和维护\n​\n\n关于平台的性能的监测\n​\n\n平台的性能的调优\n\n### 数据仓库\n\nETL 工程师：数据清洗\n​\n\nHive 工程师:数据分析\n\n### 数据挖掘\n\n算法、建模\n\n### 可视化\n\necharts、kylin、kibina\n​\n\n# Hadoop 深入理解\n\n## 什么是 Hadoop?\n\nHadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。\n​\n\n有三个组成：\n​\n\n1. hdfs:分布式的文件系统，主要解决大数据的储存问题\n\n​\n\n2. mapreduce:分布式的批量计算\n\n​\n\n3. yarn:分布式的资源管理组件\n\n​\n\n## Hadoop 的发展和发行版本？\n\n#### ​\n\n### Hadoop 发展历史\n\nLucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎\n​\n\n2001 年年底成为 Apache 基金会的一个子项目\n​\n\n对于大数量的场景，Lucene 面对与 Google 同样的困难\n​\n\n学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch\n​\n\n可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)\n​\n\nGFS —>HDFS\nMap-Reduce —>MR\nBigTable —>Hbase\n​\n\n2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升\n​\n\n2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中\n​\n\n名字来源于 Doug Cutting 儿子的玩具大象\n​\n\nHadoop 就此诞生并迅速发展，标志这云计算时代来临\n\n### Hadoop 三大发行版本\n\nHadoop 三大发行版本：Apache、Cloudera、Hortonworks。\n​\n\nApache 版本最原始（最基础）的版本，对于入门学习最好。\n​\n\nCloudera 在大型互联网企业中用的较多。\n​\n\nHortonworks 文档较好。\n\n## Hadoop 的优点？\n\n1. 高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。\n\n​\n\n2. 高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。\n\n​\n\n3. 高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。\n\n​\n\n4. 高容错性：能够自动将失败的任务重新分配。\n\n## Hadoop 组成\n\n在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。\n\nHDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n​\n\nMapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。\n​\n\nCommon（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。\n​\n\n在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。\n\n### HDFS 架构概述\n\nNameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。\n\nDataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。\n\nSecondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。\n\n### YARN 架构概述\n\nResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；\n\nNodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；\n\nApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。\n\nContainer：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。\n\n### MapReduce 架构概述\n\nMapReduce 将计算过程分为两个阶段：Map 和 Reduce\n​\n\nMap 阶段：并行处理输入数据\n​\n\nReduce 阶段：对 Map 结果进行汇总\n\n## Hadoop 生态圈理解\n\n​\n\n### 协调与管理（Coordination and Management）\n\n#### HCatalog\n\n主要用来进行元数据管理。\n概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。\n\nHCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。\n\nHCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。\n\nHCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。\n\n#### Ambari\n\n主要是基于 web 管理 hadoop 的工具。\nApache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。\n\nApache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。\n\n#### Zookepper\n\n主要是配置信息数据同步。\n​\n\nZookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。\n\nZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n\n### 询问（Query）\n\n#### Impala\n\n主要是基于内存运算，大平台，数据更快。\n​\n\nImpala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。\n\nImpala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。\n\n#### Presto\n\n主要是基于 sql 语句。\n​\n\nPresto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。\n\n#### Hive\n\n主要是基于 sql 语句。\n​\n\nHive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。\n\n其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。\n\n#### Pig\n\n主要基于 sql 脚本。\n​\n\nApache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。\n\n要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。\n\n要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。\n\n优点：\n\n不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。\n​\n\n使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。\nApache Pig 使用多查询方法，从而减少代码长度。\n\n### 数据管道（Data piping）\n\n#### Sqoop\n\nSqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。\n\n#### Flume\n\nFlume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。\n\n### 核心 Hadoop（Core Hadoop）\n\n#### HDFS\n\nHadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n\nHDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。\n\n#### MapReduce\n\nMapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。\n\nMapReduce1.0:一个分布式的资源调度和离线并行计算框架。\n\nMapReduce2.1:一个分布式的离线并行计算框架。\n\n#### Yarn\n\nHadoop YARN：作业调度与集群资源管理的框架。\n\nApache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。\n\n### 机器学习（Machine Learning）\n\n#### Mahout\n\nApache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：\n\n推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。\n​\n\n聚集：收集文件并进行相关文件分组。\n​\n\n分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。\n​\n\n频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。\n\n### NoSQL 数据库（NoSQL Database）\n\n#### Hbase\n\nHBase 是一个分布式的、面向列的开源数据库。\n\nHBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。\n\n### 扩展\n\n#### Spark\n\nSpark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。\n\nApache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。\n​\n\nSpark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。\n\nSpark 主要有三个特点 :\n\n首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。\n​\n\n其次，Spark 很快，支持交互式计算和复杂算法。\n​\n\n最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。\n\n#### Tez\n\nTez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。\n​\n\n它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。\n\nTez 主要的两个设计目标:\n\n增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。\n​\n\n高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。\n\n#### Kafka\n\nKafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：\n​\n\n1. 通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。\n\n2. 高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。\n\n3. 支持通过 Kafka 服务器和消费机集群来分区消息。\n\n4. 支持 Hadoop 并行数据加载。\n\n#### Storm\n\nStorm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。\n\nStorm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。\n\n#### Oozie\n\nOozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。\n\nOozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。\n\n#### R 语言\n\nR 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。\n​\n","source":"_posts/大数据与Hadoop生态系统总结.md","raw":"---\nabbrlink: 1842b797\ndate: 2021-06-05\ndescription: 大数据\n---\n# 大数据概念理解\n\n## 什么是大数据？\n\n大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。\n\n主要解决：海量数据的存储和海量数据的分析计算问题。\n\n按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。\n\n换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T\n\n## 大数据特征\n\nVolume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。\n\nVelocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。\n\nVariety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。\n\nValue（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。\n\n## 大数据应用场景？\n\n物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。\n\n零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。\n\n旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。\n\n商品广告推荐：给用户推荐可能喜欢的商品。\n\n保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。\n\n金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。\n\n房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。\n\n## 大数据有哪些部分组成？\n\n### 大数据平台运维\n\n平台软件(hadoop、spark、flink、kafka)的安装和维护\n​\n\n关于平台的性能的监测\n​\n\n平台的性能的调优\n\n### 数据仓库\n\nETL 工程师：数据清洗\n​\n\nHive 工程师:数据分析\n\n### 数据挖掘\n\n算法、建模\n\n### 可视化\n\necharts、kylin、kibina\n​\n\n# Hadoop 深入理解\n\n## 什么是 Hadoop?\n\nHadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。\n​\n\n有三个组成：\n​\n\n1. hdfs:分布式的文件系统，主要解决大数据的储存问题\n\n​\n\n2. mapreduce:分布式的批量计算\n\n​\n\n3. yarn:分布式的资源管理组件\n\n​\n\n## Hadoop 的发展和发行版本？\n\n#### ​\n\n### Hadoop 发展历史\n\nLucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎\n​\n\n2001 年年底成为 Apache 基金会的一个子项目\n​\n\n对于大数量的场景，Lucene 面对与 Google 同样的困难\n​\n\n学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch\n​\n\n可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)\n​\n\nGFS —>HDFS\nMap-Reduce —>MR\nBigTable —>Hbase\n​\n\n2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升\n​\n\n2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中\n​\n\n名字来源于 Doug Cutting 儿子的玩具大象\n​\n\nHadoop 就此诞生并迅速发展，标志这云计算时代来临\n\n### Hadoop 三大发行版本\n\nHadoop 三大发行版本：Apache、Cloudera、Hortonworks。\n​\n\nApache 版本最原始（最基础）的版本，对于入门学习最好。\n​\n\nCloudera 在大型互联网企业中用的较多。\n​\n\nHortonworks 文档较好。\n\n## Hadoop 的优点？\n\n1. 高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。\n\n​\n\n2. 高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。\n\n​\n\n3. 高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。\n\n​\n\n4. 高容错性：能够自动将失败的任务重新分配。\n\n## Hadoop 组成\n\n在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。\n\nHDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n​\n\nMapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。\n​\n\nCommon（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。\n​\n\n在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。\n\n### HDFS 架构概述\n\nNameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。\n\nDataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。\n\nSecondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。\n\n### YARN 架构概述\n\nResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；\n\nNodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；\n\nApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。\n\nContainer：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。\n\n### MapReduce 架构概述\n\nMapReduce 将计算过程分为两个阶段：Map 和 Reduce\n​\n\nMap 阶段：并行处理输入数据\n​\n\nReduce 阶段：对 Map 结果进行汇总\n\n## Hadoop 生态圈理解\n\n​\n\n### 协调与管理（Coordination and Management）\n\n#### HCatalog\n\n主要用来进行元数据管理。\n概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。\n\nHCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。\n\nHCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。\n\nHCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。\n\n#### Ambari\n\n主要是基于 web 管理 hadoop 的工具。\nApache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。\n\nApache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。\n\n#### Zookepper\n\n主要是配置信息数据同步。\n​\n\nZookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。\n\nZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n\n### 询问（Query）\n\n#### Impala\n\n主要是基于内存运算，大平台，数据更快。\n​\n\nImpala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。\n\nImpala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。\n\n#### Presto\n\n主要是基于 sql 语句。\n​\n\nPresto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。\n\n#### Hive\n\n主要是基于 sql 语句。\n​\n\nHive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。\n\n其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。\n\n#### Pig\n\n主要基于 sql 脚本。\n​\n\nApache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。\n\n要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。\n\n要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。\n\n优点：\n\n不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。\n​\n\n使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。\nApache Pig 使用多查询方法，从而减少代码长度。\n\n### 数据管道（Data piping）\n\n#### Sqoop\n\nSqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。\n\n#### Flume\n\nFlume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。\n\n### 核心 Hadoop（Core Hadoop）\n\n#### HDFS\n\nHadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。\n\nHDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。\n\n#### MapReduce\n\nMapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。\n\nMapReduce1.0:一个分布式的资源调度和离线并行计算框架。\n\nMapReduce2.1:一个分布式的离线并行计算框架。\n\n#### Yarn\n\nHadoop YARN：作业调度与集群资源管理的框架。\n\nApache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。\n\n### 机器学习（Machine Learning）\n\n#### Mahout\n\nApache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：\n\n推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。\n​\n\n聚集：收集文件并进行相关文件分组。\n​\n\n分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。\n​\n\n频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。\n\n### NoSQL 数据库（NoSQL Database）\n\n#### Hbase\n\nHBase 是一个分布式的、面向列的开源数据库。\n\nHBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。\n\n### 扩展\n\n#### Spark\n\nSpark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。\n\nApache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。\n​\n\nSpark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。\n\nSpark 主要有三个特点 :\n\n首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。\n​\n\n其次，Spark 很快，支持交互式计算和复杂算法。\n​\n\n最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。\n\n#### Tez\n\nTez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。\n​\n\n它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。\n\nTez 主要的两个设计目标:\n\n增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。\n​\n\n高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。\n\n#### Kafka\n\nKafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：\n​\n\n1. 通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。\n\n2. 高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。\n\n3. 支持通过 Kafka 服务器和消费机集群来分区消息。\n\n4. 支持 Hadoop 并行数据加载。\n\n#### Storm\n\nStorm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。\n\nStorm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。\n\n#### Oozie\n\nOozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。\n\nOozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。\n\n#### R 语言\n\nR 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。\n​\n","slug":"大数据与Hadoop生态系统总结","published":1,"updated":"2021-08-16T03:34:32.050Z","title":"大数据与Hadoop生态系统总结","_id":"ckse2m4pt000ehcjy9gco69e5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"大数据概念理解\"><a href=\"#大数据概念理解\" class=\"headerlink\" title=\"大数据概念理解\"></a>大数据概念理解</h1><h2 id=\"什么是大数据？\"><a href=\"#什么是大数据？\" class=\"headerlink\" title=\"什么是大数据？\"></a>什么是大数据？</h2><p>大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p>\n<p>主要解决：海量数据的存储和海量数据的分析计算问题。</p>\n<p>按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。</p>\n<p>换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T</p>\n<h2 id=\"大数据特征\"><a href=\"#大数据特征\" class=\"headerlink\" title=\"大数据特征\"></a>大数据特征</h2><p>Volume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。</p>\n<p>Velocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。</p>\n<p>Variety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。</p>\n<p>Value（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。</p>\n<h2 id=\"大数据应用场景？\"><a href=\"#大数据应用场景？\" class=\"headerlink\" title=\"大数据应用场景？\"></a>大数据应用场景？</h2><p>物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。</p>\n<p>零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。</p>\n<p>旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。</p>\n<p>商品广告推荐：给用户推荐可能喜欢的商品。</p>\n<p>保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。</p>\n<p>金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。</p>\n<p>房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。</p>\n<h2 id=\"大数据有哪些部分组成？\"><a href=\"#大数据有哪些部分组成？\" class=\"headerlink\" title=\"大数据有哪些部分组成？\"></a>大数据有哪些部分组成？</h2><h3 id=\"大数据平台运维\"><a href=\"#大数据平台运维\" class=\"headerlink\" title=\"大数据平台运维\"></a>大数据平台运维</h3><p>平台软件(hadoop、spark、flink、kafka)的安装和维护<br>​</p>\n<p>关于平台的性能的监测<br>​</p>\n<p>平台的性能的调优</p>\n<h3 id=\"数据仓库\"><a href=\"#数据仓库\" class=\"headerlink\" title=\"数据仓库\"></a>数据仓库</h3><p>ETL 工程师：数据清洗<br>​</p>\n<p>Hive 工程师:数据分析</p>\n<h3 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h3><p>算法、建模</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>echarts、kylin、kibina<br>​</p>\n<h1 id=\"Hadoop-深入理解\"><a href=\"#Hadoop-深入理解\" class=\"headerlink\" title=\"Hadoop 深入理解\"></a>Hadoop 深入理解</h1><h2 id=\"什么是-Hadoop\"><a href=\"#什么是-Hadoop\" class=\"headerlink\" title=\"什么是 Hadoop?\"></a>什么是 Hadoop?</h2><p>Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。<br>​</p>\n<p>有三个组成：<br>​</p>\n<ol>\n<li>hdfs:分布式的文件系统，主要解决大数据的储存问题</li>\n</ol>\n<p>​</p>\n<ol>\n<li>mapreduce:分布式的批量计算</li>\n</ol>\n<p>​</p>\n<ol>\n<li>yarn:分布式的资源管理组件</li>\n</ol>\n<p>​</p>\n<h2 id=\"Hadoop-的发展和发行版本？\"><a href=\"#Hadoop-的发展和发行版本？\" class=\"headerlink\" title=\"Hadoop 的发展和发行版本？\"></a>Hadoop 的发展和发行版本？</h2><h4 id=\"​\"><a href=\"#​\" class=\"headerlink\" title=\"​\"></a>​</h4><h3 id=\"Hadoop-发展历史\"><a href=\"#Hadoop-发展历史\" class=\"headerlink\" title=\"Hadoop 发展历史\"></a>Hadoop 发展历史</h3><p>Lucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎<br>​</p>\n<p>2001 年年底成为 Apache 基金会的一个子项目<br>​</p>\n<p>对于大数量的场景，Lucene 面对与 Google 同样的困难<br>​</p>\n<p>学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch<br>​</p>\n<p>可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)<br>​</p>\n<p>GFS —&gt;HDFS<br>Map-Reduce —&gt;MR<br>BigTable —&gt;Hbase<br>​</p>\n<p>2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升<br>​</p>\n<p>2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中<br>​</p>\n<p>名字来源于 Doug Cutting 儿子的玩具大象<br>​</p>\n<p>Hadoop 就此诞生并迅速发展，标志这云计算时代来临</p>\n<h3 id=\"Hadoop-三大发行版本\"><a href=\"#Hadoop-三大发行版本\" class=\"headerlink\" title=\"Hadoop 三大发行版本\"></a>Hadoop 三大发行版本</h3><p>Hadoop 三大发行版本：Apache、Cloudera、Hortonworks。<br>​</p>\n<p>Apache 版本最原始（最基础）的版本，对于入门学习最好。<br>​</p>\n<p>Cloudera 在大型互联网企业中用的较多。<br>​</p>\n<p>Hortonworks 文档较好。</p>\n<h2 id=\"Hadoop-的优点？\"><a href=\"#Hadoop-的优点？\" class=\"headerlink\" title=\"Hadoop 的优点？\"></a>Hadoop 的优点？</h2><ol>\n<li>高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高容错性：能够自动将失败的任务重新分配。</li>\n</ol>\n<h2 id=\"Hadoop-组成\"><a href=\"#Hadoop-组成\" class=\"headerlink\" title=\"Hadoop 组成\"></a>Hadoop 组成</h2><p>在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。</p>\n<p>HDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。<br>​</p>\n<p>MapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。<br>​</p>\n<p>Common（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。<br>​</p>\n<p>在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。</p>\n<h3 id=\"HDFS-架构概述\"><a href=\"#HDFS-架构概述\" class=\"headerlink\" title=\"HDFS 架构概述\"></a>HDFS 架构概述</h3><p>NameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。</p>\n<p>DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</p>\n<p>Secondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。</p>\n<h3 id=\"YARN-架构概述\"><a href=\"#YARN-架构概述\" class=\"headerlink\" title=\"YARN 架构概述\"></a>YARN 架构概述</h3><p>ResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；</p>\n<p>NodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；</p>\n<p>ApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。</p>\n<p>Container：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。</p>\n<h3 id=\"MapReduce-架构概述\"><a href=\"#MapReduce-架构概述\" class=\"headerlink\" title=\"MapReduce 架构概述\"></a>MapReduce 架构概述</h3><p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce<br>​</p>\n<p>Map 阶段：并行处理输入数据<br>​</p>\n<p>Reduce 阶段：对 Map 结果进行汇总</p>\n<h2 id=\"Hadoop-生态圈理解\"><a href=\"#Hadoop-生态圈理解\" class=\"headerlink\" title=\"Hadoop 生态圈理解\"></a>Hadoop 生态圈理解</h2><p>​</p>\n<h3 id=\"协调与管理（Coordination-and-Management）\"><a href=\"#协调与管理（Coordination-and-Management）\" class=\"headerlink\" title=\"协调与管理（Coordination and Management）\"></a>协调与管理（Coordination and Management）</h3><h4 id=\"HCatalog\"><a href=\"#HCatalog\" class=\"headerlink\" title=\"HCatalog\"></a>HCatalog</h4><p>主要用来进行元数据管理。<br>概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。</p>\n<p>HCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。</p>\n<p>HCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。</p>\n<p>HCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。</p>\n<h4 id=\"Ambari\"><a href=\"#Ambari\" class=\"headerlink\" title=\"Ambari\"></a>Ambari</h4><p>主要是基于 web 管理 hadoop 的工具。<br>Apache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。</p>\n<p>Apache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。</p>\n<h4 id=\"Zookepper\"><a href=\"#Zookepper\" class=\"headerlink\" title=\"Zookepper\"></a>Zookepper</h4><p>主要是配置信息数据同步。<br>​</p>\n<p>Zookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。</p>\n<p>ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n<h3 id=\"询问（Query）\"><a href=\"#询问（Query）\" class=\"headerlink\" title=\"询问（Query）\"></a>询问（Query）</h3><h4 id=\"Impala\"><a href=\"#Impala\" class=\"headerlink\" title=\"Impala\"></a>Impala</h4><p>主要是基于内存运算，大平台，数据更快。<br>​</p>\n<p>Impala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。</p>\n<p>Impala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。</p>\n<h4 id=\"Presto\"><a href=\"#Presto\" class=\"headerlink\" title=\"Presto\"></a>Presto</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Presto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。</p>\n<h4 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。</p>\n<p>其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。</p>\n<h4 id=\"Pig\"><a href=\"#Pig\" class=\"headerlink\" title=\"Pig\"></a>Pig</h4><p>主要基于 sql 脚本。<br>​</p>\n<p>Apache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。</p>\n<p>要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。</p>\n<p>要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。</p>\n<p>优点：</p>\n<p>不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。<br>​</p>\n<p>使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。<br>Apache Pig 使用多查询方法，从而减少代码长度。</p>\n<h3 id=\"数据管道（Data-piping）\"><a href=\"#数据管道（Data-piping）\" class=\"headerlink\" title=\"数据管道（Data piping）\"></a>数据管道（Data piping）</h3><h4 id=\"Sqoop\"><a href=\"#Sqoop\" class=\"headerlink\" title=\"Sqoop\"></a>Sqoop</h4><p>Sqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。</p>\n<h4 id=\"Flume\"><a href=\"#Flume\" class=\"headerlink\" title=\"Flume\"></a>Flume</h4><p>Flume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</p>\n<h3 id=\"核心-Hadoop（Core-Hadoop）\"><a href=\"#核心-Hadoop（Core-Hadoop）\" class=\"headerlink\" title=\"核心 Hadoop（Core Hadoop）\"></a>核心 Hadoop（Core Hadoop）</h3><h4 id=\"HDFS\"><a href=\"#HDFS\" class=\"headerlink\" title=\"HDFS\"></a>HDFS</h4><p>Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。</p>\n<p>HDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。</p>\n<h4 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h4><p>MapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。</p>\n<p>MapReduce1.0:一个分布式的资源调度和离线并行计算框架。</p>\n<p>MapReduce2.1:一个分布式的离线并行计算框架。</p>\n<h4 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h4><p>Hadoop YARN：作业调度与集群资源管理的框架。</p>\n<p>Apache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。</p>\n<h3 id=\"机器学习（Machine-Learning）\"><a href=\"#机器学习（Machine-Learning）\" class=\"headerlink\" title=\"机器学习（Machine Learning）\"></a>机器学习（Machine Learning）</h3><h4 id=\"Mahout\"><a href=\"#Mahout\" class=\"headerlink\" title=\"Mahout\"></a>Mahout</h4><p>Apache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：</p>\n<p>推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。<br>​</p>\n<p>聚集：收集文件并进行相关文件分组。<br>​</p>\n<p>分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。<br>​</p>\n<p>频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。</p>\n<h3 id=\"NoSQL-数据库（NoSQL-Database）\"><a href=\"#NoSQL-数据库（NoSQL-Database）\" class=\"headerlink\" title=\"NoSQL 数据库（NoSQL Database）\"></a>NoSQL 数据库（NoSQL Database）</h3><h4 id=\"Hbase\"><a href=\"#Hbase\" class=\"headerlink\" title=\"Hbase\"></a>Hbase</h4><p>HBase 是一个分布式的、面向列的开源数据库。</p>\n<p>HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h4 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h4><p>Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。</p>\n<p>Apache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。<br>​</p>\n<p>Spark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。</p>\n<p>Spark 主要有三个特点 :</p>\n<p>首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。<br>​</p>\n<p>其次，Spark 很快，支持交互式计算和复杂算法。<br>​</p>\n<p>最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。</p>\n<h4 id=\"Tez\"><a href=\"#Tez\" class=\"headerlink\" title=\"Tez\"></a>Tez</h4><p>Tez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。<br>​</p>\n<p>它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。</p>\n<p>Tez 主要的两个设计目标:</p>\n<p>增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。<br>​</p>\n<p>高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。</p>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><p>Kafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：<br>​</p>\n<ol>\n<li><p>通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。</p>\n</li>\n<li><p>高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。</p>\n</li>\n<li><p>支持通过 Kafka 服务器和消费机集群来分区消息。</p>\n</li>\n<li><p>支持 Hadoop 并行数据加载。</p>\n</li>\n</ol>\n<h4 id=\"Storm\"><a href=\"#Storm\" class=\"headerlink\" title=\"Storm\"></a>Storm</h4><p>Storm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。</p>\n<p>Storm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</p>\n<h4 id=\"Oozie\"><a href=\"#Oozie\" class=\"headerlink\" title=\"Oozie\"></a>Oozie</h4><p>Oozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。</p>\n<p>Oozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。</p>\n<h4 id=\"R-语言\"><a href=\"#R-语言\" class=\"headerlink\" title=\"R 语言\"></a>R 语言</h4><p>R 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。<br>​</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"大数据概念理解\"><a href=\"#大数据概念理解\" class=\"headerlink\" title=\"大数据概念理解\"></a>大数据概念理解</h1><h2 id=\"什么是大数据？\"><a href=\"#什么是大数据？\" class=\"headerlink\" title=\"什么是大数据？\"></a>什么是大数据？</h2><p>大数据（big data）：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p>\n<p>主要解决：海量数据的存储和海量数据的分析计算问题。</p>\n<p>按顺序给出数据存储单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB。</p>\n<p>换算：1Byte = 8bit 1K = 1024Byte 1MB = 1024K 1G = 1024M 1T = 1024G 1P = 1024T</p>\n<h2 id=\"大数据特征\"><a href=\"#大数据特征\" class=\"headerlink\" title=\"大数据特征\"></a>大数据特征</h2><p>Volume（大量）：截至目前，人类生产的所有印刷材料的数据量是 200PB，而历史上全人类总共说过的话的数据量大约是 5EB。当前，典型个人计算机硬盘的容量为 TB 量级，而一些大企业的数据量已经接近 EB 量级。</p>\n<p>Velocity（高速）：这是大数据区分于传统数据挖掘的最显著特征。根据 IDC 的“数字宇宙”的报告，预计到 2020 年，全球数据使用量将达到 35.2ZB。在如此海量的数据面前，处理数据的效率就是企业的生命。</p>\n<p>Variety（多样）：这种类型的多样性也让数据被分为结构化数据和非结构化数据。相对于以往便于存储的以数据库/文本为主的结构化数据，非结构化数据越来越多，包括网络日志、音频、视频、图片、地理位置信息等，这些多类型的数据对数据的处理能力提出了更高要求。</p>\n<p>Value（低价值密度）：价值密度的高低与数据总量的大小成反比。比如，在一天监控视频中，我们只关心健身那一分钟，如何快速对有价值数据“提纯”成为目前大数据背景下待解决的难题。</p>\n<h2 id=\"大数据应用场景？\"><a href=\"#大数据应用场景？\" class=\"headerlink\" title=\"大数据应用场景？\"></a>大数据应用场景？</h2><p>物流仓储：大数据分析系统助力商家精细化运营、提升销量、节约成本。</p>\n<p>零售：分析用户消费习惯，为用户购买商品提供方便，从而提升商品销量。</p>\n<p>旅游：深度结合大数据能力与旅游行业需求，共建旅游产业智慧管理、智慧服务和智慧营销的未来。</p>\n<p>商品广告推荐：给用户推荐可能喜欢的商品。</p>\n<p>保险：海量数据挖掘及风险预测，助力保险行业精准营销，提升精细化定价能力。</p>\n<p>金融：多维度体现用户特征，帮助金融机构推荐优质客户，防范欺诈风险。</p>\n<p>房产：大数据全面助力房地产行业，打造精准投策与营销，选出更合适的地，建造更合适的楼，卖给更合适的人。</p>\n<h2 id=\"大数据有哪些部分组成？\"><a href=\"#大数据有哪些部分组成？\" class=\"headerlink\" title=\"大数据有哪些部分组成？\"></a>大数据有哪些部分组成？</h2><h3 id=\"大数据平台运维\"><a href=\"#大数据平台运维\" class=\"headerlink\" title=\"大数据平台运维\"></a>大数据平台运维</h3><p>平台软件(hadoop、spark、flink、kafka)的安装和维护<br>​</p>\n<p>关于平台的性能的监测<br>​</p>\n<p>平台的性能的调优</p>\n<h3 id=\"数据仓库\"><a href=\"#数据仓库\" class=\"headerlink\" title=\"数据仓库\"></a>数据仓库</h3><p>ETL 工程师：数据清洗<br>​</p>\n<p>Hive 工程师:数据分析</p>\n<h3 id=\"数据挖掘\"><a href=\"#数据挖掘\" class=\"headerlink\" title=\"数据挖掘\"></a>数据挖掘</h3><p>算法、建模</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>echarts、kylin、kibina<br>​</p>\n<h1 id=\"Hadoop-深入理解\"><a href=\"#Hadoop-深入理解\" class=\"headerlink\" title=\"Hadoop 深入理解\"></a>Hadoop 深入理解</h1><h2 id=\"什么是-Hadoop\"><a href=\"#什么是-Hadoop\" class=\"headerlink\" title=\"什么是 Hadoop?\"></a>什么是 Hadoop?</h2><p>Hadoop 是一个由 Apache 基金会所开发的分布式系统基础架构。<br>​</p>\n<p>有三个组成：<br>​</p>\n<ol>\n<li>hdfs:分布式的文件系统，主要解决大数据的储存问题</li>\n</ol>\n<p>​</p>\n<ol>\n<li>mapreduce:分布式的批量计算</li>\n</ol>\n<p>​</p>\n<ol>\n<li>yarn:分布式的资源管理组件</li>\n</ol>\n<p>​</p>\n<h2 id=\"Hadoop-的发展和发行版本？\"><a href=\"#Hadoop-的发展和发行版本？\" class=\"headerlink\" title=\"Hadoop 的发展和发行版本？\"></a>Hadoop 的发展和发行版本？</h2><h4 id=\"​\"><a href=\"#​\" class=\"headerlink\" title=\"​\"></a>​</h4><h3 id=\"Hadoop-发展历史\"><a href=\"#Hadoop-发展历史\" class=\"headerlink\" title=\"Hadoop 发展历史\"></a>Hadoop 发展历史</h3><p>Lucene 是 Doug Cutting 开创的开源软件，用 java 书写代码，实现与 Google 类似的全文搜索功能，它提供了全文检索引擎的架构，包括完整的查询引擎和索引引擎<br>​</p>\n<p>2001 年年底成为 Apache 基金会的一个子项目<br>​</p>\n<p>对于大数量的场景，Lucene 面对与 Google 同样的困难<br>​</p>\n<p>学习和模仿 Google 解决这些问题的办法 ：微型版 Nutch<br>​</p>\n<p>可以说 Google 是 hadoop 的思想之源(Google 在大数据方面的三篇论文)<br>​</p>\n<p>GFS —&gt;HDFS<br>Map-Reduce —&gt;MR<br>BigTable —&gt;Hbase<br>​</p>\n<p>2003-2004 年，Google 公开了部分 GFS 和 Mapreduce 思想的细节，以此为基础 Doug Cutting 等人用了 2 年业余时间实现了 DFS 和 Mapreduce 机制，使 Nutch 性能飙升<br>​</p>\n<p>2005 年 Hadoop 作为 Lucene 的子项目 Nutch 的一部分正式引入 Apache 基金会。2006 年 3 月份，Map-Reduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中<br>​</p>\n<p>名字来源于 Doug Cutting 儿子的玩具大象<br>​</p>\n<p>Hadoop 就此诞生并迅速发展，标志这云计算时代来临</p>\n<h3 id=\"Hadoop-三大发行版本\"><a href=\"#Hadoop-三大发行版本\" class=\"headerlink\" title=\"Hadoop 三大发行版本\"></a>Hadoop 三大发行版本</h3><p>Hadoop 三大发行版本：Apache、Cloudera、Hortonworks。<br>​</p>\n<p>Apache 版本最原始（最基础）的版本，对于入门学习最好。<br>​</p>\n<p>Cloudera 在大型互联网企业中用的较多。<br>​</p>\n<p>Hortonworks 文档较好。</p>\n<h2 id=\"Hadoop-的优点？\"><a href=\"#Hadoop-的优点？\" class=\"headerlink\" title=\"Hadoop 的优点？\"></a>Hadoop 的优点？</h2><ol>\n<li>高可靠性：Hadoop 底层维护多个数据副本，所以即使 Hadoop 某个计算元素或存储出现故障，也不会导致数据的丢失。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高效性：在 MapReduce 的思想下，Hadoop 是并行工作的，以加快任务处理速度。</li>\n</ol>\n<p>​</p>\n<ol>\n<li>高容错性：能够自动将失败的任务重新分配。</li>\n</ol>\n<h2 id=\"Hadoop-组成\"><a href=\"#Hadoop-组成\" class=\"headerlink\" title=\"Hadoop 组成\"></a>Hadoop 组成</h2><p>在 Hadoop1.x 时代，Hadoop 中的 MapReduce 同时处理业务逻辑运算和资源的调度，耦合性较大。</p>\n<p>HDFS（数据存储） Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。<br>​</p>\n<p>MapReduce（资源调度+计算） Hadoop MapReduce：一个分布式的资源调度和离线并行计算框架。<br>​</p>\n<p>Common（辅助工具） Hadoop Common：支持其他模块的工具模块（Configuration、RPC、序列化机制、日志操作）。<br>​</p>\n<p>在 Hadoop2.x 时代，增加了 Yarn。Yarn 只负责资源的调度，MapReduce 只负责运算。</p>\n<h3 id=\"HDFS-架构概述\"><a href=\"#HDFS-架构概述\" class=\"headerlink\" title=\"HDFS 架构概述\"></a>HDFS 架构概述</h3><p>NameNode（nn）（主节点）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的 DataNode 等。</p>\n<p>DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</p>\n<p>Secondary NameNode(2nn)：用来监控 HDFS 状态的辅助后台程序，每隔一段时间获取 HDFS 元数据的快照。</p>\n<h3 id=\"YARN-架构概述\"><a href=\"#YARN-架构概述\" class=\"headerlink\" title=\"YARN 架构概述\"></a>YARN 架构概述</h3><p>ResourceManager(rm)：处理客户端请求、启动/监控 ApplicationMaster、监控 NodeManager、资源分配与调度；</p>\n<p>NodeManager(nm)：单个节点上的资源管理、处理来自 ResourceManager 的命令、处理来自 ApplicationMaster 的命令；</p>\n<p>ApplicationMaster：数据切分、为应用程序申请资源，并分配给内部任务、任务监控与容错。</p>\n<p>Container：对任务运行环境的抽象，封装了 CPU、内存等多维资源以及环境变量、启动命令等任务运行相关的信息。</p>\n<h3 id=\"MapReduce-架构概述\"><a href=\"#MapReduce-架构概述\" class=\"headerlink\" title=\"MapReduce 架构概述\"></a>MapReduce 架构概述</h3><p>MapReduce 将计算过程分为两个阶段：Map 和 Reduce<br>​</p>\n<p>Map 阶段：并行处理输入数据<br>​</p>\n<p>Reduce 阶段：对 Map 结果进行汇总</p>\n<h2 id=\"Hadoop-生态圈理解\"><a href=\"#Hadoop-生态圈理解\" class=\"headerlink\" title=\"Hadoop 生态圈理解\"></a>Hadoop 生态圈理解</h2><p>​</p>\n<h3 id=\"协调与管理（Coordination-and-Management）\"><a href=\"#协调与管理（Coordination-and-Management）\" class=\"headerlink\" title=\"协调与管理（Coordination and Management）\"></a>协调与管理（Coordination and Management）</h3><h4 id=\"HCatalog\"><a href=\"#HCatalog\" class=\"headerlink\" title=\"HCatalog\"></a>HCatalog</h4><p>主要用来进行元数据管理。<br>概括来说，HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。</p>\n<p>HCatalog 使用了 Hive 的元数据存储，这样就使得像 MapReduce 这样的第三方应用可以直接从 Hive 的数据仓库中读写数据。同时，HCatalog 还支持用户在 MapReduce 程序中只读取需要的表分区和字段，而不需要读取整个表。也就是提供一种逻辑上的视图来读取数据，而不仅仅是从物理文件的维度。</p>\n<p>HCatalog 还提供了一个消息通知服务，这样对于 Oozie 这样的工作流工具，在数据仓库提供新数据时，可以通知到这些工作流工具。</p>\n<p>HCatalog 主要解决了这样一个问题：将以前各自为政的数据处理工具（如 Hive、Pig、MapReduce）有机的整合在一起，使其相互之间能够顺畅合作，进而提升效率。</p>\n<h4 id=\"Ambari\"><a href=\"#Ambari\" class=\"headerlink\" title=\"Ambari\"></a>Ambari</h4><p>主要是基于 web 管理 hadoop 的工具。<br>Apache Ambari 是一种基于 Web 的工具，支持 Apache Hadoop 集群的供应、管理和监控。</p>\n<p>Apache Ambari 支持大多数 Hadoop 组件，包括 HDFS、MapReduce、Hive、Pig、Hbase、Zookeepr、Sqoop 和 Hcatalog 等的集中管理。也是 5 个顶级 hadoop 管理工具之一。</p>\n<h4 id=\"Zookepper\"><a href=\"#Zookepper\" class=\"headerlink\" title=\"Zookepper\"></a>Zookepper</h4><p>主要是配置信息数据同步。<br>​</p>\n<p>Zookeeper 是 Google 的 Chubby 一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。</p>\n<p>ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n<h3 id=\"询问（Query）\"><a href=\"#询问（Query）\" class=\"headerlink\" title=\"询问（Query）\"></a>询问（Query）</h3><h4 id=\"Impala\"><a href=\"#Impala\" class=\"headerlink\" title=\"Impala\"></a>Impala</h4><p>主要是基于内存运算，大平台，数据更快。<br>​</p>\n<p>Impala 是 Cloudera 公司主导开发的新型查询系统，它提供 SQL 语义，能查询存储在 Hadoop 的 HDFS 和 HBase 中的 PB 级大数据。已有的 Hive 系统虽然也提供了 SQL 语义，但由于 Hive 底层执行使用的是 MapReduce 引擎，仍然是一个批处理过程，难以满足查询的交互性。相比之下，Impala 的最大特点也是最大卖点就是它的快速。</p>\n<p>Impala 支持内存中数据处理，它访问/分析存储在 Hadoop 数据节点上的数据，而无需数据移动。支持各种文件格式，如 LZO、序列文件、Avro、RCFile 和 Parquet。</p>\n<h4 id=\"Presto\"><a href=\"#Presto\" class=\"headerlink\" title=\"Presto\"></a>Presto</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Presto 是一个开源的分布式 SQL 查询引擎，适用于交互式分析查询，是一种 Massively parallel processing (MPP)架构，多个节点管道式执⾏，⽀持任意数据源（通过扩展式 Connector 组件），数据量支持 GB 到 PB 字节。</p>\n<h4 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h4><p>主要是基于 sql 语句。<br>​</p>\n<p>Hive 是基于 Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的 sql 查询功能，可以将 sql 语句转换为 MapReduce 任务进行运行。</p>\n<p>其优点是学习成本低，可以通过类 SQL 语句快速实现简单的 MapReduce 统计，不必开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。</p>\n<h4 id=\"Pig\"><a href=\"#Pig\" class=\"headerlink\" title=\"Pig\"></a>Pig</h4><p>主要基于 sql 脚本。<br>​</p>\n<p>Apache Pig 是 MapReduce 的一个抽象。它是一个工具/平台，用于分析较大的数据集，并将它们表示为数据流。Pig 通常与 Hadoop 一起使用；我们可以使用 Apache Pig 在 Hadoop 中执行所有的数据处理操作。</p>\n<p>要编写数据分析程序，Pig 提供了一种称为 Pig Latin 的高级语言。该语言提供了各种操作符，程序员可以利用它们开发自己的用于读取，写入和处理数据的功能。</p>\n<p>要使用 Apache Pig 分析数据，程序员需要使用 Pig Latin 语言编写脚本。所有这些脚本都在内部转换为 Map 和 Reduce 任务。Apache Pig 有一个名为 Pig Engine 的组件，它接受 Pig Latin 脚本作为输入，并将这些脚本转换为 MapReduce 作业。</p>\n<p>优点：</p>\n<p>不太擅长 Java 的程序员通常习惯于使用 Hadoop，特别是在执行任一 MapReduce 作业时。Apache Pig 是所有这样的程序员的福音。<br>​</p>\n<p>使用 Pig Latin ，程序员可以轻松地执行 MapReduce 作业，而无需在 Java 中键入复杂的代码。<br>Apache Pig 使用多查询方法，从而减少代码长度。</p>\n<h3 id=\"数据管道（Data-piping）\"><a href=\"#数据管道（Data-piping）\" class=\"headerlink\" title=\"数据管道（Data piping）\"></a>数据管道（Data piping）</h3><h4 id=\"Sqoop\"><a href=\"#Sqoop\" class=\"headerlink\" title=\"Sqoop\"></a>Sqoop</h4><p>Sqoop 是一款开源的工具，主要用于在 Hadoop(Hive)与传统的数据库(mysql)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle 等）中的数据导进到 Hadoop 的 HDFS 中，也可以将 HDFS 的数据导进到关系型数据库中。</p>\n<h4 id=\"Flume\"><a href=\"#Flume\" class=\"headerlink\" title=\"Flume\"></a>Flume</h4><p>Flume 是 Cloudera 提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume 提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</p>\n<h3 id=\"核心-Hadoop（Core-Hadoop）\"><a href=\"#核心-Hadoop（Core-Hadoop）\" class=\"headerlink\" title=\"核心 Hadoop（Core Hadoop）\"></a>核心 Hadoop（Core Hadoop）</h3><h4 id=\"HDFS\"><a href=\"#HDFS\" class=\"headerlink\" title=\"HDFS\"></a>HDFS</h4><p>Hadoop HDFS：一个高可靠、高吞吐量的分布式文件系统。</p>\n<p>HDFS （Hadoop Distributed File System）是 Hadoop 下的分布式文件系统，具有高容错(fault-tolerant)、高吞吐量(high throughput)等特性，可以部署在低成本(low-cost)的硬件上。</p>\n<h4 id=\"MapReduce\"><a href=\"#MapReduce\" class=\"headerlink\" title=\"MapReduce\"></a>MapReduce</h4><p>MapReduce 是一个分布式计算框架，用于编写批处理应用程序。编写好的程序可以提交到 Hadoop 集群上用于并行处理大规模的数据集。</p>\n<p>MapReduce1.0:一个分布式的资源调度和离线并行计算框架。</p>\n<p>MapReduce2.1:一个分布式的离线并行计算框架。</p>\n<h4 id=\"Yarn\"><a href=\"#Yarn\" class=\"headerlink\" title=\"Yarn\"></a>Yarn</h4><p>Hadoop YARN：作业调度与集群资源管理的框架。</p>\n<p>Apache YARN (Yet Another Resource Negotiator) 是 hadoop 2.0 引入的集群资源管理系统。用户可以将各种服务框架部署在 YARN 上，由 YARN 进行统一地管理和资源分配。</p>\n<h3 id=\"机器学习（Machine-Learning）\"><a href=\"#机器学习（Machine-Learning）\" class=\"headerlink\" title=\"机器学习（Machine Learning）\"></a>机器学习（Machine Learning）</h3><h4 id=\"Mahout\"><a href=\"#Mahout\" class=\"headerlink\" title=\"Mahout\"></a>Mahout</h4><p>Apache Mahout 是个可扩展的机器学习和数据挖掘库，当前 Mahout 支持主要的 4 个用例：</p>\n<p>推荐挖掘：搜集用户动作并以此给用户推荐可能喜欢的事物。<br>​</p>\n<p>聚集：收集文件并进行相关文件分组。<br>​</p>\n<p>分类：从现有的分类文档中学习，寻找文档中的相似特征，并为无标签的文档进行正确的归类。<br>​</p>\n<p>频繁项集挖掘：将一组项分组，并识别哪些个别项会经常一起出现。</p>\n<h3 id=\"NoSQL-数据库（NoSQL-Database）\"><a href=\"#NoSQL-数据库（NoSQL-Database）\" class=\"headerlink\" title=\"NoSQL 数据库（NoSQL Database）\"></a>NoSQL 数据库（NoSQL Database）</h3><h4 id=\"Hbase\"><a href=\"#Hbase\" class=\"headerlink\" title=\"Hbase\"></a>Hbase</h4><p>HBase 是一个分布式的、面向列的开源数据库。</p>\n<p>HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><h4 id=\"Spark\"><a href=\"#Spark\" class=\"headerlink\" title=\"Spark\"></a>Spark</h4><p>Spark 是当前最流行的开源大数据内存计算框架。可以基于 Hadoop 上存储的大数据进行计算。 现在形成一个高速发展应用广泛的生态系统。</p>\n<p>Apache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。<br>​</p>\n<p>Spark 是 UC Berkeley AMP lab (加州大学伯克利分校的 AMP 实验室)所开源的类 Hadoop MapReduce 的通用并行框架，Spark，拥有 Hadoop MapReduce 所具有的优点；但不同于 MapReduce 的是——Job 中间输出结果可以保存在内存中，从而不再需要读写 HDFS，因此 Spark 能更好地适用于数据挖掘与机器学习等需要迭代 MapReduce 的算法。</p>\n<p>Spark 主要有三个特点 :</p>\n<p>首先，高级 API 剥离了对集群本身的关注，Spark 应用开发者可以专注于应用所要做的计算本身。<br>​</p>\n<p>其次，Spark 很快，支持交互式计算和复杂算法。<br>​</p>\n<p>最后，Spark 是一个通用引擎，可用它来完成各种各样的运算，包括 SQL 查询、文本处理、机器学习等，而在 Spark 出现之前，我们一般需要学习各种各样的引擎来分别处理这些需求。</p>\n<h4 id=\"Tez\"><a href=\"#Tez\" class=\"headerlink\" title=\"Tez\"></a>Tez</h4><p>Tez 是一个 Apache 的开源项目，意在构建一个应用框架，能通过复杂任务的 DAG 来处理数据。<br>​</p>\n<p>它是基于当前的 Hadoop Yarn 之上，换句话就是 Yarn 为其提供资源。</p>\n<p>Tez 主要的两个设计目标:</p>\n<p>增强终端用户使用 : 灵活的数据流定义 API；灵活的输入输出运行时模型(强调处理模型)；数据类型无关；简洁部署 。<br>​</p>\n<p>高性能执行 ： 通过 MapReduce 提高性能；资源优化管理；执行时计划重定义；物理数据流的动态决策 。</p>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><p>Kafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性：<br>​</p>\n<ol>\n<li><p>通过 O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以 TB 的消息存储也能够保持长时间的稳定性能。</p>\n</li>\n<li><p>高吞吐量：即使是非常普通的硬件 Kafka 也可以支持每秒数百万的消息。</p>\n</li>\n<li><p>支持通过 Kafka 服务器和消费机集群来分区消息。</p>\n</li>\n<li><p>支持 Hadoop 并行数据加载。</p>\n</li>\n</ol>\n<h4 id=\"Storm\"><a href=\"#Storm\" class=\"headerlink\" title=\"Storm\"></a>Storm</h4><p>Storm 为分布式实时计算提供了一组通用原语，可被用于“流处理”之中，实时处理消息并更新数据库。这是管理队列及工作者集群的另一种方式。</p>\n<p>Storm 也可被用于“连续计算”（continuous computation），对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</p>\n<h4 id=\"Oozie\"><a href=\"#Oozie\" class=\"headerlink\" title=\"Oozie\"></a>Oozie</h4><p>Oozie 是一个管理 Hdoop 作业（job）的工作流程调度管理系统。</p>\n<p>Oozie 协调作业就是通过时间（频率）和有效数据触发当前的 Oozie 工作流程。</p>\n<h4 id=\"R-语言\"><a href=\"#R-语言\" class=\"headerlink\" title=\"R 语言\"></a>R 语言</h4><p>R 是用于统计分析、绘图的语言和操作环境。R 是属于 GNU 系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。<br>​</p>\n"}],"PostAsset":[{"_id":"source/_posts/Seata protocol supports http2/seata_protobuf.png","slug":"seata_protobuf.png","post":"ckse2m4pl0005hcjygexbaxsw","modified":0,"renderable":0},{"_id":"source/_posts/什么是RBAC权限模型/ClassicAC.png","slug":"ClassicAC.png","post":"ckse2m4pm0007hcjye01n4mc4","modified":0,"renderable":0},{"_id":"source/_posts/什么是RBAC权限模型/RBAC.png","slug":"RBAC.png","post":"ckse2m4pm0007hcjye01n4mc4","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}